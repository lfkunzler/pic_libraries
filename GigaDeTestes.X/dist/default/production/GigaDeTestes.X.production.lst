

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jul 01 18:13:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     _TRISDbits	set	3989
    66  0000                     _PORTD	set	3971
    67  0000                     _LATDbits	set	3980
    68  0000                     _TRISD	set	3989
    69  0000                     _T1CONbits	set	4045
    70  0000                     _TRISC	set	3988
    71  0000                     _OSCCON	set	4051
    72  0000                     _ADCON1	set	4033
    73  0000                     _PORTCbits	set	3970
    74  0000                     _TMR1L	set	4046
    75  0000                     _TMR1H	set	4047
    76  0000                     _TMR1IP	set	31992
    77  0000                     _TMR1IE	set	31976
    78  0000                     _PEIE	set	32662
    79  0000                     _GIEH	set	32663
    80  0000                     _IPEN	set	32391
    81  0000                     _TMR1IF	set	31984
    82                           
    83                           	psect	smallconst
    84  000800                     __psmallconst:
    85                           	opt stack 0
    86  000800  00                 	db	0
    87  000801                     STR_1:
    88  000801  70                 	db	112	;'p'
    89  000802  61                 	db	97	;'a'
    90  000803  75                 	db	117	;'u'
    91  000804  20                 	db	32
    92  000805  6E                 	db	110	;'n'
    93  000806  6F                 	db	111	;'o'
    94  000807  20                 	db	32
    95  000808  63                 	db	99	;'c'
    96  000809  75                 	db	117	;'u'
    97  00080A  20                 	db	32
    98  00080B  64                 	db	100	;'d'
    99  00080C  6F                 	db	111	;'o'
   100  00080D  20                 	db	32
   101  00080E  20                 	db	32
   102  00080F  20                 	db	32
   103  000810  20                 	db	32
   104  000811  20                 	db	32
   105  000812  20                 	db	32
   106  000813  20                 	db	32
   107  000814  20                 	db	32
   108  000815  70                 	db	112	;'p'
   109  000816  61                 	db	97	;'a'
   110  000817  74                 	db	116	;'t'
   111  000818  72                 	db	114	;'r'
   112  000819  69                 	db	105	;'i'
   113  00081A  63                 	db	99	;'c'
   114  00081B  00                 	db	0
   115  00081C  00                 	db	0
   116                           
   117                           ; #config settings
   118  00081D  00                 	db	0	; dummy byte at the end
   119  0000                     
   120                           	psect	cinit
   121  000C34                     __pcinit:
   122                           	opt stack 0
   123  000C34                     start_initialization:
   124                           	opt stack 0
   125  000C34                     __initialization:
   126                           	opt stack 0
   127                           
   128                           ; Clear objects allocated to COMRAM (33 bytes)
   129  000C34  EE00  F029         	lfsr	0,__pbssCOMRAM
   130  000C38  0E21               	movlw	33
   131  000C3A                     clear_0:
   132  000C3A  6AEE               	clrf	postinc0,c
   133  000C3C  06E8               	decf	wreg,f,c
   134  000C3E  E1FD               	bnz	clear_0
   135  000C40                     end_of_initialization:
   136                           	opt stack 0
   137  000C40                     __end_of__initialization:
   138                           	opt stack 0
   139  000C40  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   140  000C42  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   141  000C44  0E00               	movlw	low (__Lsmallconst shr (0+16))
   142  000C46  6EF8               	movwf	tblptru,c
   143  000C48  0E08               	movlw	high __Lsmallconst
   144  000C4A  6EF7               	movwf	tblptrh,c
   145  000C4C  0100               	movlb	0
   146  000C4E  EF12  F005         	goto	_main	;jump to C main() function
   147                           tblptru	equ	0xFF8
   148                           tblptrh	equ	0xFF7
   149                           postinc0	equ	0xFEE
   150                           wreg	equ	0xFE8
   151                           
   152                           	psect	bssCOMRAM
   153  000029                     __pbssCOMRAM:
   154                           	opt stack 0
   155  000029                     _lcd:
   156                           	opt stack 0
   157  000029                     	ds	33
   158                           tblptru	equ	0xFF8
   159                           tblptrh	equ	0xFF7
   160                           postinc0	equ	0xFEE
   161                           wreg	equ	0xFE8
   162                           
   163                           	psect	cstackBANK0
   164  000060                     __pcstackBANK0:
   165                           	opt stack 0
   166  000060                     ??_Delay10KTCYx:
   167  000060                     delay_ms@milis:
   168                           	opt stack 0
   169  000060                     lcdMemClean@lcd:
   170                           	opt stack 0
   171  000060                     lcdWrite@lcd:
   172                           	opt stack 0
   173  000060                     DelayFor18TCY@i:
   174                           	opt stack 0
   175                           
   176                           ; 2 bytes @ 0x0
   177  000060                     	ds	1
   178  000061                     Delay10KTCYx@unit:
   179                           	opt stack 0
   180                           
   181                           ; 1 bytes @ 0x1
   182  000061                     	ds	1
   183  000062                     ??_SetDDRamAddr:
   184  000062                     ??_delay_ms:
   185  000062                     lcdMemClean@i:
   186                           	opt stack 0
   187  000062                     lcdWrite@row:
   188                           	opt stack 0
   189  000062                     WriteCmdXLCD@cmd:
   190                           	opt stack 0
   191                           
   192                           ; 1 bytes @ 0x2
   193  000062                     	ds	1
   194  000063                     lcdWrite@col:
   195                           	opt stack 0
   196                           
   197                           ; 1 bytes @ 0x3
   198  000063                     	ds	1
   199  000064                     delay_ms@t:
   200                           	opt stack 0
   201  000064                     lcdWrite@string:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x4
   205  000064                     	ds	1
   206  000065                     SetDDRamAddr@DDaddr:
   207                           	opt stack 0
   208  000065                     lcdCleanAll@lcd:
   209                           	opt stack 0
   210                           
   211                           ; 2 bytes @ 0x5
   212  000065                     	ds	1
   213  000066                     OpenXLCD@lcdtype:
   214                           	opt stack 0
   215                           
   216                           ; 1 bytes @ 0x6
   217  000066                     	ds	1
   218  000067                     lcdInit@lcd:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x7
   222  000067                     	ds	2
   223  000069                     tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           ; 1 bytes @ 0x9
   229                           
   230                           	psect	cstackCOMRAM
   231  000001                     __pcstackCOMRAM:
   232                           	opt stack 0
   233  000001                     ??_ISR:
   234  000001                     
   235                           ; 1 bytes @ 0x0
   236  000001                     	ds	18
   237  000013                     ??_ISR_LP:
   238                           
   239                           ; 1 bytes @ 0x12
   240  000013                     	ds	22
   241                           tblptru	equ	0xFF8
   242                           tblptrh	equ	0xFF7
   243                           postinc0	equ	0xFEE
   244                           wreg	equ	0xFE8
   245                           
   246 ;;
   247 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   248 ;;
   249 ;; *************** function _main *****************
   250 ;; Defined at:
   251 ;;		line 29 in file "main.c"
   252 ;; Parameters:    Size  Location     Type
   253 ;;		None
   254 ;; Auto vars:     Size  Location     Type
   255 ;;		None
   256 ;; Return value:  Size  Location     Type
   257 ;;                  1    wreg      void 
   258 ;; Registers used:
   259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   260 ;; Tracked objects:
   261 ;;		On entry : 0/0
   262 ;;		On exit  : 0/0
   263 ;;		Unchanged: 0/0
   264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   265 ;;      Params:         0       0       0       0       0       0       0       0       0
   266 ;;      Locals:         0       0       0       0       0       0       0       0       0
   267 ;;      Temps:          0       0       0       0       0       0       0       0       0
   268 ;;      Totals:         0       0       0       0       0       0       0       0       0
   269 ;;Total ram usage:        0 bytes
   270 ;; Hardware stack levels required when called:    7
   271 ;; This function calls:
   272 ;;		_lcdInit
   273 ;;		_lcdWrite
   274 ;; This function is called by:
   275 ;;		Startup code after reset
   276 ;; This function uses a non-reentrant model
   277 ;;
   278                           
   279                           	psect	text0
   280  000A24                     __ptext0:
   281                           	opt stack 0
   282  000A24                     _main:
   283                           	opt stack 24
   284                           
   285                           ;main.c: 31: ADCON1 = 0x0F;
   286                           
   287                           ;incstack = 0
   288  000A24  0E0F               	movlw	15
   289  000A26  6EC1               	movwf	4033,c	;volatile
   290                           
   291                           ;main.c: 32: OSCCON = 0x72;
   292  000A28  0E72               	movlw	114
   293  000A2A  6ED3               	movwf	4051,c	;volatile
   294                           
   295                           ;main.c: 34: TRISC = 0xFE;
   296  000A2C  0EFE               	movlw	254
   297  000A2E  6E94               	movwf	3988,c	;volatile
   298                           
   299                           ;main.c: 35: PORTCbits.RC0 = 1;
   300  000A30  8082               	bsf	3970,0,c	;volatile
   301                           
   302                           ;main.c: 38: IPEN = 1;
   303  000A32  8ED0               	bsf	4048,7,c	;volatile
   304                           
   305                           ;main.c: 39: GIEH = 1;
   306  000A34  8EF2               	bsf	intcon,7,c	;volatile
   307                           
   308                           ;main.c: 40: PEIE = 1;
   309  000A36  8CF2               	bsf	intcon,6,c	;volatile
   310                           
   311                           ;main.c: 50: T1CONbits.RD16 = 1;
   312  000A38  8ECD               	bsf	4045,7,c	;volatile
   313                           
   314                           ;main.c: 51: T1CONbits.T1RUN = 0;
   315  000A3A  9CCD               	bcf	4045,6,c	;volatile
   316                           
   317                           ;main.c: 52: T1CONbits.T1CKPS = 0;
   318  000A3C  0ECF               	movlw	-49
   319  000A3E  16CD               	andwf	4045,f,c	;volatile
   320                           
   321                           ;main.c: 53: T1CONbits.T1OSCEN = 0;
   322  000A40  96CD               	bcf	4045,3,c	;volatile
   323                           
   324                           ;main.c: 54: T1CONbits.TMR1CS = 0;
   325  000A42  92CD               	bcf	4045,1,c	;volatile
   326                           
   327                           ;main.c: 55: T1CONbits.TMR1ON = 1;
   328  000A44  80CD               	bsf	4045,0,c	;volatile
   329                           
   330                           ;main.c: 56: TMR1H = 0x63;
   331  000A46  0E63               	movlw	99
   332  000A48  6ECF               	movwf	4047,c	;volatile
   333                           
   334                           ;main.c: 57: TMR1L = 0xC0;
   335  000A4A  0EC0               	movlw	192
   336  000A4C  6ECE               	movwf	4046,c	;volatile
   337                           
   338                           ;main.c: 58: TMR1IF = 0;
   339  000A4E  909E               	bcf	3998,0,c	;volatile
   340                           
   341                           ;main.c: 59: TMR1IE = 1;
   342  000A50  809D               	bsf	3997,0,c	;volatile
   343                           
   344                           ;main.c: 60: TMR1IP = 0;
   345  000A52  909F               	bcf	3999,0,c	;volatile
   346                           
   347                           ;main.c: 63: lcdInit(&lcd);
   348  000A54  0E29               	movlw	low _lcd
   349  000A56  0100               	movlb	0	; () banked
   350  000A58  6F67               	movwf	lcdInit@lcd& (0+255),b
   351  000A5A  0E00               	movlw	high _lcd
   352  000A5C  6F68               	movwf	(lcdInit@lcd+1)& (0+255),b
   353  000A5E  ECBB  F005         	call	_lcdInit	;wreg free
   354                           
   355                           ;main.c: 64: lcdWrite(&lcd, 1, 1, "pau no cu do        patric\0");
   356  000A62  0E29               	movlw	low _lcd
   357  000A64  0100               	movlb	0	; () banked
   358  000A66  6F60               	movwf	lcdWrite@lcd& (0+255),b
   359  000A68  0E00               	movlw	high _lcd
   360  000A6A  6F61               	movwf	(lcdWrite@lcd+1)& (0+255),b
   361  000A6C  0E01               	movlw	1
   362  000A6E  6F62               	movwf	lcdWrite@row& (0+255),b
   363  000A70  0E01               	movlw	1
   364  000A72  6F63               	movwf	lcdWrite@col& (0+255),b
   365  000A74  0E01               	movlw	low STR_1
   366  000A76  6F64               	movwf	lcdWrite@string& (0+255),b
   367  000A78  0E08               	movlw	high STR_1
   368  000A7A  6F65               	movwf	(lcdWrite@string+1)& (0+255),b
   369  000A7C  EC0F  F004         	call	_lcdWrite	;wreg free
   370  000A80                     l48:
   371  000A80  D7FF               	goto	l48
   372  000A82                     __end_of_main:
   373                           	opt stack 0
   374                           tblptru	equ	0xFF8
   375                           tblptrh	equ	0xFF7
   376                           intcon	equ	0xFF2
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           
   380 ;; *************** function _lcdWrite *****************
   381 ;; Defined at:
   382 ;;		line 52 in file "display.c"
   383 ;; Parameters:    Size  Location     Type
   384 ;;  lcd             2    0[BANK0 ] PTR struct .
   385 ;;		 -> lcd(33), 
   386 ;;  row             1    2[BANK0 ] unsigned char 
   387 ;;  col             1    3[BANK0 ] unsigned char 
   388 ;;  string          2    4[BANK0 ] PTR unsigned char 
   389 ;;		 -> STR_1(28), 
   390 ;; Auto vars:     Size  Location     Type
   391 ;;		None
   392 ;; Return value:  Size  Location     Type
   393 ;;                  2    0[BANK0 ] int 
   394 ;; Registers used:
   395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
   396 ;; Tracked objects:
   397 ;;		On entry : 0/0
   398 ;;		On exit  : 0/0
   399 ;;		Unchanged: 0/0
   400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   401 ;;      Params:         0       6       0       0       0       0       0       0       0
   402 ;;      Locals:         0       0       0       0       0       0       0       0       0
   403 ;;      Temps:          0       0       0       0       0       0       0       0       0
   404 ;;      Totals:         0       6       0       0       0       0       0       0       0
   405 ;;Total ram usage:        6 bytes
   406 ;; Hardware stack levels used:    1
   407 ;; Hardware stack levels required when called:    2
   408 ;; This function calls:
   409 ;;		Nothing
   410 ;; This function is called by:
   411 ;;		_main
   412 ;; This function uses a non-reentrant model
   413 ;;
   414                           
   415                           	psect	text1
   416  00081E                     __ptext1:
   417                           	opt stack 0
   418  00081E                     _lcdWrite:
   419                           	opt stack 28
   420                           
   421                           ;display.c: 54: if (row == 0 || row > 2 || col == 0 || col > 16) {
   422                           
   423                           ;incstack = 0
   424  00081E  0100               	movlb	0	; () banked
   425  000820  5162               	movf	lcdWrite@row& (0+255),w,b
   426  000822  B4D8               	btfsc	status,2,c
   427  000824  0012               	return	
   428                           
   429                           ; BSR set to: 0
   430  000826  0E03               	movlw	3
   431  000828  6162               	cpfslt	lcdWrite@row& (0+255),b
   432  00082A  0012               	return	
   433                           
   434                           ; BSR set to: 0
   435  00082C  5163               	movf	lcdWrite@col& (0+255),w,b
   436  00082E  B4D8               	btfsc	status,2,c
   437  000830  0012               	return	
   438                           
   439                           ; BSR set to: 0
   440  000832  0E10               	movlw	16
   441  000834  6563               	cpfsgt	lcdWrite@col& (0+255),b
   442  000836  D001               	goto	l102
   443  000838  0012               	return	
   444  00083A                     l102:
   445                           
   446                           ; BSR set to: 0
   447                           ;display.c: 56: }
   448                           ;display.c: 58: row--;
   449                           
   450                           ; BSR set to: 0
   451  00083A  0762               	decf	lcdWrite@row& (0+255),f,b
   452                           
   453                           ;display.c: 59: col--;
   454  00083C  0763               	decf	lcdWrite@col& (0+255),f,b
   455                           
   456                           ; BSR set to: 0
   457                           ;display.c: 61: if (row == 0) {
   458  00083E  5162               	movf	lcdWrite@row& (0+255),w,b
   459  000840  B4D8               	btfsc	status,2,c
   460  000842  D017               	goto	l107
   461  000844  D03D               	goto	l112
   462  000846                     
   463                           ; BSR set to: 0
   464                           ;display.c: 63: lcd->Memory[0][col++] = *string;
   465                           
   466                           ; BSR set to: 0
   467  000846  C064  FFF6         	movff	lcdWrite@string,tblptrl
   468  00084A  C065  FFF7         	movff	lcdWrite@string+1,tblptrh
   469  00084E                     	if	0	;tblptru may be non-zero
   470  00084E                     	endif
   471  00084E                     	if	0	;tblptru may be non-zero
   472  00084E                     	endif
   473  00084E  5163               	movf	lcdWrite@col& (0+255),w,b
   474  000850  0D01               	mullw	1
   475  000852  0E01               	movlw	1
   476  000854  26F3               	addwf	prodl,f,c
   477  000856  0E00               	movlw	0
   478  000858  22F4               	addwfc	prodh,f,c
   479  00085A  50F3               	movf	prodl,w,c
   480  00085C  2560               	addwf	lcdWrite@lcd& (0+255),w,b
   481  00085E  6ED9               	movwf	fsr2l,c
   482  000860  50F4               	movf	prodh,w,c
   483  000862  2161               	addwfc	(lcdWrite@lcd+1)& (0+255),w,b
   484  000864  6EDA               	movwf	fsr2h,c
   485  000866  0008               	tblrd		*
   486  000868  CFF5 FFDF          	movff	tablat,indf2
   487                           
   488                           ; BSR set to: 0
   489  00086C  2B63               	incf	lcdWrite@col& (0+255),f,b
   490                           
   491                           ; BSR set to: 0
   492                           ;display.c: 64: string++;
   493  00086E  4B64               	infsnz	lcdWrite@string& (0+255),f,b
   494  000870  2B65               	incf	(lcdWrite@string+1)& (0+255),f,b
   495  000872                     l107:
   496                           
   497                           ; BSR set to: 0
   498                           
   499                           ; BSR set to: 0
   500  000872  C064  FFF6         	movff	lcdWrite@string,tblptrl
   501  000876  C065  FFF7         	movff	lcdWrite@string+1,tblptrh
   502  00087A                     	if	0	;tblptru may be non-zero
   503  00087A                     	endif
   504  00087A                     	if	0	;tblptru may be non-zero
   505  00087A                     	endif
   506  00087A  0008               	tblrd		*
   507  00087C  50F5               	movf	tablat,w,c
   508  00087E  0900               	iorlw	0
   509  000880  B4D8               	btfsc	status,2,c
   510  000882  D003               	goto	u910
   511                           
   512                           ; BSR set to: 0
   513  000884  0E0F               	movlw	15
   514  000886  6563               	cpfsgt	lcdWrite@col& (0+255),b
   515  000888  D7DE               	goto	l108
   516  00088A                     u910:
   517                           
   518                           ; BSR set to: 0
   519                           ;display.c: 65: }
   520                           ;display.c: 66: col = 0;
   521                           
   522                           ; BSR set to: 0
   523                           
   524                           ; BSR set to: 0
   525  00088A  0E00               	movlw	0
   526  00088C  6F63               	movwf	lcdWrite@col& (0+255),b
   527                           
   528                           ;display.c: 67: row = 1;
   529  00088E  0E01               	movlw	1
   530  000890  6F62               	movwf	lcdWrite@row& (0+255),b
   531                           
   532                           ; BSR set to: 0
   533                           ;display.c: 68: }
   534                           ;display.c: 71: while (*string && col <= 0x0F) {
   535  000892  D016               	goto	l112
   536  000894                     
   537                           ; BSR set to: 0
   538                           ;display.c: 72: lcd->Memory[1][col++] = *string;
   539                           
   540                           ; BSR set to: 0
   541  000894  C064  FFF6         	movff	lcdWrite@string,tblptrl
   542  000898  C065  FFF7         	movff	lcdWrite@string+1,tblptrh
   543  00089C                     	if	0	;tblptru may be non-zero
   544  00089C                     	endif
   545  00089C                     	if	0	;tblptru may be non-zero
   546  00089C                     	endif
   547  00089C  5163               	movf	lcdWrite@col& (0+255),w,b
   548  00089E  0D01               	mullw	1
   549  0008A0  0E11               	movlw	17
   550  0008A2  26F3               	addwf	prodl,f,c
   551  0008A4  0E00               	movlw	0
   552  0008A6  22F4               	addwfc	prodh,f,c
   553  0008A8  50F3               	movf	prodl,w,c
   554  0008AA  2560               	addwf	lcdWrite@lcd& (0+255),w,b
   555  0008AC  6ED9               	movwf	fsr2l,c
   556  0008AE  50F4               	movf	prodh,w,c
   557  0008B0  2161               	addwfc	(lcdWrite@lcd+1)& (0+255),w,b
   558  0008B2  6EDA               	movwf	fsr2h,c
   559  0008B4  0008               	tblrd		*
   560  0008B6  CFF5 FFDF          	movff	tablat,indf2
   561                           
   562                           ; BSR set to: 0
   563  0008BA  2B63               	incf	lcdWrite@col& (0+255),f,b
   564                           
   565                           ; BSR set to: 0
   566                           ;display.c: 73: string++;
   567  0008BC  4B64               	infsnz	lcdWrite@string& (0+255),f,b
   568  0008BE  2B65               	incf	(lcdWrite@string+1)& (0+255),f,b
   569  0008C0                     l112:
   570                           
   571                           ; BSR set to: 0
   572                           
   573                           ; BSR set to: 0
   574  0008C0  C064  FFF6         	movff	lcdWrite@string,tblptrl
   575  0008C4  C065  FFF7         	movff	lcdWrite@string+1,tblptrh
   576  0008C8                     	if	0	;tblptru may be non-zero
   577  0008C8                     	endif
   578  0008C8                     	if	0	;tblptru may be non-zero
   579  0008C8                     	endif
   580  0008C8  0008               	tblrd		*
   581  0008CA  50F5               	movf	tablat,w,c
   582  0008CC  0900               	iorlw	0
   583  0008CE  B4D8               	btfsc	status,2,c
   584  0008D0  D003               	goto	u930
   585                           
   586                           ; BSR set to: 0
   587  0008D2  0E0F               	movlw	15
   588  0008D4  6563               	cpfsgt	lcdWrite@col& (0+255),b
   589  0008D6  D7DE               	goto	l113
   590  0008D8                     u930:
   591                           
   592                           ; BSR set to: 0
   593                           ;display.c: 74: }
   594                           ;display.c: 76: lcd->NeedsRedraw = 1;
   595                           
   596                           ; BSR set to: 0
   597                           
   598                           ; BSR set to: 0
   599  0008D8  C060  FFD9         	movff	lcdWrite@lcd,fsr2l
   600  0008DC  C061  FFDA         	movff	lcdWrite@lcd+1,fsr2h
   601  0008E0  0E01               	movlw	1
   602  0008E2  6EDF               	movwf	indf2,c
   603  0008E4  0012               	return	
   604  0008E6                     __end_of_lcdWrite:
   605                           	opt stack 0
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           prodh	equ	0xFF4
   611                           prodl	equ	0xFF3
   612                           intcon	equ	0xFF2
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           indf2	equ	0xFDF
   616                           fsr2h	equ	0xFDA
   617                           fsr2l	equ	0xFD9
   618                           status	equ	0xFD8
   619                           
   620 ;; *************** function _lcdInit *****************
   621 ;; Defined at:
   622 ;;		line 16 in file "display.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  lcd             2    7[BANK0 ] PTR struct .
   625 ;;		 -> lcd(33), 
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   637 ;;      Params:         0       2       0       0       0       0       0       0       0
   638 ;;      Locals:         0       0       0       0       0       0       0       0       0
   639 ;;      Temps:          0       0       0       0       0       0       0       0       0
   640 ;;      Totals:         0       2       0       0       0       0       0       0       0
   641 ;;Total ram usage:        2 bytes
   642 ;; Hardware stack levels used:    1
   643 ;; Hardware stack levels required when called:    6
   644 ;; This function calls:
   645 ;;		_BusyXLCD
   646 ;;		_OpenXLCD
   647 ;;		_WriteCmdXLCD
   648 ;;		_lcdCleanAll
   649 ;; This function is called by:
   650 ;;		_main
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654                           	psect	text2
   655  000B76                     __ptext2:
   656                           	opt stack 0
   657  000B76                     _lcdInit:
   658                           	opt stack 24
   659                           
   660                           ;display.c: 17: TRISD = 0;
   661                           
   662                           ; BSR set to: 0
   663                           ;incstack = 0
   664  000B76  0E00               	movlw	0
   665  000B78  6E95               	movwf	3989,c	;volatile
   666                           
   667                           ;display.c: 19: OpenXLCD(0b00101100 & 0b00111000);
   668  000B7A  0E28               	movlw	40
   669  000B7C  EC73  F004         	call	_OpenXLCD
   670  000B80  ECDC  F005         	call	_BusyXLCD	;wreg free
   671  000B84  0900               	iorlw	0
   672  000B86  A4D8               	btfss	status,2,c
   673  000B88  D7FB               	goto	l77
   674                           
   675                           ;display.c: 21: WriteCmdXLCD(0x06);
   676  000B8A  0E06               	movlw	6
   677  000B8C  EC99  F005         	call	_WriteCmdXLCD
   678  000B90  ECDC  F005         	call	_BusyXLCD	;wreg free
   679  000B94  0900               	iorlw	0
   680  000B96  A4D8               	btfss	status,2,c
   681  000B98  D7FB               	goto	l80
   682                           
   683                           ;display.c: 23: WriteCmdXLCD(0x0C);
   684  000B9A  0E0C               	movlw	12
   685  000B9C  EC99  F005         	call	_WriteCmdXLCD
   686  000BA0  ECDC  F005         	call	_BusyXLCD	;wreg free
   687  000BA4  0900               	iorlw	0
   688  000BA6  A4D8               	btfss	status,2,c
   689  000BA8  D7FB               	goto	l83
   690                           
   691                           ;display.c: 26: lcdCleanAll(lcd);
   692  000BAA  C067  F065         	movff	lcdInit@lcd,lcdCleanAll@lcd
   693  000BAE  C068  F066         	movff	lcdInit@lcd+1,lcdCleanAll@lcd+1
   694  000BB2  EC47  F006         	call	_lcdCleanAll	;wreg free
   695  000BB6  0012               	return		;funcret
   696  000BB8                     __end_of_lcdInit:
   697                           	opt stack 0
   698                           tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           prodh	equ	0xFF4
   703                           prodl	equ	0xFF3
   704                           intcon	equ	0xFF2
   705                           postinc0	equ	0xFEE
   706                           wreg	equ	0xFE8
   707                           indf2	equ	0xFDF
   708                           fsr2h	equ	0xFDA
   709                           fsr2l	equ	0xFD9
   710                           status	equ	0xFD8
   711                           
   712 ;; *************** function _lcdCleanAll *****************
   713 ;; Defined at:
   714 ;;		line 46 in file "display.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;  lcd             2    5[BANK0 ] PTR struct .
   717 ;;		 -> lcd(33), 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;		None
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   729 ;;      Params:         0       2       0       0       0       0       0       0       0
   730 ;;      Locals:         0       0       0       0       0       0       0       0       0
   731 ;;      Temps:          0       0       0       0       0       0       0       0       0
   732 ;;      Totals:         0       2       0       0       0       0       0       0       0
   733 ;;Total ram usage:        2 bytes
   734 ;; Hardware stack levels used:    1
   735 ;; Hardware stack levels required when called:    5
   736 ;; This function calls:
   737 ;;		_lcdClean
   738 ;;		_lcdMemClean
   739 ;; This function is called by:
   740 ;;		_lcdInit
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           	psect	text3
   745  000C8E                     __ptext3:
   746                           	opt stack 0
   747  000C8E                     _lcdCleanAll:
   748                           	opt stack 24
   749                           
   750                           ;display.c: 47: lcdClean();
   751                           
   752                           ;incstack = 0
   753  000C8E  EC0A  F006         	call	_lcdClean	;wreg free
   754                           
   755                           ;display.c: 48: lcdMemClean(lcd);
   756  000C92  C065  F060         	movff	lcdCleanAll@lcd,lcdMemClean@lcd
   757  000C96  C066  F061         	movff	lcdCleanAll@lcd+1,lcdMemClean@lcd+1
   758  000C9A  EC41  F005         	call	_lcdMemClean	;wreg free
   759  000C9E  0012               	return		;funcret
   760  000CA0                     __end_of_lcdCleanAll:
   761                           	opt stack 0
   762                           tblptru	equ	0xFF8
   763                           tblptrh	equ	0xFF7
   764                           tblptrl	equ	0xFF6
   765                           tablat	equ	0xFF5
   766                           prodh	equ	0xFF4
   767                           prodl	equ	0xFF3
   768                           intcon	equ	0xFF2
   769                           postinc0	equ	0xFEE
   770                           wreg	equ	0xFE8
   771                           indf2	equ	0xFDF
   772                           fsr2h	equ	0xFDA
   773                           fsr2l	equ	0xFD9
   774                           status	equ	0xFD8
   775                           
   776 ;; *************** function _lcdMemClean *****************
   777 ;; Defined at:
   778 ;;		line 38 in file "display.c"
   779 ;; Parameters:    Size  Location     Type
   780 ;;  lcd             2    0[BANK0 ] PTR struct .
   781 ;;		 -> lcd(33), 
   782 ;; Auto vars:     Size  Location     Type
   783 ;;  i               1    2[BANK0 ] unsigned char 
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   793 ;;      Params:         0       2       0       0       0       0       0       0       0
   794 ;;      Locals:         0       1       0       0       0       0       0       0       0
   795 ;;      Temps:          0       0       0       0       0       0       0       0       0
   796 ;;      Totals:         0       3       0       0       0       0       0       0       0
   797 ;;Total ram usage:        3 bytes
   798 ;; Hardware stack levels used:    1
   799 ;; Hardware stack levels required when called:    2
   800 ;; This function calls:
   801 ;;		Nothing
   802 ;; This function is called by:
   803 ;;		_lcdCleanAll
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           	psect	text4
   808  000A82                     __ptext4:
   809                           	opt stack 0
   810  000A82                     _lcdMemClean:
   811                           	opt stack 26
   812                           
   813                           ;display.c: 39: for (uint8_t i = 0; i < 16; i++) {
   814                           
   815                           ;incstack = 0
   816  000A82  0E00               	movlw	0
   817  000A84  0100               	movlb	0	; () banked
   818  000A86  6F62               	movwf	lcdMemClean@i& (0+255),b
   819  000A88                     l1555:
   820                           
   821                           ; BSR set to: 0
   822  000A88  0E0F               	movlw	15
   823  000A8A  6562               	cpfsgt	lcdMemClean@i& (0+255),b
   824  000A8C  D001               	goto	l94
   825  000A8E  D01E               	goto	u730
   826  000A90                     l94:
   827                           
   828                           ; BSR set to: 0
   829                           ;display.c: 40: lcd->Memory[0][i] = 0x20;
   830                           
   831                           ; BSR set to: 0
   832  000A90  5162               	movf	lcdMemClean@i& (0+255),w,b
   833  000A92  0D01               	mullw	1
   834  000A94  0E01               	movlw	1
   835  000A96  26F3               	addwf	prodl,f,c
   836  000A98  0E00               	movlw	0
   837  000A9A  22F4               	addwfc	prodh,f,c
   838  000A9C  50F3               	movf	prodl,w,c
   839  000A9E  2560               	addwf	lcdMemClean@lcd& (0+255),w,b
   840  000AA0  6ED9               	movwf	fsr2l,c
   841  000AA2  50F4               	movf	prodh,w,c
   842  000AA4  2161               	addwfc	(lcdMemClean@lcd+1)& (0+255),w,b
   843  000AA6  6EDA               	movwf	fsr2h,c
   844  000AA8  0E20               	movlw	32
   845  000AAA  6EDF               	movwf	indf2,c
   846                           
   847                           ;display.c: 41: lcd->Memory[1][i] = 0x20;
   848  000AAC  5162               	movf	lcdMemClean@i& (0+255),w,b
   849  000AAE  0D01               	mullw	1
   850  000AB0  0E11               	movlw	17
   851  000AB2  26F3               	addwf	prodl,f,c
   852  000AB4  0E00               	movlw	0
   853  000AB6  22F4               	addwfc	prodh,f,c
   854  000AB8  50F3               	movf	prodl,w,c
   855  000ABA  2560               	addwf	lcdMemClean@lcd& (0+255),w,b
   856  000ABC  6ED9               	movwf	fsr2l,c
   857  000ABE  50F4               	movf	prodh,w,c
   858  000AC0  2161               	addwfc	(lcdMemClean@lcd+1)& (0+255),w,b
   859  000AC2  6EDA               	movwf	fsr2h,c
   860  000AC4  0E20               	movlw	32
   861  000AC6  6EDF               	movwf	indf2,c
   862                           
   863                           ; BSR set to: 0
   864  000AC8  2B62               	incf	lcdMemClean@i& (0+255),f,b
   865  000ACA  D7DE               	goto	l1555
   866  000ACC                     u730:
   867                           
   868                           ; BSR set to: 0
   869                           ;display.c: 42: }
   870                           ;display.c: 43: lcd->NeedsRedraw = 1;
   871                           
   872                           ; BSR set to: 0
   873  000ACC  C060  FFD9         	movff	lcdMemClean@lcd,fsr2l
   874  000AD0  C061  FFDA         	movff	lcdMemClean@lcd+1,fsr2h
   875  000AD4  0E01               	movlw	1
   876  000AD6  6EDF               	movwf	indf2,c
   877                           
   878                           ; BSR set to: 0
   879  000AD8  0012               	return		;funcret
   880  000ADA                     __end_of_lcdMemClean:
   881                           	opt stack 0
   882                           tblptru	equ	0xFF8
   883                           tblptrh	equ	0xFF7
   884                           tblptrl	equ	0xFF6
   885                           tablat	equ	0xFF5
   886                           prodh	equ	0xFF4
   887                           prodl	equ	0xFF3
   888                           intcon	equ	0xFF2
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           indf2	equ	0xFDF
   892                           fsr2h	equ	0xFDA
   893                           fsr2l	equ	0xFD9
   894                           status	equ	0xFD8
   895                           
   896 ;; *************** function _lcdClean *****************
   897 ;; Defined at:
   898 ;;		line 30 in file "display.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;		None
   901 ;; Auto vars:     Size  Location     Type
   902 ;;		None
   903 ;; Return value:  Size  Location     Type
   904 ;;                  1    wreg      void 
   905 ;; Registers used:
   906 ;;		wreg, status,2, status,0, cstack
   907 ;; Tracked objects:
   908 ;;		On entry : 0/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   912 ;;      Params:         0       0       0       0       0       0       0       0       0
   913 ;;      Locals:         0       0       0       0       0       0       0       0       0
   914 ;;      Temps:          0       0       0       0       0       0       0       0       0
   915 ;;      Totals:         0       0       0       0       0       0       0       0       0
   916 ;;Total ram usage:        0 bytes
   917 ;; Hardware stack levels used:    1
   918 ;; Hardware stack levels required when called:    4
   919 ;; This function calls:
   920 ;;		_BusyXLCD
   921 ;;		_WriteCmdXLCD
   922 ;;		_delay_ms
   923 ;; This function is called by:
   924 ;;		_lcdCleanAll
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           	psect	text5
   929  000C14                     __ptext5:
   930                           	opt stack 0
   931  000C14                     _lcdClean:
   932                           	opt stack 24
   933                           
   934                           ;display.c: 31: while (BusyXLCD());
   935                           
   936                           ; BSR set to: 0
   937                           ;incstack = 0
   938  000C14  ECDC  F005         	call	_BusyXLCD	;wreg free
   939  000C18  0900               	iorlw	0
   940  000C1A  A4D8               	btfss	status,2,c
   941  000C1C  D7FB               	goto	_lcdClean
   942                           
   943                           ;display.c: 32: WriteCmdXLCD(0x01);
   944  000C1E  0E01               	movlw	1
   945  000C20  EC99  F005         	call	_WriteCmdXLCD
   946                           
   947                           ;display.c: 34: delay_ms(80);
   948  000C24  0E00               	movlw	0
   949  000C26  0100               	movlb	0	; () banked
   950  000C28  6F61               	movwf	(delay_ms@milis+1)& (0+255),b
   951  000C2A  0E50               	movlw	80
   952  000C2C  6F60               	movwf	delay_ms@milis& (0+255),b
   953  000C2E  EC29  F006         	call	_delay_ms	;wreg free
   954  000C32  0012               	return		;funcret
   955  000C34                     __end_of_lcdClean:
   956                           	opt stack 0
   957                           tblptru	equ	0xFF8
   958                           tblptrh	equ	0xFF7
   959                           tblptrl	equ	0xFF6
   960                           tablat	equ	0xFF5
   961                           prodh	equ	0xFF4
   962                           prodl	equ	0xFF3
   963                           intcon	equ	0xFF2
   964                           postinc0	equ	0xFEE
   965                           wreg	equ	0xFE8
   966                           indf2	equ	0xFDF
   967                           fsr2h	equ	0xFDA
   968                           fsr2l	equ	0xFD9
   969                           status	equ	0xFD8
   970                           
   971 ;; *************** function _OpenXLCD *****************
   972 ;; Defined at:
   973 ;;		line 63 in file "xlcd_mod.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  lcdtype         1    wreg     unsigned char 
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  lcdtype         1    6[BANK0 ] unsigned char 
   978 ;; Return value:  Size  Location     Type
   979 ;;                  1    wreg      void 
   980 ;; Registers used:
   981 ;;		wreg, status,2, status,0, cstack
   982 ;; Tracked objects:
   983 ;;		On entry : 0/0
   984 ;;		On exit  : 0/0
   985 ;;		Unchanged: 0/0
   986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   987 ;;      Params:         0       0       0       0       0       0       0       0       0
   988 ;;      Locals:         0       1       0       0       0       0       0       0       0
   989 ;;      Temps:          0       0       0       0       0       0       0       0       0
   990 ;;      Totals:         0       1       0       0       0       0       0       0       0
   991 ;;Total ram usage:        1 bytes
   992 ;; Hardware stack levels used:    1
   993 ;; Hardware stack levels required when called:    4
   994 ;; This function calls:
   995 ;;		_BusyXLCD
   996 ;;		_Delay10KTCYx
   997 ;;		_DelayPORXLCD
   998 ;;		_SetDDRamAddr
   999 ;;		_WriteCmdXLCD
  1000 ;; This function is called by:
  1001 ;;		_lcdInit
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           	psect	text6
  1006  0008E6                     __ptext6:
  1007                           	opt stack 0
  1008  0008E6                     _OpenXLCD:
  1009                           	opt stack 25
  1010                           
  1011                           ;incstack = 0
  1012                           ;OpenXLCD@lcdtype stored from wreg
  1013  0008E6  0100               	movlb	0	; () banked
  1014  0008E8  6F66               	movwf	OpenXLCD@lcdtype& (0+255),b
  1015                           
  1016                           ;xlcd_mod.c: 75: PORTD &= 0xf0;
  1017  0008EA  0EF0               	movlw	240
  1018  0008EC  1683               	andwf	3971,f,c	;volatile
  1019                           
  1020                           ;xlcd_mod.c: 76: TRISD &= 0xF0;
  1021  0008EE  0EF0               	movlw	240
  1022  0008F0  1695               	andwf	3989,f,c	;volatile
  1023                           
  1024                           ;xlcd_mod.c: 79: TRISDbits.TRISD5 = 0;
  1025  0008F2  9A95               	bcf	3989,5,c	;volatile
  1026                           
  1027                           ;xlcd_mod.c: 80: TRISDbits.TRISD6 = 0;
  1028  0008F4  9C95               	bcf	3989,6,c	;volatile
  1029                           
  1030                           ;xlcd_mod.c: 81: TRISDbits.TRISD4 = 0;
  1031  0008F6  9895               	bcf	3989,4,c	;volatile
  1032                           
  1033                           ;xlcd_mod.c: 82: LATDbits.LATD5 = 0;
  1034  0008F8  9A8C               	bcf	3980,5,c	;volatile
  1035                           
  1036                           ;xlcd_mod.c: 83: LATDbits.LATD6 = 0;
  1037  0008FA  9C8C               	bcf	3980,6,c	;volatile
  1038                           
  1039                           ;xlcd_mod.c: 84: LATDbits.LATD4 = 0;
  1040  0008FC  988C               	bcf	3980,4,c	;volatile
  1041                           
  1042                           ;xlcd_mod.c: 87: DelayPORXLCD();
  1043  0008FE  EC50  F006         	call	_DelayPORXLCD	;wreg free
  1044                           
  1045                           ;xlcd_mod.c: 89: WriteCmdXLCD(0x30);
  1046  000902  0E30               	movlw	48
  1047  000904  EC99  F005         	call	_WriteCmdXLCD
  1048                           
  1049                           ;xlcd_mod.c: 90: Delay10KTCYx(0x05);
  1050  000908  0E05               	movlw	5
  1051  00090A  EC38  F006         	call	_Delay10KTCYx
  1052                           
  1053                           ;xlcd_mod.c: 92: WriteCmdXLCD(0x30);
  1054  00090E  0E30               	movlw	48
  1055  000910  EC99  F005         	call	_WriteCmdXLCD
  1056                           
  1057                           ;xlcd_mod.c: 93: Delay10KTCYx(0x01);
  1058  000914  0E01               	movlw	1
  1059  000916  EC38  F006         	call	_Delay10KTCYx
  1060                           
  1061                           ;xlcd_mod.c: 96: WriteCmdXLCD(0x32);
  1062  00091A  0E32               	movlw	50
  1063  00091C  EC99  F005         	call	_WriteCmdXLCD
  1064  000920  ECDC  F005         	call	_BusyXLCD	;wreg free
  1065  000924  0900               	iorlw	0
  1066  000926  A4D8               	btfss	status,2,c
  1067  000928  D7FB               	goto	l183
  1068  00092A                     u750:
  1069                           
  1070                           ;xlcd_mod.c: 102: while (BusyXLCD());
  1071  00092A  ECDC  F005         	call	_BusyXLCD	;wreg free
  1072  00092E  0900               	iorlw	0
  1073  000930  A4D8               	btfss	status,2,c
  1074  000932  D7FB               	goto	u750
  1075                           
  1076                           ;xlcd_mod.c: 103: WriteCmdXLCD(lcdtype);
  1077  000934  0100               	movlb	0	; () banked
  1078  000936  5166               	movf	OpenXLCD@lcdtype& (0+255),w,b
  1079  000938  EC99  F005         	call	_WriteCmdXLCD
  1080  00093C  ECDC  F005         	call	_BusyXLCD	;wreg free
  1081  000940  0900               	iorlw	0
  1082  000942  A4D8               	btfss	status,2,c
  1083  000944  D7FB               	goto	l189
  1084                           
  1085                           ;xlcd_mod.c: 107: WriteCmdXLCD(0b00001011 & 0b00001101 & 0b00001110);
  1086  000946  0E08               	movlw	8
  1087  000948  EC99  F005         	call	_WriteCmdXLCD
  1088  00094C  ECDC  F005         	call	_BusyXLCD	;wreg free
  1089  000950  0900               	iorlw	0
  1090  000952  A4D8               	btfss	status,2,c
  1091  000954  D7FB               	goto	l192
  1092                           
  1093                           ;xlcd_mod.c: 109: WriteCmdXLCD(0b00001111 & 0b00001111 & 0b00001111);
  1094  000956  0E0F               	movlw	15
  1095  000958  EC99  F005         	call	_WriteCmdXLCD
  1096  00095C  ECDC  F005         	call	_BusyXLCD	;wreg free
  1097  000960  0900               	iorlw	0
  1098  000962  A4D8               	btfss	status,2,c
  1099  000964  D7FB               	goto	l195
  1100                           
  1101                           ;xlcd_mod.c: 113: WriteCmdXLCD(0x01);
  1102  000966  0E01               	movlw	1
  1103  000968  EC99  F005         	call	_WriteCmdXLCD
  1104  00096C  ECDC  F005         	call	_BusyXLCD	;wreg free
  1105  000970  0900               	iorlw	0
  1106  000972  A4D8               	btfss	status,2,c
  1107  000974  D7FB               	goto	l198
  1108                           
  1109                           ;xlcd_mod.c: 117: WriteCmdXLCD(0b00000100);
  1110  000976  0E04               	movlw	4
  1111  000978  EC99  F005         	call	_WriteCmdXLCD
  1112  00097C  ECDC  F005         	call	_BusyXLCD	;wreg free
  1113  000980  0900               	iorlw	0
  1114  000982  A4D8               	btfss	status,2,c
  1115  000984  D7FB               	goto	l201
  1116                           
  1117                           ;xlcd_mod.c: 121: SetDDRamAddr(0x80);
  1118  000986  0E80               	movlw	128
  1119  000988  EC6D  F005         	call	_SetDDRamAddr
  1120  00098C  0012               	return	
  1121  00098E                     __end_of_OpenXLCD:
  1122                           	opt stack 0
  1123                           tblptru	equ	0xFF8
  1124                           tblptrh	equ	0xFF7
  1125                           tblptrl	equ	0xFF6
  1126                           tablat	equ	0xFF5
  1127                           prodh	equ	0xFF4
  1128                           prodl	equ	0xFF3
  1129                           intcon	equ	0xFF2
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           indf2	equ	0xFDF
  1133                           fsr2h	equ	0xFDA
  1134                           fsr2l	equ	0xFD9
  1135                           status	equ	0xFD8
  1136                           
  1137 ;; *************** function _WriteCmdXLCD *****************
  1138 ;; Defined at:
  1139 ;;		line 315 in file "xlcd_mod.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  cmd             1    wreg     unsigned char 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  cmd             1    2[BANK0 ] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      void 
  1146 ;; Registers used:
  1147 ;;		wreg, status,2, status,0, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1153 ;;      Params:         0       0       0       0       0       0       0       0       0
  1154 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1156 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1157 ;;Total ram usage:        1 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    3
  1160 ;; This function calls:
  1161 ;;		_DelayFor18TCY
  1162 ;; This function is called by:
  1163 ;;		_lcdInit
  1164 ;;		_lcdClean
  1165 ;;		_OpenXLCD
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text7
  1170  000B32                     __ptext7:
  1171                           	opt stack 0
  1172  000B32                     _WriteCmdXLCD:
  1173                           	opt stack 24
  1174                           
  1175                           ;incstack = 0
  1176                           ;WriteCmdXLCD@cmd stored from wreg
  1177  000B32  0100               	movlb	0	; () banked
  1178  000B34  6F62               	movwf	WriteCmdXLCD@cmd& (0+255),b
  1179                           
  1180                           ;xlcd_mod.c: 334: TRISD &= 0xf0;
  1181  000B36  0EF0               	movlw	240
  1182  000B38  1695               	andwf	3989,f,c	;volatile
  1183                           
  1184                           ;xlcd_mod.c: 335: PORTD &= 0xf0;
  1185  000B3A  0EF0               	movlw	240
  1186  000B3C  1683               	andwf	3971,f,c	;volatile
  1187                           
  1188                           ;xlcd_mod.c: 336: PORTD |= (cmd >> 4)&0x0f;
  1189  000B3E  0100               	movlb	0	; () banked
  1190  000B40  3962               	swapf	WriteCmdXLCD@cmd& (0+255),w,b
  1191  000B42  0B0F               	andlw	15
  1192  000B44  0B0F               	andlw	15
  1193  000B46  1283               	iorwf	3971,f,c	;volatile
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;xlcd_mod.c: 338: LATDbits.LATD5 = 0;
  1197  000B48  9A8C               	bcf	3980,5,c	;volatile
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;xlcd_mod.c: 339: LATDbits.LATD6 = 0;
  1201  000B4A  9C8C               	bcf	3980,6,c	;volatile
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;xlcd_mod.c: 340: DelayFor18TCY();
  1205  000B4C  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1206                           
  1207                           ;xlcd_mod.c: 341: LATDbits.LATD4 = 1;
  1208  000B50  888C               	bsf	3980,4,c	;volatile
  1209                           
  1210                           ;xlcd_mod.c: 342: DelayFor18TCY();
  1211  000B52  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1212                           
  1213                           ;xlcd_mod.c: 343: LATDbits.LATD4 = 0;
  1214  000B56  988C               	bcf	3980,4,c	;volatile
  1215                           
  1216                           ;xlcd_mod.c: 348: PORTD &= 0xf0;
  1217  000B58  0EF0               	movlw	240
  1218  000B5A  1683               	andwf	3971,f,c	;volatile
  1219                           
  1220                           ;xlcd_mod.c: 349: PORTD |= cmd & 0x0f;
  1221  000B5C  0100               	movlb	0	; () banked
  1222  000B5E  5162               	movf	WriteCmdXLCD@cmd& (0+255),w,b
  1223  000B60  0B0F               	andlw	15
  1224  000B62  1283               	iorwf	3971,f,c	;volatile
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;xlcd_mod.c: 351: DelayFor18TCY();
  1228  000B64  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1229                           
  1230                           ;xlcd_mod.c: 352: LATDbits.LATD4 = 1;
  1231  000B68  888C               	bsf	3980,4,c	;volatile
  1232                           
  1233                           ;xlcd_mod.c: 353: DelayFor18TCY();
  1234  000B6A  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1235                           
  1236                           ;xlcd_mod.c: 354: LATDbits.LATD4 = 0;
  1237  000B6E  988C               	bcf	3980,4,c	;volatile
  1238                           
  1239                           ;xlcd_mod.c: 358: TRISD |= 0x0f;
  1240  000B70  0E0F               	movlw	15
  1241  000B72  1295               	iorwf	3989,f,c	;volatile
  1242  000B74  0012               	return	
  1243  000B76                     __end_of_WriteCmdXLCD:
  1244                           	opt stack 0
  1245                           tblptru	equ	0xFF8
  1246                           tblptrh	equ	0xFF7
  1247                           tblptrl	equ	0xFF6
  1248                           tablat	equ	0xFF5
  1249                           prodh	equ	0xFF4
  1250                           prodl	equ	0xFF3
  1251                           intcon	equ	0xFF2
  1252                           postinc0	equ	0xFEE
  1253                           wreg	equ	0xFE8
  1254                           indf2	equ	0xFDF
  1255                           fsr2h	equ	0xFDA
  1256                           fsr2l	equ	0xFD9
  1257                           status	equ	0xFD8
  1258                           
  1259 ;; *************** function _SetDDRamAddr *****************
  1260 ;; Defined at:
  1261 ;;		line 266 in file "xlcd_mod.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;  DDaddr          1    wreg     unsigned char 
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;  DDaddr          1    5[BANK0 ] unsigned char 
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  1    wreg      void 
  1268 ;; Registers used:
  1269 ;;		wreg, status,2, status,0, cstack
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1275 ;;      Params:         0       0       0       0       0       0       0       0       0
  1276 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1277 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1278 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1279 ;;Total ram usage:        4 bytes
  1280 ;; Hardware stack levels used:    1
  1281 ;; Hardware stack levels required when called:    3
  1282 ;; This function calls:
  1283 ;;		_DelayFor18TCY
  1284 ;; This function is called by:
  1285 ;;		_OpenXLCD
  1286 ;;		_lcdRuntime
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           	psect	text8
  1291  000ADA                     __ptext8:
  1292                           	opt stack 0
  1293  000ADA                     _SetDDRamAddr:
  1294                           	opt stack 25
  1295                           
  1296                           ;incstack = 0
  1297                           ;SetDDRamAddr@DDaddr stored from wreg
  1298  000ADA  0100               	movlb	0	; () banked
  1299  000ADC  6F65               	movwf	SetDDRamAddr@DDaddr& (0+255),b
  1300                           
  1301                           ;xlcd_mod.c: 285: TRISD &= 0xf0;
  1302  000ADE  0EF0               	movlw	240
  1303  000AE0  1695               	andwf	3989,f,c	;volatile
  1304                           
  1305                           ;xlcd_mod.c: 286: PORTD &= 0xf0;
  1306  000AE2  0EF0               	movlw	240
  1307  000AE4  1683               	andwf	3971,f,c	;volatile
  1308                           
  1309                           ;xlcd_mod.c: 287: PORTD |= (((DDaddr | 0b10000000) >> 4) & 0x0f);
  1310  000AE6  0100               	movlb	0	; () banked
  1311  000AE8  5165               	movf	SetDDRamAddr@DDaddr& (0+255),w,b
  1312  000AEA  6F62               	movwf	??_SetDDRamAddr& (0+255),b
  1313  000AEC  6B63               	clrf	(??_SetDDRamAddr+1)& (0+255),b
  1314  000AEE  8F62               	bsf	??_SetDDRamAddr& (0+255),7,b
  1315  000AF0  0E04               	movlw	4
  1316  000AF2  6F64               	movwf	(??_SetDDRamAddr+2)& (0+255),b
  1317  000AF4                     u745:
  1318  000AF4  3563               	rlcf	(??_SetDDRamAddr+1)& (0+255),w,b
  1319  000AF6  3363               	rrcf	(??_SetDDRamAddr+1)& (0+255),f,b
  1320  000AF8  3362               	rrcf	??_SetDDRamAddr& (0+255),f,b
  1321  000AFA  2F64               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,b
  1322  000AFC  D7FB               	goto	u745
  1323  000AFE  5162               	movf	??_SetDDRamAddr& (0+255),w,b
  1324  000B00  0B0F               	andlw	15
  1325  000B02  1283               	iorwf	3971,f,c	;volatile
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;xlcd_mod.c: 289: LATDbits.LATD5 = 0;
  1329  000B04  9A8C               	bcf	3980,5,c	;volatile
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;xlcd_mod.c: 290: LATDbits.LATD6 = 0;
  1333  000B06  9C8C               	bcf	3980,6,c	;volatile
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;xlcd_mod.c: 291: DelayFor18TCY();
  1337  000B08  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1338                           
  1339                           ;xlcd_mod.c: 292: LATDbits.LATD4 = 1;
  1340  000B0C  888C               	bsf	3980,4,c	;volatile
  1341                           
  1342                           ;xlcd_mod.c: 293: DelayFor18TCY();
  1343  000B0E  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1344                           
  1345                           ;xlcd_mod.c: 294: LATDbits.LATD4 = 0;
  1346  000B12  988C               	bcf	3980,4,c	;volatile
  1347                           
  1348                           ;xlcd_mod.c: 299: PORTD &= 0xf0;
  1349  000B14  0EF0               	movlw	240
  1350  000B16  1683               	andwf	3971,f,c	;volatile
  1351                           
  1352                           ;xlcd_mod.c: 300: PORTD |= (DDaddr & 0x0f);
  1353  000B18  0100               	movlb	0	; () banked
  1354  000B1A  5165               	movf	SetDDRamAddr@DDaddr& (0+255),w,b
  1355  000B1C  0B0F               	andlw	15
  1356  000B1E  1283               	iorwf	3971,f,c	;volatile
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;xlcd_mod.c: 302: DelayFor18TCY();
  1360  000B20  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1361                           
  1362                           ;xlcd_mod.c: 303: LATDbits.LATD4 = 1;
  1363  000B24  888C               	bsf	3980,4,c	;volatile
  1364                           
  1365                           ;xlcd_mod.c: 304: DelayFor18TCY();
  1366  000B26  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1367                           
  1368                           ;xlcd_mod.c: 305: LATDbits.LATD4 = 0;
  1369  000B2A  988C               	bcf	3980,4,c	;volatile
  1370                           
  1371                           ;xlcd_mod.c: 309: TRISD |= 0x0f;
  1372  000B2C  0E0F               	movlw	15
  1373  000B2E  1295               	iorwf	3989,f,c	;volatile
  1374  000B30  0012               	return	
  1375  000B32                     __end_of_SetDDRamAddr:
  1376                           	opt stack 0
  1377                           tblptru	equ	0xFF8
  1378                           tblptrh	equ	0xFF7
  1379                           tblptrl	equ	0xFF6
  1380                           tablat	equ	0xFF5
  1381                           prodh	equ	0xFF4
  1382                           prodl	equ	0xFF3
  1383                           intcon	equ	0xFF2
  1384                           postinc0	equ	0xFEE
  1385                           wreg	equ	0xFE8
  1386                           indf2	equ	0xFDF
  1387                           fsr2h	equ	0xFDA
  1388                           fsr2l	equ	0xFD9
  1389                           status	equ	0xFD8
  1390                           
  1391 ;; *************** function _DelayPORXLCD *****************
  1392 ;; Defined at:
  1393 ;;		line 108 in file "display.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;		None
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;		None
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, status,2, status,0, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : 0/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1407 ;;      Params:         0       0       0       0       0       0       0       0       0
  1408 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1409 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1410 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1411 ;;Total ram usage:        0 bytes
  1412 ;; Hardware stack levels used:    1
  1413 ;; Hardware stack levels required when called:    3
  1414 ;; This function calls:
  1415 ;;		_delay_ms
  1416 ;; This function is called by:
  1417 ;;		_OpenXLCD
  1418 ;; This function uses a non-reentrant model
  1419 ;;
  1420                           
  1421                           	psect	text9
  1422  000CA0                     __ptext9:
  1423                           	opt stack 0
  1424  000CA0                     _DelayPORXLCD:
  1425                           	opt stack 25
  1426                           
  1427                           ;display.c: 109: delay_ms(60);
  1428                           
  1429                           ;incstack = 0
  1430  000CA0  0E00               	movlw	0
  1431  000CA2  0100               	movlb	0	; () banked
  1432  000CA4  6F61               	movwf	(delay_ms@milis+1)& (0+255),b
  1433  000CA6  0E3C               	movlw	60
  1434  000CA8  6F60               	movwf	delay_ms@milis& (0+255),b
  1435  000CAA  EC29  F006         	call	_delay_ms	;wreg free
  1436  000CAE  0012               	return		;funcret
  1437  000CB0                     __end_of_DelayPORXLCD:
  1438                           	opt stack 0
  1439                           tblptru	equ	0xFF8
  1440                           tblptrh	equ	0xFF7
  1441                           tblptrl	equ	0xFF6
  1442                           tablat	equ	0xFF5
  1443                           prodh	equ	0xFF4
  1444                           prodl	equ	0xFF3
  1445                           intcon	equ	0xFF2
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           indf2	equ	0xFDF
  1449                           fsr2h	equ	0xFDA
  1450                           fsr2l	equ	0xFD9
  1451                           status	equ	0xFD8
  1452                           
  1453 ;; *************** function _delay_ms *****************
  1454 ;; Defined at:
  1455 ;;		line 72 in file "main.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;  milis           2    0[BANK0 ] unsigned int 
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  t               1    4[BANK0 ] unsigned char 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  1    wreg      void 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2, status,0
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1469 ;;      Params:         0       2       0       0       0       0       0       0       0
  1470 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1471 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1472 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1473 ;;Total ram usage:        5 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    2
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_lcdClean
  1480 ;;		_DelayPORXLCD
  1481 ;;		_DelayXLCD
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text10
  1486  000C52                     __ptext10:
  1487                           	opt stack 0
  1488  000C52                     _delay_ms:
  1489                           	opt stack 25
  1490                           
  1491                           ;main.c: 74: uint8_t t;
  1492                           ;main.c: 75: for (t = 0; t < milis; t++) {
  1493                           
  1494                           ;incstack = 0
  1495  000C52  0E00               	movlw	0
  1496  000C54  0100               	movlb	0	; () banked
  1497  000C56  6F64               	movwf	delay_ms@t& (0+255),b
  1498  000C58  D001               	goto	l54
  1499  000C5A                     
  1500                           ; BSR set to: 0
  1501                           ;main.c: 76: ;
  1502                           
  1503                           ; BSR set to: 0
  1504  000C5A  2B64               	incf	delay_ms@t& (0+255),f,b
  1505  000C5C                     l54:
  1506                           
  1507                           ; BSR set to: 0
  1508                           
  1509                           ; BSR set to: 0
  1510  000C5C  5164               	movf	delay_ms@t& (0+255),w,b
  1511  000C5E  6F62               	movwf	??_delay_ms& (0+255),b
  1512  000C60  6B63               	clrf	(??_delay_ms+1)& (0+255),b
  1513  000C62  5160               	movf	delay_ms@milis& (0+255),w,b
  1514  000C64  5D62               	subwf	??_delay_ms& (0+255),w,b
  1515  000C66  5161               	movf	(delay_ms@milis+1)& (0+255),w,b
  1516  000C68  5963               	subwfb	(??_delay_ms+1)& (0+255),w,b
  1517  000C6A  B0D8               	btfsc	status,0,c
  1518  000C6C  0012               	return	
  1519  000C6E  D7F5               	goto	l55
  1520  000C70                     __end_of_delay_ms:
  1521                           	opt stack 0
  1522                           tblptru	equ	0xFF8
  1523                           tblptrh	equ	0xFF7
  1524                           tblptrl	equ	0xFF6
  1525                           tablat	equ	0xFF5
  1526                           prodh	equ	0xFF4
  1527                           prodl	equ	0xFF3
  1528                           intcon	equ	0xFF2
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           indf2	equ	0xFDF
  1532                           fsr2h	equ	0xFDA
  1533                           fsr2l	equ	0xFD9
  1534                           status	equ	0xFD8
  1535                           
  1536 ;; *************** function _Delay10KTCYx *****************
  1537 ;; Defined at:
  1538 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\d10ktcyx.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;  unit            1    wreg     unsigned char 
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;  unit            1    1[BANK0 ] unsigned char 
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      void 
  1545 ;; Registers used:
  1546 ;;		wreg
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1552 ;;      Params:         0       0       0       0       0       0       0       0       0
  1553 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1554 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1555 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1556 ;;Total ram usage:        2 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    2
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		_OpenXLCD
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text11
  1567  000C70                     __ptext11:
  1568                           	opt stack 0
  1569  000C70                     _Delay10KTCYx:
  1570                           	opt stack 26
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;incstack = 0
  1574                           ;Delay10KTCYx@unit stored from wreg
  1575  000C70  0100               	movlb	0	; () banked
  1576  000C72  6F61               	movwf	Delay10KTCYx@unit& (0+255),b
  1577  000C74                     l432:
  1578  000C74  0E0D               	movlw	13
  1579  000C76  0100               	movlb	0	; () banked
  1580  000C78  6F60               	movwf	??_Delay10KTCYx& (0+255),b
  1581  000C7A  0EFB               	movlw	251
  1582  000C7C                     u1077:
  1583  000C7C  2EE8               	decfsz	wreg,f,c
  1584  000C7E  D7FE               	bra	u1077
  1585  000C80  2F60               	decfsz	??_Delay10KTCYx& (0+255),f,b
  1586  000C82  D7FC               	bra	u1077
  1587  000C84  D000               	nop2	
  1588  000C86  0100               	movlb	0	; () banked
  1589  000C88  2F61               	decfsz	Delay10KTCYx@unit& (0+255),f,b
  1590  000C8A  D7F4               	goto	l432
  1591  000C8C  0012               	return	
  1592  000C8E                     __end_of_Delay10KTCYx:
  1593                           	opt stack 0
  1594                           tblptru	equ	0xFF8
  1595                           tblptrh	equ	0xFF7
  1596                           tblptrl	equ	0xFF6
  1597                           tablat	equ	0xFF5
  1598                           prodh	equ	0xFF4
  1599                           prodl	equ	0xFF3
  1600                           intcon	equ	0xFF2
  1601                           postinc0	equ	0xFEE
  1602                           wreg	equ	0xFE8
  1603                           indf2	equ	0xFDF
  1604                           fsr2h	equ	0xFDA
  1605                           fsr2l	equ	0xFD9
  1606                           status	equ	0xFD8
  1607                           
  1608 ;; *************** function _BusyXLCD *****************
  1609 ;; Defined at:
  1610 ;;		line 6 in file "xlcd_mod.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      unsigned char 
  1617 ;; Registers used:
  1618 ;;		wreg, status,2, status,0, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1624 ;;      Params:         0       0       0       0       0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    3
  1631 ;; This function calls:
  1632 ;;		_DelayFor18TCY
  1633 ;; This function is called by:
  1634 ;;		_lcdInit
  1635 ;;		_lcdClean
  1636 ;;		_OpenXLCD
  1637 ;;		_lcdRuntime
  1638 ;;		_putrsXLCD
  1639 ;;		_putsXLCD
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text12
  1644  000BB8                     __ptext12:
  1645                           	opt stack 0
  1646  000BB8                     _BusyXLCD:
  1647                           	opt stack 24
  1648                           
  1649                           ;xlcd_mod.c: 8: LATDbits.LATD5 = 1;
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;incstack = 0
  1653  000BB8  8A8C               	bsf	3980,5,c	;volatile
  1654                           
  1655                           ;xlcd_mod.c: 9: LATDbits.LATD6 = 0;
  1656  000BBA  9C8C               	bcf	3980,6,c	;volatile
  1657                           
  1658                           ;xlcd_mod.c: 10: DelayFor18TCY();
  1659  000BBC  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1660                           
  1661                           ;xlcd_mod.c: 11: LATDbits.LATD4 = 1;
  1662  000BC0  888C               	bsf	3980,4,c	;volatile
  1663                           
  1664                           ;xlcd_mod.c: 12: DelayFor18TCY();
  1665  000BC2  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1666                           
  1667                           ;xlcd_mod.c: 29: if (PORTD & 0x08)
  1668  000BC6  A683               	btfss	3971,3,c	;volatile
  1669  000BC8  D00A               	goto	l168
  1670                           
  1671                           ;xlcd_mod.c: 31: {
  1672                           ;xlcd_mod.c: 32: LATDbits.LATD4 = 0;
  1673  000BCA  988C               	bcf	3980,4,c	;volatile
  1674                           
  1675                           ;xlcd_mod.c: 33: DelayFor18TCY();
  1676  000BCC  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1677                           
  1678                           ;xlcd_mod.c: 34: LATDbits.LATD4 = 1;
  1679  000BD0  888C               	bsf	3980,4,c	;volatile
  1680                           
  1681                           ;xlcd_mod.c: 35: DelayFor18TCY();
  1682  000BD2  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1683                           
  1684                           ;xlcd_mod.c: 36: LATDbits.LATD4 = 0;
  1685  000BD6  988C               	bcf	3980,4,c	;volatile
  1686                           
  1687                           ;xlcd_mod.c: 37: LATDbits.LATD5 = 0;
  1688  000BD8  9A8C               	bcf	3980,5,c	;volatile
  1689                           
  1690                           ;xlcd_mod.c: 38: return 1;
  1691  000BDA  0E01               	movlw	1
  1692                           
  1693                           ;xlcd_mod.c: 39: } else
  1694  000BDC  0012               	return	
  1695  000BDE                     l168:
  1696                           
  1697                           ;xlcd_mod.c: 40: {
  1698                           ;xlcd_mod.c: 41: LATDbits.LATD4 = 0;
  1699  000BDE  988C               	bcf	3980,4,c	;volatile
  1700                           
  1701                           ;xlcd_mod.c: 42: DelayFor18TCY();
  1702  000BE0  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1703                           
  1704                           ;xlcd_mod.c: 43: LATDbits.LATD4 = 1;
  1705  000BE4  888C               	bsf	3980,4,c	;volatile
  1706                           
  1707                           ;xlcd_mod.c: 44: DelayFor18TCY();
  1708  000BE6  ECF9  F005         	call	_DelayFor18TCY	;wreg free
  1709                           
  1710                           ;xlcd_mod.c: 45: LATDbits.LATD4 = 0;
  1711  000BEA  988C               	bcf	3980,4,c	;volatile
  1712                           
  1713                           ;xlcd_mod.c: 46: LATDbits.LATD5 = 0;
  1714  000BEC  9A8C               	bcf	3980,5,c	;volatile
  1715                           
  1716                           ;xlcd_mod.c: 47: return 0;
  1717  000BEE  0E00               	movlw	0
  1718  000BF0  0012               	return	
  1719  000BF2                     __end_of_BusyXLCD:
  1720                           	opt stack 0
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           prodh	equ	0xFF4
  1726                           prodl	equ	0xFF3
  1727                           intcon	equ	0xFF2
  1728                           postinc0	equ	0xFEE
  1729                           wreg	equ	0xFE8
  1730                           indf2	equ	0xFDF
  1731                           fsr2h	equ	0xFDA
  1732                           fsr2l	equ	0xFD9
  1733                           status	equ	0xFD8
  1734                           
  1735 ;; *************** function _DelayFor18TCY *****************
  1736 ;; Defined at:
  1737 ;;		line 102 in file "display.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;		None
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  i               2    0[BANK0 ] int 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2, status,0
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1751 ;;      Params:         0       0       0       0       0       0       0       0       0
  1752 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1753 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1754 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1755 ;;Total ram usage:        2 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    2
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_BusyXLCD
  1762 ;;		_SetDDRamAddr
  1763 ;;		_WriteCmdXLCD
  1764 ;;		_ReadAddrXLCD
  1765 ;;		_ReadDataXLCD
  1766 ;;		_SetCGRamAddr
  1767 ;;		_WriteDataXLCD
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text13
  1772  000BF2                     __ptext13:
  1773                           	opt stack 0
  1774  000BF2                     _DelayFor18TCY:
  1775                           	opt stack 24
  1776                           
  1777                           ;display.c: 103: for (int i = 0; i < 18; i++) {
  1778                           
  1779                           ;incstack = 0
  1780  000BF2  0E00               	movlw	0
  1781  000BF4  0100               	movlb	0	; () banked
  1782  000BF6  6F61               	movwf	(DelayFor18TCY@i+1)& (0+255),b
  1783  000BF8  0E00               	movlw	0
  1784  000BFA  6F60               	movwf	DelayFor18TCY@i& (0+255),b
  1785  000BFC                     l1473:
  1786                           
  1787                           ; BSR set to: 0
  1788  000BFC  BF61               	btfsc	(DelayFor18TCY@i+1)& (0+255),7,b
  1789  000BFE  D006               	goto	l136
  1790  000C00  5161               	movf	(DelayFor18TCY@i+1)& (0+255),w,b
  1791  000C02  E107               	bnz	l139
  1792  000C04  0E12               	movlw	18
  1793  000C06  5D60               	subwf	DelayFor18TCY@i& (0+255),w,b
  1794  000C08  B0D8               	btfsc	status,0,c
  1795  000C0A  0012               	return	
  1796  000C0C                     l136:
  1797                           
  1798                           ; BSR set to: 0
  1799                           
  1800                           ; BSR set to: 0
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;display.c: 104: continue;
  1804  000C0C  4B60               	infsnz	DelayFor18TCY@i& (0+255),f,b
  1805  000C0E  2B61               	incf	(DelayFor18TCY@i+1)& (0+255),f,b
  1806  000C10  D7F5               	goto	l1473
  1807  000C12                     l139:
  1808                           
  1809                           ; BSR set to: 0
  1810  000C12  0012               	return		;funcret
  1811  000C14                     __end_of_DelayFor18TCY:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           prodh	equ	0xFF4
  1818                           prodl	equ	0xFF3
  1819                           intcon	equ	0xFF2
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           indf2	equ	0xFDF
  1823                           fsr2h	equ	0xFDA
  1824                           fsr2l	equ	0xFD9
  1825                           status	equ	0xFD8
  1826                           
  1827 ;; *************** function _ISR_LP *****************
  1828 ;; Defined at:
  1829 ;;		line 16 in file "main.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      void 
  1836 ;; Registers used:
  1837 ;;		wreg, status,2, status,0
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1843 ;;      Params:         0       0       0       0       0       0       0       0       0
  1844 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1845 ;;      Temps:         22       0       0       0       0       0       0       0       0
  1846 ;;      Totals:        22       0       0       0       0       0       0       0       0
  1847 ;;Total ram usage:       22 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:    1
  1850 ;; This function calls:
  1851 ;;		Nothing
  1852 ;; This function is called by:
  1853 ;;		Interrupt level 1
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857                           	psect	intcodelo
  1858  000018                     __pintcodelo:
  1859                           	opt stack 0
  1860  000018                     _ISR_LP:
  1861                           	opt stack 24
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;incstack = 0
  1865  000018  804A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1866  00001A  CFD8 F014          	movff	status,??_ISR_LP+1
  1867  00001E  CFE8 F015          	movff	wreg,??_ISR_LP+2
  1868  000022  CFE0 F016          	movff	bsr,??_ISR_LP+3
  1869  000026  CFFA F017          	movff	pclath,??_ISR_LP+4
  1870  00002A  CFFB F018          	movff	pclatu,??_ISR_LP+5
  1871  00002E  CFE9 F019          	movff	fsr0l,??_ISR_LP+6
  1872  000032  CFEA F01A          	movff	fsr0h,??_ISR_LP+7
  1873  000036  CFE1 F01B          	movff	fsr1l,??_ISR_LP+8
  1874  00003A  CFE2 F01C          	movff	fsr1h,??_ISR_LP+9
  1875  00003E  CFD9 F01D          	movff	fsr2l,??_ISR_LP+10
  1876  000042  CFDA F01E          	movff	fsr2h,??_ISR_LP+11
  1877  000046  CFF3 F01F          	movff	prodl,??_ISR_LP+12
  1878  00004A  CFF4 F020          	movff	prodh,??_ISR_LP+13
  1879  00004E  CFF6 F021          	movff	tblptrl,??_ISR_LP+14
  1880  000052  CFF7 F022          	movff	tblptrh,??_ISR_LP+15
  1881  000056  CFF8 F023          	movff	tblptru,??_ISR_LP+16
  1882  00005A  CFF5 F024          	movff	tablat,??_ISR_LP+17
  1883  00005E  C04A  F025         	movff	btemp,??_ISR_LP+18
  1884  000062  C04B  F026         	movff	btemp+1,??_ISR_LP+19
  1885  000066  C04C  F027         	movff	btemp+2,??_ISR_LP+20
  1886  00006A  C04D  F028         	movff	btemp+3,??_ISR_LP+21
  1887                           
  1888                           ;main.c: 18: if (TMR1IF) {
  1889  00006E  A09E               	btfss	3998,0,c	;volatile
  1890  000070  D012               	goto	i1l42
  1891                           
  1892                           ;main.c: 19: TMR1IF = 0;
  1893  000072  909E               	bcf	3998,0,c	;volatile
  1894                           
  1895                           ;main.c: 20: TMR1H = 0x63;
  1896  000074  0E63               	movlw	99
  1897  000076  6ECF               	movwf	4047,c	;volatile
  1898                           
  1899                           ;main.c: 21: TMR1L = 0xC0;
  1900  000078  0EC0               	movlw	192
  1901  00007A  6ECE               	movwf	4046,c	;volatile
  1902                           
  1903                           ;main.c: 24: PORTCbits.RC0 = !PORTCbits.RC0;
  1904  00007C  B082               	btfsc	3970,0,c	;volatile
  1905  00007E  D003               	goto	i1u29_20
  1906  000080  6A13               	clrf	??_ISR_LP& (0+255),c
  1907  000082  2A13               	incf	??_ISR_LP& (0+255),f,c
  1908  000084  D001               	goto	i1u30_28
  1909  000086                     i1u29_20:
  1910  000086  6A13               	clrf	??_ISR_LP& (0+255),c
  1911  000088                     i1u30_28:
  1912  000088  5082               	movf	3970,w,c	;volatile
  1913  00008A  1813               	xorwf	??_ISR_LP,w,c
  1914  00008C  0BFE               	andlw	-2
  1915  00008E  1813               	xorwf	??_ISR_LP,w,c
  1916  000090  6E82               	movwf	3970,c	;volatile
  1917                           
  1918                           ;main.c: 25: lcd.NeedsRedraw = 1;
  1919  000092  0E01               	movlw	1
  1920  000094  6E29               	movwf	_lcd,c	;volatile
  1921  000096                     i1l42:
  1922  000096  C028  F04D         	movff	??_ISR_LP+21,btemp+3
  1923  00009A  C027  F04C         	movff	??_ISR_LP+20,btemp+2
  1924  00009E  C026  F04B         	movff	??_ISR_LP+19,btemp+1
  1925  0000A2  C025  F04A         	movff	??_ISR_LP+18,btemp
  1926  0000A6  C024  FFF5         	movff	??_ISR_LP+17,tablat
  1927  0000AA  C023  FFF8         	movff	??_ISR_LP+16,tblptru
  1928  0000AE  C022  FFF7         	movff	??_ISR_LP+15,tblptrh
  1929  0000B2  C021  FFF6         	movff	??_ISR_LP+14,tblptrl
  1930  0000B6  C020  FFF4         	movff	??_ISR_LP+13,prodh
  1931  0000BA  C01F  FFF3         	movff	??_ISR_LP+12,prodl
  1932  0000BE  C01E  FFDA         	movff	??_ISR_LP+11,fsr2h
  1933  0000C2  C01D  FFD9         	movff	??_ISR_LP+10,fsr2l
  1934  0000C6  C01C  FFE2         	movff	??_ISR_LP+9,fsr1h
  1935  0000CA  C01B  FFE1         	movff	??_ISR_LP+8,fsr1l
  1936  0000CE  C01A  FFEA         	movff	??_ISR_LP+7,fsr0h
  1937  0000D2  C019  FFE9         	movff	??_ISR_LP+6,fsr0l
  1938  0000D6  C018  FFFB         	movff	??_ISR_LP+5,pclatu
  1939  0000DA  C017  FFFA         	movff	??_ISR_LP+4,pclath
  1940  0000DE  C016  FFE0         	movff	??_ISR_LP+3,bsr
  1941  0000E2  C015  FFE8         	movff	??_ISR_LP+2,wreg
  1942  0000E6  C014  FFD8         	movff	??_ISR_LP+1,status
  1943  0000EA  904A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1944  0000EC  0010               	retfie	
  1945  0000EE                     __end_of_ISR_LP:
  1946                           	opt stack 0
  1947                           pclatu	equ	0xFFB
  1948                           pclath	equ	0xFFA
  1949                           tblptru	equ	0xFF8
  1950                           tblptrh	equ	0xFF7
  1951                           tblptrl	equ	0xFF6
  1952                           tablat	equ	0xFF5
  1953                           prodh	equ	0xFF4
  1954                           prodl	equ	0xFF3
  1955                           intcon	equ	0xFF2
  1956                           postinc0	equ	0xFEE
  1957                           fsr0h	equ	0xFEA
  1958                           fsr0l	equ	0xFE9
  1959                           wreg	equ	0xFE8
  1960                           fsr1h	equ	0xFE2
  1961                           fsr1l	equ	0xFE1
  1962                           bsr	equ	0xFE0
  1963                           indf2	equ	0xFDF
  1964                           fsr2h	equ	0xFDA
  1965                           fsr2l	equ	0xFD9
  1966                           status	equ	0xFD8
  1967                           
  1968 ;; *************** function _ISR *****************
  1969 ;; Defined at:
  1970 ;;		line 11 in file "main.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;		None
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;		None
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		None
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1984 ;;      Params:         0       0       0       0       0       0       0       0       0
  1985 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1986 ;;      Temps:         18       0       0       0       0       0       0       0       0
  1987 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1988 ;;Total ram usage:       18 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; This function calls:
  1991 ;;		Nothing
  1992 ;; This function is called by:
  1993 ;;		Interrupt level 2
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	intcode
  1998  000008                     __pintcode:
  1999                           	opt stack 0
  2000  000008                     _ISR:
  2001                           	opt stack 24
  2002                           
  2003                           ;incstack = 0
  2004  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2005  00000A  EDC7  F004         	call	int_func,f	;refresh shadow registers
  2006                           pclatu	equ	0xFFB
  2007                           pclath	equ	0xFFA
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           prodh	equ	0xFF4
  2013                           prodl	equ	0xFF3
  2014                           intcon	equ	0xFF2
  2015                           postinc0	equ	0xFEE
  2016                           fsr0h	equ	0xFEA
  2017                           fsr0l	equ	0xFE9
  2018                           wreg	equ	0xFE8
  2019                           fsr1h	equ	0xFE2
  2020                           fsr1l	equ	0xFE1
  2021                           bsr	equ	0xFE0
  2022                           indf2	equ	0xFDF
  2023                           fsr2h	equ	0xFDA
  2024                           fsr2l	equ	0xFD9
  2025                           status	equ	0xFD8
  2026                           
  2027                           	psect	intcode_body
  2028  00098E                     __pintcode_body:
  2029                           	opt stack 24
  2030  00098E                     int_func:
  2031                           	opt stack 24
  2032  00098E  0006               	pop		; remove dummy address from shadow register refresh
  2033  000990  CFFA F001          	movff	pclath,??_ISR
  2034  000994  CFFB F002          	movff	pclatu,??_ISR+1
  2035  000998  CFE9 F003          	movff	fsr0l,??_ISR+2
  2036  00099C  CFEA F004          	movff	fsr0h,??_ISR+3
  2037  0009A0  CFE1 F005          	movff	fsr1l,??_ISR+4
  2038  0009A4  CFE2 F006          	movff	fsr1h,??_ISR+5
  2039  0009A8  CFD9 F007          	movff	fsr2l,??_ISR+6
  2040  0009AC  CFDA F008          	movff	fsr2h,??_ISR+7
  2041  0009B0  CFF3 F009          	movff	prodl,??_ISR+8
  2042  0009B4  CFF4 F00A          	movff	prodh,??_ISR+9
  2043  0009B8  CFF6 F00B          	movff	tblptrl,??_ISR+10
  2044  0009BC  CFF7 F00C          	movff	tblptrh,??_ISR+11
  2045  0009C0  CFF8 F00D          	movff	tblptru,??_ISR+12
  2046  0009C4  CFF5 F00E          	movff	tablat,??_ISR+13
  2047  0009C8  C04A  F00F         	movff	btemp,??_ISR+14
  2048  0009CC  C04B  F010         	movff	btemp+1,??_ISR+15
  2049  0009D0  C04C  F011         	movff	btemp+2,??_ISR+16
  2050  0009D4  C04D  F012         	movff	btemp+3,??_ISR+17
  2051  0009D8  C012  F04D         	movff	??_ISR+17,btemp+3
  2052  0009DC  C011  F04C         	movff	??_ISR+16,btemp+2
  2053  0009E0  C010  F04B         	movff	??_ISR+15,btemp+1
  2054  0009E4  C00F  F04A         	movff	??_ISR+14,btemp
  2055  0009E8  C00E  FFF5         	movff	??_ISR+13,tablat
  2056  0009EC  C00D  FFF8         	movff	??_ISR+12,tblptru
  2057  0009F0  C00C  FFF7         	movff	??_ISR+11,tblptrh
  2058  0009F4  C00B  FFF6         	movff	??_ISR+10,tblptrl
  2059  0009F8  C00A  FFF4         	movff	??_ISR+9,prodh
  2060  0009FC  C009  FFF3         	movff	??_ISR+8,prodl
  2061  000A00  C008  FFDA         	movff	??_ISR+7,fsr2h
  2062  000A04  C007  FFD9         	movff	??_ISR+6,fsr2l
  2063  000A08  C006  FFE2         	movff	??_ISR+5,fsr1h
  2064  000A0C  C005  FFE1         	movff	??_ISR+4,fsr1l
  2065  000A10  C004  FFEA         	movff	??_ISR+3,fsr0h
  2066  000A14  C003  FFE9         	movff	??_ISR+2,fsr0l
  2067  000A18  C002  FFFB         	movff	??_ISR+1,pclatu
  2068  000A1C  C001  FFFA         	movff	??_ISR,pclath
  2069  000A20  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2070  000A22  0011               	retfie		f
  2071  000A24                     __end_of_ISR:
  2072                           	opt stack 0
  2073                           pclatu	equ	0xFFB
  2074                           pclath	equ	0xFFA
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           prodh	equ	0xFF4
  2080                           prodl	equ	0xFF3
  2081                           intcon	equ	0xFF2
  2082                           postinc0	equ	0xFEE
  2083                           fsr0h	equ	0xFEA
  2084                           fsr0l	equ	0xFE9
  2085                           wreg	equ	0xFE8
  2086                           fsr1h	equ	0xFE2
  2087                           fsr1l	equ	0xFE1
  2088                           bsr	equ	0xFE0
  2089                           indf2	equ	0xFDF
  2090                           fsr2h	equ	0xFDA
  2091                           fsr2l	equ	0xFD9
  2092                           status	equ	0xFD8
  2093                           pclatu	equ	0xFFB
  2094                           pclath	equ	0xFFA
  2095                           tblptru	equ	0xFF8
  2096                           tblptrh	equ	0xFF7
  2097                           tblptrl	equ	0xFF6
  2098                           tablat	equ	0xFF5
  2099                           prodh	equ	0xFF4
  2100                           prodl	equ	0xFF3
  2101                           intcon	equ	0xFF2
  2102                           postinc0	equ	0xFEE
  2103                           fsr0h	equ	0xFEA
  2104                           fsr0l	equ	0xFE9
  2105                           wreg	equ	0xFE8
  2106                           fsr1h	equ	0xFE2
  2107                           fsr1l	equ	0xFE1
  2108                           bsr	equ	0xFE0
  2109                           indf2	equ	0xFDF
  2110                           fsr2h	equ	0xFDA
  2111                           fsr2l	equ	0xFD9
  2112                           status	equ	0xFD8
  2113                           
  2114                           	psect	rparam
  2115  0000                     pclatu	equ	0xFFB
  2116                           pclath	equ	0xFFA
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           postinc0	equ	0xFEE
  2125                           fsr0h	equ	0xFEA
  2126                           fsr0l	equ	0xFE9
  2127                           wreg	equ	0xFE8
  2128                           fsr1h	equ	0xFE2
  2129                           fsr1l	equ	0xFE1
  2130                           bsr	equ	0xFE0
  2131                           indf2	equ	0xFDF
  2132                           fsr2h	equ	0xFDA
  2133                           fsr2l	equ	0xFD9
  2134                           status	equ	0xFD8
  2135                           
  2136                           	psect	temp
  2137  00004A                     btemp:
  2138                           	opt stack 0
  2139  00004A                     	ds	1
  2140  0000                     int$flags	set	btemp
  2141  0000                     wtemp6	set	btemp+1
  2142                           pclatu	equ	0xFFB
  2143                           pclath	equ	0xFFA
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           prodh	equ	0xFF4
  2149                           prodl	equ	0xFF3
  2150                           intcon	equ	0xFF2
  2151                           postinc0	equ	0xFEE
  2152                           fsr0h	equ	0xFEA
  2153                           fsr0l	equ	0xFE9
  2154                           wreg	equ	0xFE8
  2155                           fsr1h	equ	0xFE2
  2156                           fsr1l	equ	0xFE1
  2157                           bsr	equ	0xFE0
  2158                           indf2	equ	0xFDF
  2159                           fsr2h	equ	0xFDA
  2160                           fsr2l	equ	0xFD9
  2161                           status	equ	0xFD8


Data Sizes:
    Strings     28
    Constant    0
    Data        0
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      73
    BANK0           160      9       9
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcdWrite@string	PTR unsigned char  size(2) Largest target is 28
		 -> STR_1(CODE[28]), 

    lcdWrite@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(COMRAM[33]), 

    lcdCleanAll@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(COMRAM[33]), 

    lcdMemClean@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(COMRAM[33]), 

    lcdInit@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(COMRAM[33]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_LP in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_lcdInit
    _lcdInit->_OpenXLCD
    _lcdInit->_lcdCleanAll
    _lcdClean->_delay_ms
    _OpenXLCD->_SetDDRamAddr
    _WriteCmdXLCD->_DelayFor18TCY
    _SetDDRamAddr->_DelayFor18TCY
    _DelayPORXLCD->_delay_ms
    _BusyXLCD->_DelayFor18TCY

Critical Paths under _ISR_LP in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_LP in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_LP in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_LP in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_LP in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_LP in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_LP in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_LP in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2662
                            _lcdInit
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (1) _lcdWrite                                             6     0      6     880
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              2     0      2    1782
                                              7 BANK0      2     0      2
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
                        _lcdCleanAll
 ---------------------------------------------------------------------------------
 (2) _lcdCleanAll                                          2     0      2     908
                                              5 BANK0      2     0      2
                           _lcdClean
                        _lcdMemClean
 ---------------------------------------------------------------------------------
 (3) _lcdMemClean                                          3     1      2     313
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _lcdClean                                             0     0      0     474
                           _BusyXLCD
                       _WriteCmdXLCD
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     617
                                              6 BANK0      1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (4) _WriteCmdXLCD                                         1     1      0      90
                                              2 BANK0      1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      90
                                              2 BANK0      4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0     338
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             5     3      2     338
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _BusyXLCD                                             0     0      0      46
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (5) _DelayFor18TCY                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR_LP                                              22    22      0       0
                                             18 COMRAM    22    22      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcdInit
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _Delay10KTCYx
       _DelayPORXLCD
         _delay_ms
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
     _lcdCleanAll
       _lcdClean
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _delay_ms
       _lcdMemClean
   _lcdWrite

 _ISR_LP (ROOT)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      9       9       5        5.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      49       1       77.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      52      20        0.0%
DATA                 0      0      52       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jul 01 18:13:16 2018

            lcdWrite@col 0063              lcdWrite@lcd 0060              lcdWrite@row 0062  
                     l54 0C5C                       l55 0C5A                       l80 0B90  
                     l48 0A80                       l83 0BA0                       l77 0B80  
                     l94 0A90              __CFG_BOR$ON 000000                       bsr 000FE0  
            __CFG_BORV$2 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000  
                    l102 083A                      l112 08C0                      l201 097C  
                    l113 0894                      l107 0872                      l108 0846  
                    l136 0C0C                      l139 0C12                      l183 0920  
                    l168 0BDE                      l432 0C74                      l192 094C  
                    l195 095C                      l189 093C                      l198 096C  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      _ISR 0008  
                    u730 0ACC                      u750 092A                      u910 088A  
                    u745 0AF4                      u930 08D8                      _lcd 0029  
  __size_of_WriteCmdXLCD 0044                      wreg 000FE8                     ?_ISR 0001  
           __CFG_WDT$OFF 000000                     l1473 0BFC                     l1555 0A88  
                   STR_1 0801                     _GIEH 007F97                     u1077 0C7C  
                   _IPEN 007E87                     _PEIE 007F96                     i1l42 0096  
                   _main 0A24                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 004A  
                   prodh 000FF4                     prodl 000FF3                     start 00EE  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_ISR 0001             _WriteCmdXLCD 0B32            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000           lcdWrite@string 0064            ?_SetDDRamAddr 0001  
                  ?_main 0001                    _TMR1H 000FCF                    _TMR1L 000FCE  
                  _PORTD 000F83            __CFG_USBDIV$1 000000                    _TRISC 000F94  
                  _TRISD 000F95    __size_of_Delay10KTCYx 001E            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInit 0BB8           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    pclath 000FFA  
                  tablat 000FF5                    status 000FD8                    wtemp6 004B  
         __CFG_ICPRT$OFF 000000          __initialization 0C34             __end_of_main 0A82  
       __end_of_BusyXLCD 0BF2     __size_of_lcdCleanAll 0012             _Delay10KTCYx 0C70  
  __size_of_DelayPORXLCD 0010           ??_SetDDRamAddr 0062         __end_of_OpenXLCD 098E  
                 ??_main 0069     __size_of_lcdMemClean 0058            __activetblptr 000001  
         DelayFor18TCY@i 0060                   _ADCON1 000FC1                   _OSCCON 000FD3  
                 _ISR_LP 0018                   _TMR1IE 007CE8                   _TMR1IF 007CF0  
                 _TMR1IP 007CF8         __end_of_delay_ms 0C70         __end_of_lcdClean 0C34  
           _DelayPORXLCD 0CA0           __CFG_XINST$OFF 000000           lcdCleanAll@lcd 0065  
       __end_of_lcdWrite 08E6           __CFG_STVREN$ON 000000                   clear_0 0C3A  
              ??_lcdInit 0069             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 0C40          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001   __size_of_DelayFor18TCY 0022                ?_BusyXLCD 0001  
                ?_ISR_LP 0001          WriteCmdXLCD@cmd 0062     __end_of_SetDDRamAddr 0B32  
              ?_OpenXLCD 0001                ?_delay_ms 0060                  i1u30_28 0088  
              ?_lcdClean 0001                  i1u29_20 0086                ?_lcdWrite 0060  
             ??_BusyXLCD 0062          __CFG_VREGEN$OFF 000000          __size_of_ISR_LP 00D6  
         lcdMemClean@lcd 0060               ??_OpenXLCD 0066                  __Hparam 0000  
                __Lparam 0000            _DelayFor18TCY 0BF2             __psmallconst 0800  
                __pcinit 0C34                  __ramtop 0800                  _lcdInit 0B76  
                __ptext0 0A24                  __ptext1 081E                  __ptext2 0B76  
                __ptext3 0C8E                  __ptext4 0A82                  __ptext5 0C14  
                __ptext6 08E6                  __ptext7 0B32                  __ptext8 0ADA  
                __ptext9 0CA0             __size_of_ISR 0A1C                _T1CONbits 000FCD  
             ??_delay_ms 0062               ??_lcdClean 0065               ??_lcdWrite 0066  
         __pintcode_body 098E     end_of_initialization 0C40                  int_func 098E  
          ??_lcdCleanAll 0067               lcdInit@lcd 0067           ?_DelayFor18TCY 0001  
                postinc0 000FEE            ??_lcdMemClean 0062                _PORTCbits 000F82  
              _TRISDbits 000F95    __size_of_SetDDRamAddr 0058           __end_of_ISR_LP 00EE  
          delay_ms@milis 0060      __end_of_lcdCleanAll 0CA0             _SetDDRamAddr 0ADA  
     SetDDRamAddr@DDaddr 0065      __end_of_lcdMemClean 0ADA      start_initialization 0C34  
            __end_of_ISR 0A24                 ??_ISR_LP 0013        __size_of_BusyXLCD 003A  
        ??_DelayFor18TCY 0060        __size_of_OpenXLCD 00A8            ?_WriteCmdXLCD 0001  
       __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0029            __pcstackBANK0 0060  
      __size_of_delay_ms 001E        __size_of_lcdClean 0020        __size_of_lcdWrite 00C8  
            _lcdCleanAll 0C8E                __pintcode 0008           ??_WriteCmdXLCD 0062  
          ?_Delay10KTCYx 0001              _lcdMemClean 0A82              __pintcodelo 0018  
               ?_lcdInit 0067              __smallconst 0800                 _LATDbits 000F8C  
              delay_ms@t 0064            ?_DelayPORXLCD 0001          OpenXLCD@lcdtype 0066  
       __CFG_WDTPS$32768 000000           ??_Delay10KTCYx 0060         Delay10KTCYx@unit 0061  
               _BusyXLCD 0BB8           ??_DelayPORXLCD 0065                 _OpenXLCD 08E6  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 0800  
  __CFG_FOSC$INTOSCIO_EC 000000         __size_of_lcdInit 0042                 _delay_ms 0C52  
               _lcdClean 0C14                 __ptext10 0C52                 __ptext11 0C70  
               __ptext12 0BB8                 __ptext13 0BF2                 _lcdWrite 081E  
   __end_of_WriteCmdXLCD 0B76             lcdMemClean@i 0062            __size_of_main 005E  
               int$flags 004A    __CFG_CPUDIV$OSC1_PLL2 000000     __end_of_Delay10KTCYx 0C8E  
               intlevel1 0000                 intlevel2 0000             ?_lcdCleanAll 0065  
  __end_of_DelayFor18TCY 0C14             ?_lcdMemClean 0060     __end_of_DelayPORXLCD 0CB0  
