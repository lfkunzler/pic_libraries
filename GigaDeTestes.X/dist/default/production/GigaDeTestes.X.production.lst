

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jul 02 03:00:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           ; Version 1.45
    65                           ; Generated 16/11/2017 GMT
    66                           ; 
    67                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F4550 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99 ;; Function _OnExitMenu1 is unused but had its address taken
   100  0000                     
   101 ;; Function _OnExitMenu2 is unused but had its address taken
   102  0000                     
   103                           	psect	idataBANK0
   104  001406                     __pidataBANK0:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _menu2
   108  001406  5C                 	db	low _OnEnterMenu2
   109  001407  14                 	db	high _OnEnterMenu2
   110  001408  EA                 	db	low _OnRenderMenu2
   111  001409  0F                 	db	high _OnRenderMenu2
   112  00140A  00                 	db	0
   113  00140B  00                 	db	0
   114                           
   115                           ;initializer for _menu1
   116  00140C  5A                 	db	low _OnEnterMenu1
   117  00140D  14                 	db	high _OnEnterMenu1
   118  00140E  9E                 	db	low _OnRenderMenu1
   119  00140F  0F                 	db	high _OnRenderMenu1
   120  001410  00                 	db	0
   121  001411  00                 	db	0
   122                           
   123                           	psect	smallconst
   124  000800                     __psmallconst:
   125                           	opt stack 0
   126  000800  00                 	db	0
   127  000801                     _dpowers:
   128                           	opt stack 0
   129  000801  0001               	dw	1
   130  000803  000A               	dw	10
   131  000805  0064               	dw	100
   132  000807  03E8               	dw	1000
   133  000809  2710               	dw	10000
   134  00080B                     __end_of_dpowers:
   135                           	opt stack 0
   136  0000                     _TRISAbits	set	3986
   137  0000                     _TXREG	set	4013
   138  0000                     _RCREG	set	4014
   139  0000                     _RCSTAbits	set	4011
   140  0000                     _SPBRG	set	4015
   141  0000                     _TXSTA	set	4012
   142  0000                     _RCSTA	set	4011
   143  0000                     _SSPBUF	set	4041
   144  0000                     _SSPSTATbits	set	4039
   145  0000                     _SSPCON2bits	set	4037
   146  0000                     _SSPADD	set	4040
   147  0000                     _SSPCON2	set	4037
   148  0000                     _SSPCON1	set	4038
   149  0000                     _SSPSTAT	set	4039
   150  0000                     _TRISDbits	set	3989
   151  0000                     _PORTD	set	3971
   152  0000                     _LATDbits	set	3980
   153  0000                     _TRISD	set	3989
   154  0000                     _T0CONbits	set	4053
   155  0000                     _TRISC	set	3988
   156  0000                     _OSCCON	set	4051
   157  0000                     _ADCON1	set	4033
   158  0000                     _PORTCbits	set	3970
   159  0000                     _TMR0L	set	4054
   160  0000                     _TMR0H	set	4055
   161  0000                     _TRMT	set	32097
   162  0000                     _TXIF	set	31988
   163  0000                     _RCIF	set	31989
   164  0000                     _PEN	set	32298
   165  0000                     _RCEN	set	32299
   166  0000                     _ACKEN	set	32300
   167  0000                     _ACKDT	set	32301
   168  0000                     _RSEN	set	32297
   169  0000                     _ACKSTAT	set	32302
   170  0000                     _SSPIF	set	31987
   171  0000                     _SSPIE	set	31979
   172  0000                     _TRISB1	set	31897
   173  0000                     _TRISB0	set	31896
   174  0000                     _TMR0IP	set	32650
   175  0000                     _TMR0IE	set	32661
   176  0000                     _PEIE	set	32662
   177  0000                     _GIEH	set	32663
   178  0000                     _IPEN	set	32391
   179  0000                     _TMR0IF	set	32658
   180  00080B                     STR_1:
   181  00080B  25                 	db	37
   182  00080C  34                 	db	52	;'4'
   183  00080D  64                 	db	100	;'d'
   184  00080E  20                 	db	32
   185  00080F  25                 	db	37
   186  000810  34                 	db	52	;'4'
   187  000811  64                 	db	100	;'d'
   188  000812  20                 	db	32
   189  000813  25                 	db	37
   190  000814  34                 	db	52	;'4'
   191  000815  64                 	db	100	;'d'
   192  000816  00                 	db	0
   193  000817  00                 	db	0
   194  0000                     
   195                           ; #config settings
   196  000818  00                 	db	0	; dummy byte at the end
   197  0000                     
   198                           	psect	cinit
   199  001036                     __pcinit:
   200                           	opt stack 0
   201  001036                     start_initialization:
   202                           	opt stack 0
   203  001036                     __initialization:
   204                           	opt stack 0
   205                           
   206                           ; Initialize objects allocated to BANK0 (12 bytes)
   207                           ; load TBLPTR registers with __pidataBANK0
   208  001036  0E06               	movlw	low __pidataBANK0
   209  001038  6EF6               	movwf	tblptrl,c
   210  00103A  0E14               	movlw	high __pidataBANK0
   211  00103C  6EF7               	movwf	tblptrh,c
   212  00103E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   213  001040  6EF8               	movwf	tblptru,c
   214  001042  EE00  F0C6         	lfsr	0,__pdataBANK0
   215  001046  EE10 F00C          	lfsr	1,12
   216  00104A                     copy_data0:
   217  00104A  0009               	tblrd		*+
   218  00104C  CFF5 FFEE          	movff	tablat,postinc0
   219  001050  50E5               	movf	postdec1,w,c
   220  001052  50E1               	movf	fsr1l,w,c
   221  001054  E1FA               	bnz	copy_data0
   222                           
   223                           ; Clear objects allocated to BANK0 (71 bytes)
   224  001056  EE00  F060         	lfsr	0,__pbssBANK0
   225  00105A  0E47               	movlw	71
   226  00105C                     clear_0:
   227  00105C  6AEE               	clrf	postinc0,c
   228  00105E  06E8               	decf	wreg,f,c
   229  001060  E1FD               	bnz	clear_0
   230                           
   231                           ; Clear objects allocated to COMRAM (8 bytes)
   232  001062  EE00  F02F         	lfsr	0,__pbssCOMRAM
   233  001066  0E08               	movlw	8
   234  001068                     clear_1:
   235  001068  6AEE               	clrf	postinc0,c
   236  00106A  06E8               	decf	wreg,f,c
   237  00106C  E1FD               	bnz	clear_1
   238  00106E                     end_of_initialization:
   239                           	opt stack 0
   240  00106E                     __end_of__initialization:
   241                           	opt stack 0
   242  00106E  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   243  001070  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   244  001072  0E00               	movlw	low (__Lmediumconst shr (0+16))
   245  001074  6EF8               	movwf	tblptru,c
   246  001076  0100               	movlb	0
   247  001078  EF5A  F006         	goto	_main	;jump to C main() function
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           postdec1	equ	0xFE5
   255                           fsr1l	equ	0xFE1
   256                           
   257                           	psect	bssCOMRAM
   258  00002F                     __pbssCOMRAM:
   259                           	opt stack 0
   260  00002F                     _Menu:
   261                           	opt stack 0
   262  00002F                     	ds	8
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           postdec1	equ	0xFE5
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	bssBANK0
   273  000060                     __pbssBANK0:
   274                           	opt stack 0
   275  000060                     _lcd:
   276                           	opt stack 0
   277  000060                     	ds	33
   278  000081                     _buffer:
   279                           	opt stack 0
   280  000081                     	ds	32
   281  0000A1                     _cord:
   282                           	opt stack 0
   283  0000A1                     	ds	6
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           postdec1	equ	0xFE5
   291                           fsr1l	equ	0xFE1
   292                           
   293                           	psect	dataBANK0
   294  0000C6                     __pdataBANK0:
   295                           	opt stack 0
   296  0000C6                     _menu2:
   297                           	opt stack 0
   298  0000C6                     	ds	6
   299  0000CC                     _menu1:
   300                           	opt stack 0
   301  0000CC                     	ds	6
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           postdec1	equ	0xFE5
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	cstackBANK0
   312  0000A7                     __pcstackBANK0:
   313                           	opt stack 0
   314  0000A7                     ??_magnetoGetCord:
   315  0000A7                     OpenXLCD@lcdtype:
   316                           	opt stack 0
   317  0000A7                     ___lwdiv@counter:
   318                           	opt stack 0
   319  0000A7                     lcdCleanAll@lcd:
   320                           	opt stack 0
   321  0000A7                     lcdRuntime@lcd:
   322                           	opt stack 0
   323  0000A7                     memset@p:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x0
   327  0000A7                     	ds	1
   328  0000A8                     ___lwdiv@quotient:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x1
   332  0000A8                     	ds	1
   333  0000A9                     ??_lcdRuntime:
   334  0000A9                     lcdInit@lcd:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x2
   338  0000A9                     	ds	1
   339  0000AA                     ?___lwmod:
   340                           	opt stack 0
   341  0000AA                     ___lwmod@dividend:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x3
   345  0000AA                     	ds	1
   346  0000AB                     lcdRuntime@i:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x4
   350  0000AB                     	ds	1
   351  0000AC                     ___lwmod@divisor:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x5
   355  0000AC                     	ds	1
   356  0000AD                     lcdRuntime@i_330:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x6
   360  0000AD                     	ds	1
   361  0000AE                     ?_sprintf:
   362                           	opt stack 0
   363  0000AE                     sprintf@sp:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x7
   367  0000AE                     	ds	2
   368  0000B0                     sprintf@f:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x9
   372  0000B0                     	ds	8
   373  0000B8                     ??_sprintf:
   374                           
   375                           ; 1 bytes @ 0x11
   376  0000B8                     	ds	4
   377  0000BC                     sprintf@ap:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x15
   381  0000BC                     	ds	2
   382  0000BE                     sprintf@prec:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x17
   386  0000BE                     	ds	1
   387  0000BF                     sprintf@flag:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x18
   391  0000BF                     	ds	1
   392  0000C0                     sprintf@val:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x19
   396  0000C0                     	ds	2
   397  0000C2                     sprintf@width:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x1B
   401  0000C2                     	ds	2
   402  0000C4                     sprintf@c:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x1D
   406  0000C4                     	ds	1
   407  0000C5                     main@opcao:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x1E
   411  0000C5                     	ds	1
   412                           tblptru	equ	0xFF8
   413                           tblptrh	equ	0xFF7
   414                           tblptrl	equ	0xFF6
   415                           tablat	equ	0xFF5
   416                           postinc0	equ	0xFEE
   417                           wreg	equ	0xFE8
   418                           postdec1	equ	0xFE5
   419                           fsr1l	equ	0xFE1
   420                           
   421                           	psect	cstackCOMRAM
   422  000001                     __pcstackCOMRAM:
   423                           	opt stack 0
   424  000001                     ??_ISR:
   425  000001                     
   426                           ; 1 bytes @ 0x0
   427  000001                     	ds	18
   428  000013                     ??_ISR_LP:
   429  000013                     
   430                           ; 1 bytes @ 0x12
   431  000013                     	ds	22
   432  000029                     ??_Delay10KTCYx:
   433  000029                     ??_isdigit:
   434  000029                     ?___wmul:
   435                           	opt stack 0
   436  000029                     ?___lwdiv:
   437                           	opt stack 0
   438  000029                     __menuEnterPosition@pos:
   439                           	opt stack 0
   440  000029                     I2C_Write@data:
   441                           	opt stack 0
   442  000029                     I2C_Read@flag:
   443                           	opt stack 0
   444  000029                     delay_ms@milis:
   445                           	opt stack 0
   446  000029                     lcdMemClean@lcd:
   447                           	opt stack 0
   448  000029                     lcdWrite@lcd:
   449                           	opt stack 0
   450  000029                     DelayFor18TCY@i:
   451                           	opt stack 0
   452  000029                     menuInit@lcd:
   453                           	opt stack 0
   454  000029                     menuSetPosition@item:
   455                           	opt stack 0
   456  000029                     ___wmul@multiplier:
   457                           	opt stack 0
   458  000029                     ___lwdiv@dividend:
   459                           	opt stack 0
   460  000029                     memset@p1:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x28
   464  000029                     	ds	1
   465  00002A                     menuGoto@pos:
   466                           	opt stack 0
   467  00002A                     I2C_Start@slave_write_address:
   468                           	opt stack 0
   469  00002A                     I2C_Start_Wait@slave_write_address:
   470                           	opt stack 0
   471  00002A                     I2C_Repeated_Start@slave_read_address:
   472                           	opt stack 0
   473  00002A                     I2C_Read@buffer:
   474                           	opt stack 0
   475  00002A                     Delay10KTCYx@unit:
   476                           	opt stack 0
   477  00002A                     _isdigit$1137:
   478                           	opt stack 0
   479                           
   480                           ; 1 bytes @ 0x29
   481  00002A                     	ds	1
   482  00002B                     ??_SetDDRamAddr:
   483  00002B                     ??_delay_ms:
   484  00002B                     lcdMemClean@i:
   485                           	opt stack 0
   486  00002B                     lcdWrite@row:
   487                           	opt stack 0
   488  00002B                     WriteCmdXLCD@cmd:
   489                           	opt stack 0
   490  00002B                     WriteDataXLCD@data:
   491                           	opt stack 0
   492  00002B                     menuSetPosition@pos:
   493                           	opt stack 0
   494  00002B                     isdigit@c:
   495                           	opt stack 0
   496  00002B                     magnetoGetCord@coord:
   497                           	opt stack 0
   498  00002B                     ___wmul@multiplicand:
   499                           	opt stack 0
   500  00002B                     ___lwdiv@divisor:
   501                           	opt stack 0
   502  00002B                     memset@c:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x2A
   506  00002B                     	ds	1
   507  00002C                     lcdWrite@col:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x2B
   511  00002C                     	ds	1
   512  00002D                     delay_ms@t:
   513                           	opt stack 0
   514  00002D                     ___lwmod@counter:
   515                           	opt stack 0
   516  00002D                     lcdWrite@string:
   517                           	opt stack 0
   518  00002D                     ___wmul@product:
   519                           	opt stack 0
   520  00002D                     memset@n:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x2C
   524  00002D                     	ds	1
   525  00002E                     SetDDRamAddr@DDaddr:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x2D
   529  00002E                     	ds	1
   530  00002F                     tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           postdec1	equ	0xFE5
   537                           fsr1l	equ	0xFE1
   538                           
   539                           ; 1 bytes @ 0x2E
   540 ;;
   541 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   542 ;;
   543 ;; *************** function _main *****************
   544 ;; Defined at:
   545 ;;		line 81 in file "main.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;		None
   548 ;; Auto vars:     Size  Location     Type
   549 ;;  opcao           1   30[BANK0 ] unsigned char 
   550 ;; Return value:  Size  Location     Type
   551 ;;                  1    wreg      void 
   552 ;; Registers used:
   553 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   559 ;;      Params:         0       0       0       0       0       0       0       0       0
   560 ;;      Locals:         0       1       0       0       0       0       0       0       0
   561 ;;      Temps:          0       0       0       0       0       0       0       0       0
   562 ;;      Totals:         0       1       0       0       0       0       0       0       0
   563 ;;Total ram usage:        1 bytes
   564 ;; Hardware stack levels required when called:    8
   565 ;; This function calls:
   566 ;;		_lcdInit
   567 ;;		_magnetoGetCord
   568 ;;		_magnetoInit
   569 ;;		_memset
   570 ;;		_menuGoto
   571 ;;		_menuInit
   572 ;;		_menuRuntime
   573 ;;		_menuSetPosition
   574 ;; This function is called by:
   575 ;;		Startup code after reset
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579                           	psect	text0
   580  000CB4                     __ptext0:
   581                           	opt stack 0
   582  000CB4                     _main:
   583                           	opt stack 23
   584                           
   585                           ;main.c: 83: uint8_t opcao;
   586                           ;main.c: 85: memset(buffer, 0, 32);
   587                           
   588                           ;incstack = 0
   589  000CB4  0E81               	movlw	low _buffer
   590  000CB6  6E29               	movwf	memset@p1,c
   591  000CB8  0E00               	movlw	high _buffer
   592  000CBA  6E2A               	movwf	memset@p1+1,c
   593  000CBC  0E00               	movlw	0
   594  000CBE  6E2C               	movwf	memset@c+1,c
   595  000CC0  0E00               	movlw	0
   596  000CC2  6E2B               	movwf	memset@c,c
   597  000CC4  0E00               	movlw	0
   598  000CC6  6E2E               	movwf	memset@n+1,c
   599  000CC8  0E20               	movlw	32
   600  000CCA  6E2D               	movwf	memset@n,c
   601  000CCC  EC1E  F009         	call	_memset	;wreg free
   602                           
   603                           ;main.c: 87: ADCON1 = 0x0F;
   604  000CD0  0E0F               	movlw	15
   605  000CD2  6EC1               	movwf	4033,c	;volatile
   606                           
   607                           ;main.c: 88: OSCCON = 0x72;
   608  000CD4  0E72               	movlw	114
   609  000CD6  6ED3               	movwf	4051,c	;volatile
   610                           
   611                           ;main.c: 90: TRISC = 0xFE;
   612  000CD8  0EFE               	movlw	254
   613  000CDA  6E94               	movwf	3988,c	;volatile
   614                           
   615                           ;main.c: 91: PORTCbits.RC0 = 1;
   616  000CDC  8082               	bsf	3970,0,c	;volatile
   617                           
   618                           ;main.c: 94: IPEN = 1;
   619  000CDE  8ED0               	bsf	4048,7,c	;volatile
   620                           
   621                           ;main.c: 95: GIEH = 1;
   622  000CE0  8EF2               	bsf	intcon,7,c	;volatile
   623                           
   624                           ;main.c: 96: PEIE = 1;
   625  000CE2  8CF2               	bsf	intcon,6,c	;volatile
   626                           
   627                           ;main.c: 107: T0CONbits.TMR0ON = 1;
   628  000CE4  8ED5               	bsf	4053,7,c	;volatile
   629                           
   630                           ;main.c: 108: T0CONbits.T08BIT = 0;
   631  000CE6  9CD5               	bcf	4053,6,c	;volatile
   632                           
   633                           ;main.c: 109: T0CONbits.T0CS = 0;
   634  000CE8  9AD5               	bcf	4053,5,c	;volatile
   635                           
   636                           ;main.c: 110: T0CONbits.PSA = 1;
   637  000CEA  86D5               	bsf	4053,3,c	;volatile
   638                           
   639                           ;main.c: 112: TMR0H = 0x63;
   640  000CEC  0E63               	movlw	99
   641  000CEE  6ED7               	movwf	4055,c	;volatile
   642                           
   643                           ;main.c: 113: TMR0L = 0xC0;
   644  000CF0  0EC0               	movlw	192
   645  000CF2  6ED6               	movwf	4054,c	;volatile
   646                           
   647                           ;main.c: 114: TMR0IF = 0;
   648  000CF4  94F2               	bcf	intcon,2,c	;volatile
   649                           
   650                           ;main.c: 115: TMR0IE = 1;
   651  000CF6  8AF2               	bsf	intcon,5,c	;volatile
   652                           
   653                           ;main.c: 116: TMR0IP = 0;
   654  000CF8  94F1               	bcf	intcon2,2,c	;volatile
   655                           
   656                           ;main.c: 119: lcdInit(&lcd);
   657  000CFA  0E60               	movlw	low _lcd
   658  000CFC  0100               	movlb	0	; () banked
   659  000CFE  6FA9               	movwf	lcdInit@lcd& (0+255),b
   660  000D00  0E00               	movlw	high _lcd
   661  000D02  6FAA               	movwf	(lcdInit@lcd+1)& (0+255),b
   662  000D04  EC82  F008         	call	_lcdInit	;wreg free
   663                           
   664                           ;main.c: 120: menuInit(&lcd);
   665  000D08  0E60               	movlw	low _lcd
   666  000D0A  6E29               	movwf	menuInit@lcd,c
   667  000D0C  0E00               	movlw	high _lcd
   668  000D0E  6E2A               	movwf	menuInit@lcd+1,c
   669  000D10  EC0F  F00A         	call	_menuInit	;wreg free
   670                           
   671                           ;main.c: 121: menuSetPosition(0, &menu1);
   672  000D14  0ECC               	movlw	low _menu1
   673  000D16  6E29               	movwf	menuSetPosition@item,c
   674  000D18  0E00               	movlw	high _menu1
   675  000D1A  6E2A               	movwf	menuSetPosition@item+1,c
   676  000D1C  0E00               	movlw	0
   677  000D1E  ECAB  F009         	call	_menuSetPosition
   678                           
   679                           ;main.c: 122: menuSetPosition(1, &menu2);
   680  000D22  0EC6               	movlw	low _menu2
   681  000D24  6E29               	movwf	menuSetPosition@item,c
   682  000D26  0E00               	movlw	high _menu2
   683  000D28  6E2A               	movwf	menuSetPosition@item+1,c
   684  000D2A  0E01               	movlw	1
   685  000D2C  ECAB  F009         	call	_menuSetPosition
   686                           
   687                           ;main.c: 124: opcao = 2;
   688  000D30  0E02               	movlw	2
   689  000D32  0100               	movlb	0	; () banked
   690  000D34  6FC5               	movwf	main@opcao& (0+255),b
   691                           
   692                           ;main.c: 126: switch (opcao) {
   693  000D36  D00E               	goto	l94
   694  000D38                     
   695                           ; BSR set to: 0
   696                           ;main.c: 128: magnetoInit();
   697                           
   698                           ; BSR set to: 0
   699  000D38  EC35  F009         	call	_magnetoInit	;wreg free
   700                           
   701                           ;main.c: 129: menuGoto(0);
   702  000D3C  0E00               	movlw	0
   703  000D3E  EC14  F00A         	call	_menuGoto
   704  000D42                     
   705                           ;main.c: 131: magnetoGetCord(&cord);
   706  000D42  0EA1               	movlw	low _cord
   707  000D44  6E2B               	movwf	magnetoGetCord@coord,c
   708  000D46  0E00               	movlw	high _cord
   709  000D48  6E2C               	movwf	magnetoGetCord@coord+1,c
   710  000D4A  ECFF  F005         	call	_magnetoGetCord	;wreg free
   711                           
   712                           ;main.c: 132: menuRuntime();
   713  000D4E  EC3E  F008         	call	_menuRuntime	;wreg free
   714  000D52  D7F7               	goto	l96
   715  000D54                     l94:
   716  000D54  0100               	movlb	0	; () banked
   717  000D56  51C5               	movf	main@opcao& (0+255),w,b
   718                           
   719                           ; Switch size 1, requested type "space"
   720                           ; Number of cases is 2, Range of values is 0 to 1
   721                           ; switch strategies available:
   722                           ; Name         Instructions Cycles
   723                           ; simple_byte            7     4 (average)
   724                           ;	Chosen strategy is simple_byte
   725  000D58  0A00               	xorlw	0	; case 0
   726  000D5A  B4D8               	btfsc	status,2,c
   727  000D5C  D7ED               	goto	l95
   728  000D5E  0A01               	xorlw	1	; case 1
   729                           
   730                           ; BSR set to: 0
   731                           ;main.c: 141: return;
   732  000D60  EF77  F000         	goto	start
   733  000D64                     __end_of_main:
   734                           	opt stack 0
   735                           tblptru	equ	0xFF8
   736                           tblptrh	equ	0xFF7
   737                           tblptrl	equ	0xFF6
   738                           tablat	equ	0xFF5
   739                           intcon	equ	0xFF2
   740                           intcon2	equ	0xFF1
   741                           postinc0	equ	0xFEE
   742                           wreg	equ	0xFE8
   743                           postdec1	equ	0xFE5
   744                           fsr1l	equ	0xFE1
   745                           status	equ	0xFD8
   746                           
   747 ;; *************** function _menuSetPosition *****************
   748 ;; Defined at:
   749 ;;		line 15 in file "menu.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;  pos             1    wreg     unsigned char 
   752 ;;  item            2   40[COMRAM] PTR struct .
   753 ;;		 -> menu2(6), menu1(6), 
   754 ;; Auto vars:     Size  Location     Type
   755 ;;  pos             1   42[COMRAM] unsigned char 
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   760 ;; Tracked objects:
   761 ;;		On entry : 0/0
   762 ;;		On exit  : 0/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   765 ;;      Params:         2       0       0       0       0       0       0       0       0
   766 ;;      Locals:         1       0       0       0       0       0       0       0       0
   767 ;;      Temps:          0       0       0       0       0       0       0       0       0
   768 ;;      Totals:         3       0       0       0       0       0       0       0       0
   769 ;;Total ram usage:        3 bytes
   770 ;; Hardware stack levels used:    1
   771 ;; Hardware stack levels required when called:    3
   772 ;; This function calls:
   773 ;;		Nothing
   774 ;; This function is called by:
   775 ;;		_main
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text1
   780  001356                     __ptext1:
   781                           	opt stack 0
   782  001356                     _menuSetPosition:
   783                           	opt stack 27
   784                           
   785                           ;incstack = 0
   786                           ;menuSetPosition@pos stored from wreg
   787  001356  6E2B               	movwf	menuSetPosition@pos,c
   788                           
   789                           ;menu.c: 17: Menu.Items[pos] = item;
   790  001358  502B               	movf	menuSetPosition@pos,w,c
   791  00135A  0D02               	mullw	2
   792  00135C  0E35               	movlw	low (_Menu+6)
   793  00135E  24F3               	addwf	prodl,w,c
   794  001360  6ED9               	movwf	fsr2l,c
   795  001362  0E00               	movlw	high (_Menu+6)
   796  001364  20F4               	addwfc	prodh,w,c
   797  001366  6EDA               	movwf	fsr2h,c
   798  001368  C029  FFDE         	movff	menuSetPosition@item,postinc2
   799  00136C  C02A  FFDD         	movff	menuSetPosition@item+1,postdec2
   800  001370  0012               	return		;funcret
   801  001372                     __end_of_menuSetPosition:
   802                           	opt stack 0
   803                           tblptru	equ	0xFF8
   804                           tblptrh	equ	0xFF7
   805                           tblptrl	equ	0xFF6
   806                           tablat	equ	0xFF5
   807                           prodh	equ	0xFF4
   808                           prodl	equ	0xFF3
   809                           intcon	equ	0xFF2
   810                           intcon2	equ	0xFF1
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           postdec1	equ	0xFE5
   814                           fsr1l	equ	0xFE1
   815                           postinc2	equ	0xFDE
   816                           postdec2	equ	0xFDD
   817                           fsr2h	equ	0xFDA
   818                           fsr2l	equ	0xFD9
   819                           status	equ	0xFD8
   820                           
   821 ;; *************** function _menuRuntime *****************
   822 ;; Defined at:
   823 ;;		line 59 in file "menu.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;		None
   826 ;; Auto vars:     Size  Location     Type
   827 ;;		None
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   837 ;;      Params:         0       0       0       0       0       0       0       0       0
   838 ;;      Locals:         0       0       0       0       0       0       0       0       0
   839 ;;      Temps:          0       0       0       0       0       0       0       0       0
   840 ;;      Totals:         0       0       0       0       0       0       0       0       0
   841 ;;Total ram usage:        0 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; Hardware stack levels required when called:    6
   844 ;; This function calls:
   845 ;;		_OnRenderMenu1
   846 ;;		_OnRenderMenu2
   847 ;;		_lcdRuntime
   848 ;; This function is called by:
   849 ;;		_main
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           	psect	text2
   854  00107C                     __ptext2:
   855                           	opt stack 0
   856  00107C                     _menuRuntime:
   857                           	opt stack 24
   858                           
   859                           ;menu.c: 61: if (Menu.NeedsRedraw) {
   860                           
   861                           ;incstack = 0
   862  00107C  5031               	movf	_Menu+2,w,c
   863  00107E  B4D8               	btfsc	status,2,c
   864  001080  0012               	return	
   865                           
   866                           ;menu.c: 62: Menu.NeedsRedraw = 0;
   867  001082  0E00               	movlw	0
   868  001084  6E31               	movwf	_Menu+2,c
   869                           
   870                           ;menu.c: 63: if (Menu.Current) {
   871  001086  5033               	movf	_Menu+4,w,c
   872  001088  1034               	iorwf	_Menu+5,w,c
   873  00108A  B4D8               	btfsc	status,2,c
   874  00108C  D012               	goto	u2309
   875                           
   876                           ;menu.c: 64: Menu.Current->Render();
   877  00108E  EE20 F002          	lfsr	2,2
   878  001092  5033               	movf	_Menu+4,w,c
   879  001094  26D9               	addwf	fsr2l,f,c
   880  001096  5034               	movf	_Menu+5,w,c
   881  001098  22DA               	addwfc	fsr2h,f,c
   882  00109A  D801               	call	u2308
   883  00109C  D00A               	goto	u2309
   884  00109E                     u2308:
   885  00109E  0005               	push	
   886  0010A0  6EFA               	movwf	pclath,c
   887  0010A2  50DE               	movf	postinc2,w,c
   888  0010A4  6EFD               	movwf	tosl,c
   889  0010A6  50DE               	movf	postinc2,w,c
   890  0010A8  6EFE               	movwf	tosh,c
   891  0010AA  50F8               	movf	tblptru,w,c
   892  0010AC  6EFF               	movwf	tosu,c
   893  0010AE  50FA               	movf	pclath,w,c
   894  0010B0  0012               	return		;indir
   895  0010B2                     u2309:
   896                           
   897                           ;menu.c: 65: }
   898                           ;menu.c: 66: lcdRuntime(Menu.lcd);
   899  0010B2  C02F  F0A7         	movff	_Menu,lcdRuntime@lcd
   900  0010B6  C030  F0A8         	movff	_Menu+1,lcdRuntime@lcd+1
   901  0010BA  EC2F  F005         	call	_lcdRuntime	;wreg free
   902  0010BE  0012               	return	
   903  0010C0                     __end_of_menuRuntime:
   904                           	opt stack 0
   905                           tosu	equ	0xFFF
   906                           tosh	equ	0xFFE
   907                           tosl	equ	0xFFD
   908                           pclath	equ	0xFFA
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           prodh	equ	0xFF4
   914                           prodl	equ	0xFF3
   915                           intcon	equ	0xFF2
   916                           intcon2	equ	0xFF1
   917                           postinc0	equ	0xFEE
   918                           wreg	equ	0xFE8
   919                           postdec1	equ	0xFE5
   920                           fsr1l	equ	0xFE1
   921                           postinc2	equ	0xFDE
   922                           postdec2	equ	0xFDD
   923                           fsr2h	equ	0xFDA
   924                           fsr2l	equ	0xFD9
   925                           status	equ	0xFD8
   926                           
   927 ;; *************** function _lcdRuntime *****************
   928 ;; Defined at:
   929 ;;		line 81 in file "display.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;  lcd             2    0[BANK0 ] PTR struct .
   932 ;;		 -> lcd(33), 
   933 ;; Auto vars:     Size  Location     Type
   934 ;;  i               2    6[BANK0 ] int 
   935 ;;  i               2    4[BANK0 ] int 
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   945 ;;      Params:         0       2       0       0       0       0       0       0       0
   946 ;;      Locals:         0       4       0       0       0       0       0       0       0
   947 ;;      Temps:          0       2       0       0       0       0       0       0       0
   948 ;;      Totals:         0       8       0       0       0       0       0       0       0
   949 ;;Total ram usage:        8 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:    5
   952 ;; This function calls:
   953 ;;		_BusyXLCD
   954 ;;		_SetDDRamAddr
   955 ;;		_WriteDataXLCD
   956 ;; This function is called by:
   957 ;;		_menuRuntime
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text3
   962  000A5E                     __ptext3:
   963                           	opt stack 0
   964  000A5E                     _lcdRuntime:
   965                           	opt stack 24
   966                           
   967                           ;display.c: 82: while (BusyXLCD());
   968                           
   969                           ;incstack = 0
   970  000A5E  EC01  F009         	call	_BusyXLCD	;wreg free
   971  000A62  0900               	iorlw	0
   972  000A64  A4D8               	btfss	status,2,c
   973  000A66  D7FB               	goto	_lcdRuntime
   974                           
   975                           ;display.c: 84: if (lcd->NeedsRedraw == 1) {
   976  000A68  C0A7  FFD9         	movff	lcdRuntime@lcd,fsr2l
   977  000A6C  C0A8  FFDA         	movff	lcdRuntime@lcd+1,fsr2h
   978  000A70  04DE               	decf	postinc2,w,c
   979  000A72  A4D8               	btfss	status,2,c
   980  000A74  0012               	return	
   981                           
   982                           ;display.c: 85: SetDDRamAddr(0x00);
   983  000A76  0E00               	movlw	0
   984  000A78  ECA6  F007         	call	_SetDDRamAddr
   985                           
   986                           ;display.c: 86: for (int i = 0; i < 16; i++) {
   987  000A7C  0E00               	movlw	0
   988  000A7E  0100               	movlb	0	; () banked
   989  000A80  6FAC               	movwf	(lcdRuntime@i+1)& (0+255),b
   990  000A82  0E00               	movlw	0
   991  000A84  6FAB               	movwf	lcdRuntime@i& (0+255),b
   992                           
   993                           ; BSR set to: 0
   994  000A86  BFAC               	btfsc	(lcdRuntime@i+1)& (0+255),7,b
   995  000A88  D006               	goto	l173
   996  000A8A  51AC               	movf	(lcdRuntime@i+1)& (0+255),w,b
   997  000A8C  E124               	bnz	l3085
   998  000A8E  0E10               	movlw	16
   999  000A90  5DAB               	subwf	lcdRuntime@i& (0+255),w,b
  1000  000A92  B0D8               	btfsc	status,0,c
  1001  000A94  D020               	goto	u2200
  1002  000A96                     l173:
  1003                           
  1004                           ; BSR set to: 0
  1005                           
  1006                           ; BSR set to: 0
  1007                           
  1008                           ; BSR set to: 0
  1009                           ;display.c: 87: while (BusyXLCD());
  1010  000A96  EC01  F009         	call	_BusyXLCD	;wreg free
  1011  000A9A  0900               	iorlw	0
  1012  000A9C  A4D8               	btfss	status,2,c
  1013  000A9E  D7FB               	goto	l173
  1014                           
  1015                           ;display.c: 88: WriteDataXLCD((char) lcd->Memory[0][i]);
  1016  000AA0  0E01               	movlw	1
  1017  000AA2  0100               	movlb	0	; () banked
  1018  000AA4  25AB               	addwf	lcdRuntime@i& (0+255),w,b
  1019  000AA6  6FA9               	movwf	??_lcdRuntime& (0+255),b
  1020  000AA8  0E00               	movlw	0
  1021  000AAA  21AC               	addwfc	(lcdRuntime@i+1)& (0+255),w,b
  1022  000AAC  6FAA               	movwf	(??_lcdRuntime+1)& (0+255),b
  1023  000AAE  51A9               	movf	??_lcdRuntime& (0+255),w,b
  1024  000AB0  25A7               	addwf	lcdRuntime@lcd& (0+255),w,b
  1025  000AB2  6ED9               	movwf	fsr2l,c
  1026  000AB4  51AA               	movf	(??_lcdRuntime+1)& (0+255),w,b
  1027  000AB6  21A8               	addwfc	(lcdRuntime@lcd+1)& (0+255),w,b
  1028  000AB8  6EDA               	movwf	fsr2h,c
  1029  000ABA  50DF               	movf	indf2,w,c
  1030  000ABC  ECC3  F008         	call	_WriteDataXLCD
  1031  000AC0  0100               	movlb	0	; () banked
  1032  000AC2  4BAB               	infsnz	lcdRuntime@i& (0+255),f,b
  1033  000AC4  2BAC               	incf	(lcdRuntime@i+1)& (0+255),f,b
  1034                           
  1035                           ; BSR set to: 0
  1036  000AC6  BFAC               	btfsc	(lcdRuntime@i+1)& (0+255),7,b
  1037  000AC8  D7E6               	goto	l173
  1038  000ACA  51AC               	movf	(lcdRuntime@i+1)& (0+255),w,b
  1039  000ACC  E104               	bnz	l3085
  1040  000ACE  0E10               	movlw	16
  1041  000AD0  5DAB               	subwf	lcdRuntime@i& (0+255),w,b
  1042  000AD2  A0D8               	btfss	status,0,c
  1043  000AD4  D7E0               	goto	l173
  1044  000AD6                     u2200:
  1045  000AD6                     l3085:
  1046                           
  1047                           ; BSR set to: 0
  1048                           ;display.c: 89: }
  1049                           ;display.c: 90: SetDDRamAddr(0x40);
  1050  000AD6  0E40               	movlw	64
  1051  000AD8  ECA6  F007         	call	_SetDDRamAddr
  1052                           
  1053                           ;display.c: 91: for (int i = 0; i < 16; i++) {
  1054  000ADC  0E00               	movlw	0
  1055  000ADE  0100               	movlb	0	; () banked
  1056  000AE0  6FAE               	movwf	(lcdRuntime@i_330+1)& (0+255),b
  1057  000AE2  0E00               	movlw	0
  1058  000AE4  6FAD               	movwf	lcdRuntime@i_330& (0+255),b
  1059                           
  1060                           ; BSR set to: 0
  1061  000AE6  BFAE               	btfsc	(lcdRuntime@i_330+1)& (0+255),7,b
  1062  000AE8  D006               	goto	l178
  1063  000AEA  51AE               	movf	(lcdRuntime@i_330+1)& (0+255),w,b
  1064  000AEC  E124               	bnz	l3101
  1065  000AEE  0E10               	movlw	16
  1066  000AF0  5DAD               	subwf	lcdRuntime@i_330& (0+255),w,b
  1067  000AF2  B0D8               	btfsc	status,0,c
  1068  000AF4  D020               	goto	u2230
  1069  000AF6                     l178:
  1070                           
  1071                           ; BSR set to: 0
  1072                           
  1073                           ; BSR set to: 0
  1074                           
  1075                           ; BSR set to: 0
  1076                           ;display.c: 92: while (BusyXLCD());
  1077  000AF6  EC01  F009         	call	_BusyXLCD	;wreg free
  1078  000AFA  0900               	iorlw	0
  1079  000AFC  A4D8               	btfss	status,2,c
  1080  000AFE  D7FB               	goto	l178
  1081                           
  1082                           ;display.c: 93: WriteDataXLCD((char) lcd->Memory[1][i]);
  1083  000B00  0E11               	movlw	17
  1084  000B02  0100               	movlb	0	; () banked
  1085  000B04  25AD               	addwf	lcdRuntime@i_330& (0+255),w,b
  1086  000B06  6FA9               	movwf	??_lcdRuntime& (0+255),b
  1087  000B08  0E00               	movlw	0
  1088  000B0A  21AE               	addwfc	(lcdRuntime@i_330+1)& (0+255),w,b
  1089  000B0C  6FAA               	movwf	(??_lcdRuntime+1)& (0+255),b
  1090  000B0E  51A9               	movf	??_lcdRuntime& (0+255),w,b
  1091  000B10  25A7               	addwf	lcdRuntime@lcd& (0+255),w,b
  1092  000B12  6ED9               	movwf	fsr2l,c
  1093  000B14  51AA               	movf	(??_lcdRuntime+1)& (0+255),w,b
  1094  000B16  21A8               	addwfc	(lcdRuntime@lcd+1)& (0+255),w,b
  1095  000B18  6EDA               	movwf	fsr2h,c
  1096  000B1A  50DF               	movf	indf2,w,c
  1097  000B1C  ECC3  F008         	call	_WriteDataXLCD
  1098  000B20  0100               	movlb	0	; () banked
  1099  000B22  4BAD               	infsnz	lcdRuntime@i_330& (0+255),f,b
  1100  000B24  2BAE               	incf	(lcdRuntime@i_330+1)& (0+255),f,b
  1101                           
  1102                           ; BSR set to: 0
  1103  000B26  BFAE               	btfsc	(lcdRuntime@i_330+1)& (0+255),7,b
  1104  000B28  D7E6               	goto	l178
  1105  000B2A  51AE               	movf	(lcdRuntime@i_330+1)& (0+255),w,b
  1106  000B2C  E104               	bnz	l3101
  1107  000B2E  0E10               	movlw	16
  1108  000B30  5DAD               	subwf	lcdRuntime@i_330& (0+255),w,b
  1109  000B32  A0D8               	btfss	status,0,c
  1110  000B34  D7E0               	goto	l178
  1111  000B36                     u2230:
  1112  000B36                     l3101:
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;display.c: 94: }
  1116                           ;display.c: 96: lcd->NeedsRedraw = 0;
  1117  000B36  C0A7  FFD9         	movff	lcdRuntime@lcd,fsr2l
  1118  000B3A  C0A8  FFDA         	movff	lcdRuntime@lcd+1,fsr2h
  1119  000B3E  0E00               	movlw	0
  1120  000B40  6EDF               	movwf	indf2,c
  1121  000B42  0012               	return	
  1122  000B44                     __end_of_lcdRuntime:
  1123                           	opt stack 0
  1124                           tosu	equ	0xFFF
  1125                           tosh	equ	0xFFE
  1126                           tosl	equ	0xFFD
  1127                           pclath	equ	0xFFA
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           prodh	equ	0xFF4
  1133                           prodl	equ	0xFF3
  1134                           intcon	equ	0xFF2
  1135                           intcon2	equ	0xFF1
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           postdec1	equ	0xFE5
  1139                           fsr1l	equ	0xFE1
  1140                           indf2	equ	0xFDF
  1141                           postinc2	equ	0xFDE
  1142                           postdec2	equ	0xFDD
  1143                           fsr2h	equ	0xFDA
  1144                           fsr2l	equ	0xFD9
  1145                           status	equ	0xFD8
  1146                           
  1147 ;; *************** function _WriteDataXLCD *****************
  1148 ;; Defined at:
  1149 ;;		line 364 in file "xlcd_mod.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;  data            1    wreg     unsigned char 
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  data            1   42[COMRAM] unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  1    wreg      void 
  1156 ;; Registers used:
  1157 ;;		wreg, status,2, status,0, cstack
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1163 ;;      Params:         0       0       0       0       0       0       0       0       0
  1164 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1166 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1167 ;;Total ram usage:        1 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; Hardware stack levels required when called:    4
  1170 ;; This function calls:
  1171 ;;		_DelayFor18TCY
  1172 ;; This function is called by:
  1173 ;;		_lcdRuntime
  1174 ;;		_putrsXLCD
  1175 ;;		_putsXLCD
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179                           	psect	text4
  1180  001186                     __ptext4:
  1181                           	opt stack 0
  1182  001186                     _WriteDataXLCD:
  1183                           	opt stack 24
  1184                           
  1185                           ;incstack = 0
  1186                           ;WriteDataXLCD@data stored from wreg
  1187  001186  6E2B               	movwf	WriteDataXLCD@data,c
  1188                           
  1189                           ;xlcd_mod.c: 383: TRISD &= 0xf0;
  1190  001188  0EF0               	movlw	240
  1191  00118A  1695               	andwf	3989,f,c	;volatile
  1192                           
  1193                           ;xlcd_mod.c: 384: PORTD &= 0xf0;
  1194  00118C  0EF0               	movlw	240
  1195  00118E  1683               	andwf	3971,f,c	;volatile
  1196                           
  1197                           ;xlcd_mod.c: 385: PORTD |= ((data >> 4)&0x0f);
  1198  001190  382B               	swapf	WriteDataXLCD@data,w,c
  1199  001192  0B0F               	andlw	15
  1200  001194  0B0F               	andlw	15
  1201  001196  1283               	iorwf	3971,f,c	;volatile
  1202                           
  1203                           ;xlcd_mod.c: 387: LATDbits.LATD6 = 1;
  1204  001198  8C8C               	bsf	3980,6,c	;volatile
  1205                           
  1206                           ;xlcd_mod.c: 388: LATDbits.LATD5 = 0;
  1207  00119A  9A8C               	bcf	3980,5,c	;volatile
  1208                           
  1209                           ;xlcd_mod.c: 389: DelayFor18TCY();
  1210  00119C  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  1211                           
  1212                           ;xlcd_mod.c: 390: LATDbits.LATD4 = 1;
  1213  0011A0  888C               	bsf	3980,4,c	;volatile
  1214                           
  1215                           ;xlcd_mod.c: 391: DelayFor18TCY();
  1216  0011A2  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  1217                           
  1218                           ;xlcd_mod.c: 392: LATDbits.LATD4 = 0;
  1219  0011A6  988C               	bcf	3980,4,c	;volatile
  1220                           
  1221                           ;xlcd_mod.c: 397: PORTD &= 0xf0;
  1222  0011A8  0EF0               	movlw	240
  1223  0011AA  1683               	andwf	3971,f,c	;volatile
  1224                           
  1225                           ;xlcd_mod.c: 398: PORTD |= (data & 0x0f);
  1226  0011AC  502B               	movf	WriteDataXLCD@data,w,c
  1227  0011AE  0B0F               	andlw	15
  1228  0011B0  1283               	iorwf	3971,f,c	;volatile
  1229                           
  1230                           ;xlcd_mod.c: 400: DelayFor18TCY();
  1231  0011B2  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  1232                           
  1233                           ;xlcd_mod.c: 401: LATDbits.LATD4 = 1;
  1234  0011B6  888C               	bsf	3980,4,c	;volatile
  1235                           
  1236                           ;xlcd_mod.c: 402: DelayFor18TCY();
  1237  0011B8  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  1238                           
  1239                           ;xlcd_mod.c: 403: LATDbits.LATD4 = 0;
  1240  0011BC  988C               	bcf	3980,4,c	;volatile
  1241                           
  1242                           ;xlcd_mod.c: 407: TRISD |= 0x0f;
  1243  0011BE  0E0F               	movlw	15
  1244  0011C0  1295               	iorwf	3989,f,c	;volatile
  1245  0011C2  0012               	return	
  1246  0011C4                     __end_of_WriteDataXLCD:
  1247                           	opt stack 0
  1248                           tosu	equ	0xFFF
  1249                           tosh	equ	0xFFE
  1250                           tosl	equ	0xFFD
  1251                           pclath	equ	0xFFA
  1252                           tblptru	equ	0xFF8
  1253                           tblptrh	equ	0xFF7
  1254                           tblptrl	equ	0xFF6
  1255                           tablat	equ	0xFF5
  1256                           prodh	equ	0xFF4
  1257                           prodl	equ	0xFF3
  1258                           intcon	equ	0xFF2
  1259                           intcon2	equ	0xFF1
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1l	equ	0xFE1
  1264                           indf2	equ	0xFDF
  1265                           postinc2	equ	0xFDE
  1266                           postdec2	equ	0xFDD
  1267                           fsr2h	equ	0xFDA
  1268                           fsr2l	equ	0xFD9
  1269                           status	equ	0xFD8
  1270                           
  1271 ;; *************** function _OnRenderMenu1 *****************
  1272 ;; Defined at:
  1273 ;;		line 23 in file "main.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;		None
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;		None
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  1    wreg      void 
  1280 ;; Registers used:
  1281 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1287 ;;      Params:         0       0       0       0       0       0       0       0       0
  1288 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1289 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1290 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1291 ;;Total ram usage:        0 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; Hardware stack levels required when called:    5
  1294 ;; This function calls:
  1295 ;;		_lcdWrite
  1296 ;;		_sprintf
  1297 ;; This function is called by:
  1298 ;;		_menuRuntime
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           	psect	text5
  1303  000F9E                     __ptext5:
  1304                           	opt stack 0
  1305  000F9E                     _OnRenderMenu1:
  1306                           	opt stack 24
  1307                           
  1308                           ;main.c: 25: sprintf(buffer, "%4d %4d %4d\0", cord.x, cord.y, cord.z);
  1309                           
  1310                           ;incstack = 0
  1311  000F9E  0E81               	movlw	low _buffer
  1312  000FA0  0100               	movlb	0	; () banked
  1313  000FA2  6FAE               	movwf	sprintf@sp& (0+255),b
  1314  000FA4  0E00               	movlw	high _buffer
  1315  000FA6  6FAF               	movwf	(sprintf@sp+1)& (0+255),b
  1316  000FA8  0E0B               	movlw	low STR_1
  1317  000FAA  6FB0               	movwf	sprintf@f& (0+255),b
  1318  000FAC  0E08               	movlw	high STR_1
  1319  000FAE  6FB1               	movwf	(sprintf@f+1)& (0+255),b
  1320  000FB0  C0A1  F0B2         	movff	_cord,?_sprintf+4
  1321  000FB4  C0A2  F0B3         	movff	_cord+1,?_sprintf+5
  1322  000FB8  C0A3  F0B4         	movff	_cord+2,?_sprintf+6
  1323  000FBC  C0A4  F0B5         	movff	_cord+3,?_sprintf+7
  1324  000FC0  C0A5  F0B6         	movff	_cord+4,?_sprintf+8
  1325  000FC4  C0A6  F0B7         	movff	_cord+5,?_sprintf+9
  1326  000FC8  EC0D  F004         	call	_sprintf	;wreg free
  1327                           
  1328                           ;main.c: 26: lcdWrite(&lcd, 2, 1, buffer);
  1329  000FCC  0E60               	movlw	low _lcd
  1330  000FCE  6E29               	movwf	lcdWrite@lcd,c
  1331  000FD0  0E00               	movlw	high _lcd
  1332  000FD2  6E2A               	movwf	lcdWrite@lcd+1,c
  1333  000FD4  0E02               	movlw	2
  1334  000FD6  6E2B               	movwf	lcdWrite@row,c
  1335  000FD8  0E01               	movlw	1
  1336  000FDA  6E2C               	movwf	lcdWrite@col,c
  1337  000FDC  0E81               	movlw	low _buffer
  1338  000FDE  6E2D               	movwf	lcdWrite@string,c
  1339  000FE0  0E00               	movlw	high _buffer
  1340  000FE2  6E2E               	movwf	lcdWrite@string+1,c
  1341  000FE4  ECA2  F005         	call	_lcdWrite	;wreg free
  1342  000FE8  0012               	return		;funcret
  1343  000FEA                     __end_of_OnRenderMenu1:
  1344                           	opt stack 0
  1345                           tosu	equ	0xFFF
  1346                           tosh	equ	0xFFE
  1347                           tosl	equ	0xFFD
  1348                           pclath	equ	0xFFA
  1349                           tblptru	equ	0xFF8
  1350                           tblptrh	equ	0xFF7
  1351                           tblptrl	equ	0xFF6
  1352                           tablat	equ	0xFF5
  1353                           prodh	equ	0xFF4
  1354                           prodl	equ	0xFF3
  1355                           intcon	equ	0xFF2
  1356                           intcon2	equ	0xFF1
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postdec1	equ	0xFE5
  1360                           fsr1l	equ	0xFE1
  1361                           indf2	equ	0xFDF
  1362                           postinc2	equ	0xFDE
  1363                           postdec2	equ	0xFDD
  1364                           fsr2h	equ	0xFDA
  1365                           fsr2l	equ	0xFD9
  1366                           status	equ	0xFD8
  1367                           
  1368 ;; *************** function _OnRenderMenu2 *****************
  1369 ;; Defined at:
  1370 ;;		line 40 in file "main.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      void 
  1377 ;; Registers used:
  1378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1384 ;;      Params:         0       0       0       0       0       0       0       0       0
  1385 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1387 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1388 ;;Total ram usage:        0 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    5
  1391 ;; This function calls:
  1392 ;;		_lcdWrite
  1393 ;;		_sprintf
  1394 ;; This function is called by:
  1395 ;;		_menuRuntime
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	text6
  1400  000FEA                     __ptext6:
  1401                           	opt stack 0
  1402  000FEA                     _OnRenderMenu2:
  1403                           	opt stack 24
  1404                           
  1405                           ;main.c: 42: sprintf(buffer, "%4d %4d %4d\0", cord.x, cord.y, cord.z);
  1406                           
  1407                           ;incstack = 0
  1408  000FEA  0E81               	movlw	low _buffer
  1409  000FEC  0100               	movlb	0	; () banked
  1410  000FEE  6FAE               	movwf	sprintf@sp& (0+255),b
  1411  000FF0  0E00               	movlw	high _buffer
  1412  000FF2  6FAF               	movwf	(sprintf@sp+1)& (0+255),b
  1413  000FF4  0E0B               	movlw	low STR_1
  1414  000FF6  6FB0               	movwf	sprintf@f& (0+255),b
  1415  000FF8  0E08               	movlw	high STR_1
  1416  000FFA  6FB1               	movwf	(sprintf@f+1)& (0+255),b
  1417  000FFC  C0A1  F0B2         	movff	_cord,?_sprintf+4
  1418  001000  C0A2  F0B3         	movff	_cord+1,?_sprintf+5
  1419  001004  C0A3  F0B4         	movff	_cord+2,?_sprintf+6
  1420  001008  C0A4  F0B5         	movff	_cord+3,?_sprintf+7
  1421  00100C  C0A5  F0B6         	movff	_cord+4,?_sprintf+8
  1422  001010  C0A6  F0B7         	movff	_cord+5,?_sprintf+9
  1423  001014  EC0D  F004         	call	_sprintf	;wreg free
  1424                           
  1425                           ;main.c: 43: lcdWrite(&lcd, 2, 1, buffer);
  1426  001018  0E60               	movlw	low _lcd
  1427  00101A  6E29               	movwf	lcdWrite@lcd,c
  1428  00101C  0E00               	movlw	high _lcd
  1429  00101E  6E2A               	movwf	lcdWrite@lcd+1,c
  1430  001020  0E02               	movlw	2
  1431  001022  6E2B               	movwf	lcdWrite@row,c
  1432  001024  0E01               	movlw	1
  1433  001026  6E2C               	movwf	lcdWrite@col,c
  1434  001028  0E81               	movlw	low _buffer
  1435  00102A  6E2D               	movwf	lcdWrite@string,c
  1436  00102C  0E00               	movlw	high _buffer
  1437  00102E  6E2E               	movwf	lcdWrite@string+1,c
  1438  001030  ECA2  F005         	call	_lcdWrite	;wreg free
  1439  001034  0012               	return		;funcret
  1440  001036                     __end_of_OnRenderMenu2:
  1441                           	opt stack 0
  1442                           tosu	equ	0xFFF
  1443                           tosh	equ	0xFFE
  1444                           tosl	equ	0xFFD
  1445                           pclath	equ	0xFFA
  1446                           tblptru	equ	0xFF8
  1447                           tblptrh	equ	0xFF7
  1448                           tblptrl	equ	0xFF6
  1449                           tablat	equ	0xFF5
  1450                           prodh	equ	0xFF4
  1451                           prodl	equ	0xFF3
  1452                           intcon	equ	0xFF2
  1453                           intcon2	equ	0xFF1
  1454                           postinc0	equ	0xFEE
  1455                           wreg	equ	0xFE8
  1456                           postdec1	equ	0xFE5
  1457                           fsr1l	equ	0xFE1
  1458                           indf2	equ	0xFDF
  1459                           postinc2	equ	0xFDE
  1460                           postdec2	equ	0xFDD
  1461                           fsr2h	equ	0xFDA
  1462                           fsr2l	equ	0xFD9
  1463                           status	equ	0xFD8
  1464                           
  1465 ;; *************** function _sprintf *****************
  1466 ;; Defined at:
  1467 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;  sp              2    7[BANK0 ] PTR unsigned char 
  1470 ;;		 -> buffer(32), 
  1471 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  1472 ;;		 -> STR_2(13), STR_1(13), 
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  tmpval          4    0        struct .
  1475 ;;  cp              3    0        PTR const unsigned char 
  1476 ;;  width           2   27[BANK0 ] int 
  1477 ;;  val             2   25[BANK0 ] unsigned int 
  1478 ;;  ap              2   21[BANK0 ] PTR void [1]
  1479 ;;		 -> ?_sprintf(2), 
  1480 ;;  len             2    0        unsigned int 
  1481 ;;  c               1   29[BANK0 ] char 
  1482 ;;  flag            1   24[BANK0 ] unsigned char 
  1483 ;;  prec            1   23[BANK0 ] char 
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  2    7[BANK0 ] int 
  1486 ;; Registers used:
  1487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1493 ;;      Params:         0      10       0       0       0       0       0       0       0
  1494 ;;      Locals:         0       9       0       0       0       0       0       0       0
  1495 ;;      Temps:          0       4       0       0       0       0       0       0       0
  1496 ;;      Totals:         0      23       0       0       0       0       0       0       0
  1497 ;;Total ram usage:       23 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; Hardware stack levels required when called:    4
  1500 ;; This function calls:
  1501 ;;		___lwdiv
  1502 ;;		___lwmod
  1503 ;;		___wmul
  1504 ;;		_isdigit
  1505 ;; This function is called by:
  1506 ;;		_OnRenderMenu1
  1507 ;;		_OnRenderMenu2
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           	psect	text7
  1512  00081A                     __ptext7:
  1513                           	opt stack 0
  1514  00081A                     _sprintf:
  1515                           	opt stack 24
  1516                           
  1517                           ;doprnt.c: 494: va_list ap;
  1518                           ;doprnt.c: 499: signed char c;
  1519                           ;doprnt.c: 501: int width;
  1520                           ;doprnt.c: 506: signed char prec;
  1521                           ;doprnt.c: 508: unsigned char flag;
  1522                           ;doprnt.c: 523: union {
  1523                           ;doprnt.c: 524: unsigned long vd;
  1524                           ;doprnt.c: 525: double integ;
  1525                           ;doprnt.c: 526: } tmpval;
  1526                           ;doprnt.c: 528: unsigned int val;
  1527                           ;doprnt.c: 529: unsigned len;
  1528                           ;doprnt.c: 530: const char * cp;
  1529                           ;doprnt.c: 533: *ap = __va_start();
  1530                           
  1531                           ;incstack = 0
  1532  00081A  0EB2               	movlw	low (?_sprintf+4)
  1533  00081C  0100               	movlb	0	; () banked
  1534  00081E  6FBC               	movwf	sprintf@ap& (0+255),b
  1535  000820  0E00               	movlw	high (?_sprintf+4)
  1536  000822  6FBD               	movwf	(sprintf@ap+1)& (0+255),b
  1537                           
  1538                           ;doprnt.c: 536: while(c = *f++) {
  1539  000824  D108               	goto	u2050
  1540  000826                     
  1541                           ; BSR set to: 0
  1542                           ;doprnt.c: 538: if(c != '%')
  1543                           
  1544                           ; BSR set to: 0
  1545  000826  0E25               	movlw	37
  1546  000828  19C4               	xorwf	sprintf@c& (0+255),w,b
  1547  00082A  B4D8               	btfsc	status,2,c
  1548  00082C  D009               	goto	l503
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;doprnt.c: 540: {
  1552                           ;doprnt.c: 541: ((*sp++ = (c)));
  1553  00082E  C0AE  FFD9         	movff	sprintf@sp,fsr2l
  1554  000832  C0AF  FFDA         	movff	sprintf@sp+1,fsr2h
  1555  000836  C0C4  FFDF         	movff	sprintf@c,indf2
  1556                           
  1557                           ; BSR set to: 0
  1558  00083A  4BAE               	infsnz	sprintf@sp& (0+255),f,b
  1559  00083C  2BAF               	incf	(sprintf@sp+1)& (0+255),f,b
  1560                           
  1561                           ;doprnt.c: 542: continue;
  1562  00083E  D0FB               	goto	u2050
  1563  000840                     l503:
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;doprnt.c: 543: }
  1567                           ;doprnt.c: 546: width = 0;
  1568                           
  1569                           ; BSR set to: 0
  1570  000840  0E00               	movlw	0
  1571  000842  6FC3               	movwf	(sprintf@width+1)& (0+255),b
  1572  000844  0E00               	movlw	0
  1573  000846  6FC2               	movwf	sprintf@width& (0+255),b
  1574                           
  1575                           ;doprnt.c: 548: flag = 0;
  1576  000848  0E00               	movlw	0
  1577  00084A  6FBF               	movwf	sprintf@flag& (0+255),b
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1581  00084C  C0B0  FFF6         	movff	sprintf@f,tblptrl
  1582  000850  C0B1  FFF7         	movff	sprintf@f+1,tblptrh
  1583  000854                     	if	0	;tblptru may be non-zero
  1584  000854                     	endif
  1585  000854                     	if	0	;tblptru may be non-zero
  1586  000854                     	endif
  1587  000854  0008               	tblrd		*
  1588  000856  50F5               	movf	tablat,w,c
  1589  000858  EC7E  F009         	call	_isdigit
  1590  00085C  A0D8               	btfss	status,0,c
  1591  00085E  D034               	goto	l507
  1592                           
  1593                           ;doprnt.c: 598: width = 0;
  1594  000860  0E00               	movlw	0
  1595  000862  0100               	movlb	0	; () banked
  1596  000864  6FC3               	movwf	(sprintf@width+1)& (0+255),b
  1597  000866  0E00               	movlw	0
  1598  000868  6FC2               	movwf	sprintf@width& (0+255),b
  1599  00086A                     
  1600                           ;doprnt.c: 600: width *= 10;
  1601                           
  1602                           ; BSR set to: 0
  1603  00086A  C0C2  F029         	movff	sprintf@width,___wmul@multiplier
  1604  00086E  C0C3  F02A         	movff	sprintf@width+1,___wmul@multiplier+1
  1605  000872  0E00               	movlw	0
  1606  000874  6E2C               	movwf	___wmul@multiplicand+1,c
  1607  000876  0E0A               	movlw	10
  1608  000878  6E2B               	movwf	___wmul@multiplicand,c
  1609  00087A  EC49  F009         	call	___wmul	;wreg free
  1610  00087E  C029  F0C2         	movff	?___wmul,sprintf@width
  1611  000882  C02A  F0C3         	movff	?___wmul+1,sprintf@width+1
  1612                           
  1613                           ;doprnt.c: 601: width += *f++ - '0';
  1614  000886  0ED0               	movlw	208
  1615  000888  0100               	movlb	0	; () banked
  1616  00088A  6FB8               	movwf	??_sprintf& (0+255),b
  1617  00088C  0EFF               	movlw	255
  1618  00088E  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  1619  000890  C0B0  FFF6         	movff	sprintf@f,tblptrl
  1620  000894  C0B1  FFF7         	movff	sprintf@f+1,tblptrh
  1621  000898                     	if	0	;tblptru may be non-zero
  1622  000898                     	endif
  1623  000898                     	if	0	;tblptru may be non-zero
  1624  000898                     	endif
  1625  000898  0008               	tblrd		*
  1626  00089A  50F5               	movf	tablat,w,c
  1627  00089C  6FBA               	movwf	(??_sprintf+2)& (0+255),b
  1628  00089E  6BBB               	clrf	(??_sprintf+3)& (0+255),b
  1629  0008A0  51B8               	movf	??_sprintf& (0+255),w,b
  1630  0008A2  27BA               	addwf	(??_sprintf+2)& (0+255),f,b
  1631  0008A4  51B9               	movf	(??_sprintf+1)& (0+255),w,b
  1632  0008A6  23BB               	addwfc	(??_sprintf+3)& (0+255),f,b
  1633  0008A8  51BA               	movf	(??_sprintf+2)& (0+255),w,b
  1634  0008AA  27C2               	addwf	sprintf@width& (0+255),f,b
  1635  0008AC  51BB               	movf	(??_sprintf+3)& (0+255),w,b
  1636  0008AE  23C3               	addwfc	(sprintf@width+1)& (0+255),f,b
  1637                           
  1638                           ; BSR set to: 0
  1639  0008B0  4BB0               	infsnz	sprintf@f& (0+255),f,b
  1640  0008B2  2BB1               	incf	(sprintf@f+1)& (0+255),f,b
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1644  0008B4  C0B0  FFF6         	movff	sprintf@f,tblptrl
  1645  0008B8  C0B1  FFF7         	movff	sprintf@f+1,tblptrh
  1646  0008BC                     	if	0	;tblptru may be non-zero
  1647  0008BC                     	endif
  1648  0008BC                     	if	0	;tblptru may be non-zero
  1649  0008BC                     	endif
  1650  0008BC  0008               	tblrd		*
  1651  0008BE  50F5               	movf	tablat,w,c
  1652  0008C0  EC7E  F009         	call	_isdigit
  1653  0008C4  B0D8               	btfsc	status,0,c
  1654  0008C6  D7D1               	goto	l505
  1655  0008C8                     l507:
  1656  0008C8  C0B0  FFF6         	movff	sprintf@f,tblptrl
  1657  0008CC  C0B1  FFF7         	movff	sprintf@f+1,tblptrh
  1658  0008D0  0100               	movlb	0	; () banked
  1659  0008D2  4BB0               	infsnz	sprintf@f& (0+255),f,b
  1660  0008D4  2BB1               	incf	(sprintf@f+1)& (0+255),f,b
  1661  0008D6                     	if	0	;tblptru may be non-zero
  1662  0008D6                     	endif
  1663  0008D6                     	if	0	;tblptru may be non-zero
  1664  0008D6                     	endif
  1665  0008D6  0008               	tblrd		*
  1666  0008D8  CFF5 F0C4          	movff	tablat,sprintf@c
  1667  0008DC  51C4               	movf	sprintf@c& (0+255),w,b
  1668                           
  1669                           ; Switch size 1, requested type "space"
  1670                           ; Number of cases is 3, Range of values is 0 to 105
  1671                           ; switch strategies available:
  1672                           ; Name         Instructions Cycles
  1673                           ; simple_byte           10     6 (average)
  1674                           ;	Chosen strategy is simple_byte
  1675  0008DE  0A00               	xorlw	0	; case 0
  1676  0008E0  B4D8               	btfsc	status,2,c
  1677  0008E2  D0B6               	goto	u2060
  1678  0008E4  0A64               	xorlw	100	; case 100
  1679  0008E6  B4D8               	btfsc	status,2,c
  1680  0008E8  D003               	goto	l512
  1681  0008EA  0A0D               	xorlw	13	; case 105
  1682  0008EC  A4D8               	btfss	status,2,c
  1683  0008EE  D0A3               	goto	u2050
  1684  0008F0                     l512:
  1685                           
  1686                           ;doprnt.c: 1253: {
  1687                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1688                           
  1689                           ; BSR set to: 0
  1690  0008F0  C0BC  FFD9         	movff	sprintf@ap,fsr2l
  1691  0008F4  C0BD  FFDA         	movff	sprintf@ap+1,fsr2h
  1692  0008F8  CFDE F0C0          	movff	postinc2,sprintf@val
  1693  0008FC  CFDD F0C1          	movff	postdec2,sprintf@val+1
  1694  000900  0E02               	movlw	2
  1695  000902  0100               	movlb	0	; () banked
  1696  000904  27BC               	addwf	sprintf@ap& (0+255),f,b
  1697  000906  0E00               	movlw	0
  1698  000908  23BD               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;doprnt.c: 1261: if((int)val < 0) {
  1702  00090A  AFC1               	btfss	(sprintf@val+1)& (0+255),7,b
  1703  00090C  D006               	goto	l514
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;doprnt.c: 1262: flag |= 0x03;
  1707  00090E  0E03               	movlw	3
  1708  000910  13BF               	iorwf	sprintf@flag& (0+255),f,b
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;doprnt.c: 1263: val = -val;
  1712  000912  6DC0               	negf	sprintf@val& (0+255),b
  1713  000914  1FC1               	comf	(sprintf@val+1)& (0+255),f,b
  1714  000916  B0D8               	btfsc	status,0,c
  1715  000918  2BC1               	incf	(sprintf@val+1)& (0+255),f,b
  1716  00091A                     l514:
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;doprnt.c: 1264: }
  1720                           ;doprnt.c: 1266: }
  1721                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1722                           
  1723                           ; BSR set to: 0
  1724  00091A  0E01               	movlw	1
  1725  00091C  6FC4               	movwf	sprintf@c& (0+255),b
  1726  00091E                     l2883:
  1727                           
  1728                           ; BSR set to: 0
  1729  00091E  0E05               	movlw	5
  1730  000920  19C4               	xorwf	sprintf@c& (0+255),w,b
  1731  000922  B4D8               	btfsc	status,2,c
  1732  000924  D012               	goto	u1980
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;doprnt.c: 1306: if(val < dpowers[c])
  1736                           
  1737                           ; BSR set to: 0
  1738                           
  1739                           ; BSR set to: 0
  1740  000926  51C4               	movf	sprintf@c& (0+255),w,b
  1741  000928  0D02               	mullw	2
  1742  00092A  0E01               	movlw	low _dpowers
  1743  00092C  24F3               	addwf	prodl,w,c
  1744  00092E  6EF6               	movwf	tblptrl,c
  1745  000930  0E08               	movlw	high _dpowers
  1746  000932  20F4               	addwfc	prodh,w,c
  1747  000934  6EF7               	movwf	tblptrh,c
  1748  000936                     	if	0	;There are less than 3 active tblptr bytes
  1749  000936                     	endif
  1750  000936  0009               	tblrd		*+
  1751  000938  50F5               	movf	tablat,w,c
  1752  00093A  5DC0               	subwf	sprintf@val& (0+255),w,b
  1753  00093C  0009               	tblrd		*+
  1754  00093E  50F5               	movf	tablat,w,c
  1755  000940  59C1               	subwfb	(sprintf@val+1)& (0+255),w,b
  1756  000942  A0D8               	btfss	status,0,c
  1757  000944  D002               	goto	u1980
  1758                           
  1759                           ; BSR set to: 0
  1760                           
  1761                           ; BSR set to: 0
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;doprnt.c: 1307: break;
  1765  000946  2BC4               	incf	sprintf@c& (0+255),f,b
  1766  000948  D7EA               	goto	l2883
  1767  00094A                     u1980:
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1771                           
  1772                           ; BSR set to: 0
  1773  00094A  51C2               	movf	sprintf@width& (0+255),w,b
  1774  00094C  11C3               	iorwf	(sprintf@width+1)& (0+255),w,b
  1775  00094E  B4D8               	btfsc	status,2,c
  1776  000950  D009               	goto	l518
  1777                           
  1778                           ; BSR set to: 0
  1779  000952  C0BF  F0B8         	movff	sprintf@flag,??_sprintf
  1780  000956  0E03               	movlw	3
  1781  000958  17B8               	andwf	??_sprintf& (0+255),f,b
  1782  00095A  B4D8               	btfsc	status,2,c
  1783  00095C  D003               	goto	l518
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;doprnt.c: 1346: width--;
  1787  00095E  07C2               	decf	sprintf@width& (0+255),f,b
  1788  000960  A0D8               	btfss	status,0,c
  1789  000962  07C3               	decf	(sprintf@width+1)& (0+255),f,b
  1790  000964                     l518:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;doprnt.c: 1381: if(width > c)
  1794                           
  1795                           ; BSR set to: 0
  1796  000964  0E80               	movlw	128
  1797  000966  BFC4               	btfsc	sprintf@c& (0+255),7,b
  1798  000968  0E7F               	movlw	127
  1799  00096A  6FB8               	movwf	??_sprintf& (0+255),b
  1800  00096C  51C2               	movf	sprintf@width& (0+255),w,b
  1801  00096E  5DC4               	subwf	sprintf@c& (0+255),w,b
  1802  000970  51C3               	movf	(sprintf@width+1)& (0+255),w,b
  1803  000972  0A80               	xorlw	128
  1804  000974  59B8               	subwfb	??_sprintf& (0+255),w,b
  1805  000976  B0D8               	btfsc	status,0,c
  1806  000978  D007               	goto	l519
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;doprnt.c: 1382: width -= c;
  1810  00097A  51C4               	movf	sprintf@c& (0+255),w,b
  1811  00097C  5FC2               	subwf	sprintf@width& (0+255),f,b
  1812  00097E  0E00               	movlw	0
  1813  000980  BFC4               	btfsc	sprintf@c& (0+255),7,b
  1814  000982  0EFF               	movlw	255
  1815  000984  5BC3               	subwfb	(sprintf@width+1)& (0+255),f,b
  1816  000986  D004               	goto	l520
  1817  000988                     l519:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;doprnt.c: 1383: else
  1821                           ;doprnt.c: 1384: width = 0;
  1822                           
  1823                           ; BSR set to: 0
  1824  000988  0E00               	movlw	0
  1825  00098A  6FC3               	movwf	(sprintf@width+1)& (0+255),b
  1826  00098C  0E00               	movlw	0
  1827  00098E  6FC2               	movwf	sprintf@width& (0+255),b
  1828  000990                     l520:
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;doprnt.c: 1422: {
  1832                           ;doprnt.c: 1424: if(width
  1833                           ;doprnt.c: 1428: )
  1834                           
  1835                           ; BSR set to: 0
  1836  000990  51C2               	movf	sprintf@width& (0+255),w,b
  1837  000992  11C3               	iorwf	(sprintf@width+1)& (0+255),w,b
  1838  000994  B4D8               	btfsc	status,2,c
  1839  000996  D00F               	goto	u2030
  1840  000998                     u2020:
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1844                           
  1845                           ; BSR set to: 0
  1846                           
  1847                           ;doprnt.c: 1429: do
  1848  000998  C0AE  FFD9         	movff	sprintf@sp,fsr2l
  1849  00099C  C0AF  FFDA         	movff	sprintf@sp+1,fsr2h
  1850  0009A0  0E20               	movlw	32
  1851  0009A2  6EDF               	movwf	indf2,c
  1852                           
  1853                           ; BSR set to: 0
  1854  0009A4  4BAE               	infsnz	sprintf@sp& (0+255),f,b
  1855  0009A6  2BAF               	incf	(sprintf@sp+1)& (0+255),f,b
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;doprnt.c: 1431: while(--width);
  1859  0009A8  07C2               	decf	sprintf@width& (0+255),f,b
  1860  0009AA  A0D8               	btfss	status,0,c
  1861  0009AC  07C3               	decf	(sprintf@width+1)& (0+255),f,b
  1862  0009AE  51C2               	movf	sprintf@width& (0+255),w,b
  1863  0009B0  11C3               	iorwf	(sprintf@width+1)& (0+255),w,b
  1864  0009B2  A4D8               	btfss	status,2,c
  1865  0009B4  D7F1               	goto	u2020
  1866  0009B6                     u2030:
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;doprnt.c: 1438: if(flag & 0x03)
  1870                           
  1871                           ; BSR set to: 0
  1872                           
  1873                           ; BSR set to: 0
  1874  0009B6  C0BF  F0B8         	movff	sprintf@flag,??_sprintf
  1875  0009BA  0E03               	movlw	3
  1876  0009BC  17B8               	andwf	??_sprintf& (0+255),f,b
  1877  0009BE  B4D8               	btfsc	status,2,c
  1878  0009C0  D008               	goto	l524
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1882  0009C2  C0AE  FFD9         	movff	sprintf@sp,fsr2l
  1883  0009C6  C0AF  FFDA         	movff	sprintf@sp+1,fsr2h
  1884  0009CA  0E2D               	movlw	45
  1885  0009CC  6EDF               	movwf	indf2,c
  1886                           
  1887                           ; BSR set to: 0
  1888  0009CE  4BAE               	infsnz	sprintf@sp& (0+255),f,b
  1889  0009D0  2BAF               	incf	(sprintf@sp+1)& (0+255),f,b
  1890  0009D2                     l524:
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;doprnt.c: 1469: }
  1894                           ;doprnt.c: 1472: prec = c;
  1895                           
  1896                           ; BSR set to: 0
  1897  0009D2  C0C4  F0BE         	movff	sprintf@c,sprintf@prec
  1898                           
  1899                           ;doprnt.c: 1474: while(prec--) {
  1900  0009D6  D02B               	goto	l525
  1901  0009D8                     
  1902                           ; BSR set to: 0
  1903                           ;doprnt.c: 1478: {
  1904                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1905                           
  1906                           ; BSR set to: 0
  1907  0009D8  51BE               	movf	sprintf@prec& (0+255),w,b
  1908  0009DA  0D02               	mullw	2
  1909  0009DC  0E01               	movlw	low _dpowers
  1910  0009DE  24F3               	addwf	prodl,w,c
  1911  0009E0  6EF6               	movwf	tblptrl,c
  1912  0009E2  0E08               	movlw	high _dpowers
  1913  0009E4  20F4               	addwfc	prodh,w,c
  1914  0009E6  6EF7               	movwf	tblptrh,c
  1915  0009E8                     	if	0	;There are less than 3 active tblptr bytes
  1916  0009E8                     	endif
  1917  0009E8  0009               	tblrd		*+
  1918  0009EA  CFF5 F02B          	movff	tablat,___lwdiv@divisor
  1919  0009EE  000A               	tblrd		*-
  1920  0009F0  CFF5 F02C          	movff	tablat,___lwdiv@divisor+1
  1921  0009F4  C0C0  F029         	movff	sprintf@val,___lwdiv@dividend
  1922  0009F8  C0C1  F02A         	movff	sprintf@val+1,___lwdiv@dividend+1
  1923  0009FC  EC7C  F007         	call	___lwdiv	;wreg free
  1924  000A00  C029  F0AA         	movff	?___lwdiv,___lwmod@dividend
  1925  000A04  C02A  F0AB         	movff	?___lwdiv+1,___lwmod@dividend+1
  1926  000A08  0E00               	movlw	0
  1927  000A0A  0100               	movlb	0	; () banked
  1928  000A0C  6FAD               	movwf	(___lwmod@divisor+1)& (0+255),b
  1929  000A0E  0E0A               	movlw	10
  1930  000A10  6FAC               	movwf	___lwmod@divisor& (0+255),b
  1931  000A12  EC60  F008         	call	___lwmod	;wreg free
  1932  000A16  0100               	movlb	0	; () banked
  1933  000A18  51AA               	movf	?___lwmod& (0+255),w,b
  1934  000A1A  0F30               	addlw	48
  1935  000A1C  6FC4               	movwf	sprintf@c& (0+255),b
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;doprnt.c: 1523: }
  1939                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1940  000A1E  C0AE  FFD9         	movff	sprintf@sp,fsr2l
  1941  000A22  C0AF  FFDA         	movff	sprintf@sp+1,fsr2h
  1942  000A26  C0C4  FFDF         	movff	sprintf@c,indf2
  1943                           
  1944                           ; BSR set to: 0
  1945  000A2A  4BAE               	infsnz	sprintf@sp& (0+255),f,b
  1946  000A2C  2BAF               	incf	(sprintf@sp+1)& (0+255),f,b
  1947  000A2E                     l525:
  1948                           
  1949                           ; BSR set to: 0
  1950                           
  1951                           ; BSR set to: 0
  1952  000A2E  07BE               	decf	sprintf@prec& (0+255),f,b
  1953  000A30  29BE               	incf	sprintf@prec& (0+255),w,b
  1954  000A32  A4D8               	btfss	status,2,c
  1955  000A34  D7D1               	goto	l526
  1956  000A36                     u2050:
  1957                           
  1958                           ; BSR set to: 0
  1959                           
  1960                           ; BSR set to: 0
  1961  000A36  C0B0  FFF6         	movff	sprintf@f,tblptrl
  1962  000A3A  C0B1  FFF7         	movff	sprintf@f+1,tblptrh
  1963  000A3E  0100               	movlb	0	; () banked
  1964  000A40  4BB0               	infsnz	sprintf@f& (0+255),f,b
  1965  000A42  2BB1               	incf	(sprintf@f+1)& (0+255),f,b
  1966  000A44                     	if	0	;tblptru may be non-zero
  1967  000A44                     	endif
  1968  000A44                     	if	0	;tblptru may be non-zero
  1969  000A44                     	endif
  1970  000A44  0008               	tblrd		*
  1971  000A46  CFF5 F0C4          	movff	tablat,sprintf@c
  1972  000A4A  51C4               	movf	sprintf@c& (0+255),w,b
  1973  000A4C  A4D8               	btfss	status,2,c
  1974  000A4E  D6EB               	goto	l502
  1975  000A50                     u2060:
  1976                           
  1977                           ;doprnt.c: 1538: *sp = 0;
  1978                           
  1979                           ; BSR set to: 0
  1980                           
  1981                           ;doprnt.c: 1525: }
  1982                           ;doprnt.c: 1533: }
  1983                           ;doprnt.c: 1535: alldone:
  1984                           
  1985                           ; BSR set to: 0
  1986  000A50  C0AE  FFD9         	movff	sprintf@sp,fsr2l
  1987  000A54  C0AF  FFDA         	movff	sprintf@sp+1,fsr2h
  1988  000A58  0E00               	movlw	0
  1989  000A5A  6EDF               	movwf	indf2,c
  1990  000A5C  0012               	return	
  1991  000A5E                     __end_of_sprintf:
  1992                           	opt stack 0
  1993                           tosu	equ	0xFFF
  1994                           tosh	equ	0xFFE
  1995                           tosl	equ	0xFFD
  1996                           pclath	equ	0xFFA
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           prodh	equ	0xFF4
  2002                           prodl	equ	0xFF3
  2003                           intcon	equ	0xFF2
  2004                           intcon2	equ	0xFF1
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           postdec1	equ	0xFE5
  2008                           fsr1l	equ	0xFE1
  2009                           indf2	equ	0xFDF
  2010                           postinc2	equ	0xFDE
  2011                           postdec2	equ	0xFDD
  2012                           fsr2h	equ	0xFDA
  2013                           fsr2l	equ	0xFD9
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function _isdigit *****************
  2017 ;; Defined at:
  2018 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  c               1    wreg     unsigned char 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  c               1   42[COMRAM] unsigned char 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;		None               void
  2025 ;; Registers used:
  2026 ;;		wreg, status,2, status,0
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2032 ;;      Params:         0       0       0       0       0       0       0       0       0
  2033 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2034 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2035 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2036 ;;Total ram usage:        3 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:    3
  2039 ;; This function calls:
  2040 ;;		Nothing
  2041 ;; This function is called by:
  2042 ;;		_sprintf
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text8
  2047  0012FC                     __ptext8:
  2048                           	opt stack 0
  2049  0012FC                     _isdigit:
  2050                           	opt stack 24
  2051                           
  2052                           ;incstack = 0
  2053                           ;isdigit@c stored from wreg
  2054  0012FC  6E2B               	movwf	isdigit@c,c
  2055  0012FE  0E00               	movlw	0
  2056  001300  6E2A               	movwf	_isdigit$1137,c
  2057  001302  0E3A               	movlw	58
  2058  001304  602B               	cpfslt	isdigit@c,c
  2059  001306  D005               	goto	l866
  2060  001308  0E2F               	movlw	47
  2061  00130A  642B               	cpfsgt	isdigit@c,c
  2062  00130C  D002               	goto	l866
  2063  00130E  0E01               	movlw	1
  2064  001310  6E2A               	movwf	_isdigit$1137,c
  2065  001312                     l866:
  2066  001312  C02A  F029         	movff	_isdigit$1137,??_isdigit
  2067  001316  3029               	rrcf	??_isdigit,w,c
  2068  001318  0012               	return	
  2069  00131A                     __end_of_isdigit:
  2070                           	opt stack 0
  2071                           tosu	equ	0xFFF
  2072                           tosh	equ	0xFFE
  2073                           tosl	equ	0xFFD
  2074                           pclath	equ	0xFFA
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           prodh	equ	0xFF4
  2080                           prodl	equ	0xFF3
  2081                           intcon	equ	0xFF2
  2082                           intcon2	equ	0xFF1
  2083                           postinc0	equ	0xFEE
  2084                           wreg	equ	0xFE8
  2085                           postdec1	equ	0xFE5
  2086                           fsr1l	equ	0xFE1
  2087                           indf2	equ	0xFDF
  2088                           postinc2	equ	0xFDE
  2089                           postdec2	equ	0xFDD
  2090                           fsr2h	equ	0xFDA
  2091                           fsr2l	equ	0xFD9
  2092                           status	equ	0xFD8
  2093                           
  2094 ;; *************** function ___wmul *****************
  2095 ;; Defined at:
  2096 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;  multiplier      2   40[COMRAM] unsigned int 
  2099 ;;  multiplicand    2   42[COMRAM] unsigned int 
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  product         2   44[COMRAM] unsigned int 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  2   40[COMRAM] unsigned int 
  2104 ;; Registers used:
  2105 ;;		wreg, status,2, status,0, prodl, prodh
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2111 ;;      Params:         4       0       0       0       0       0       0       0       0
  2112 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2113 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2114 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2115 ;;Total ram usage:        6 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    3
  2118 ;; This function calls:
  2119 ;;		Nothing
  2120 ;; This function is called by:
  2121 ;;		_sprintf
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text9
  2126  001292                     __ptext9:
  2127                           	opt stack 0
  2128  001292                     ___wmul:
  2129                           	opt stack 24
  2130                           
  2131                           ;incstack = 0
  2132  001292  5029               	movf	___wmul@multiplier,w,c
  2133  001294  022B               	mulwf	___wmul@multiplicand,c
  2134  001296  CFF3 F02D          	movff	prodl,___wmul@product
  2135  00129A  CFF4 F02E          	movff	prodh,___wmul@product+1
  2136  00129E  5029               	movf	___wmul@multiplier,w,c
  2137  0012A0  022C               	mulwf	___wmul@multiplicand+1,c
  2138  0012A2  50F3               	movf	prodl,w,c
  2139  0012A4  262E               	addwf	___wmul@product+1,f,c
  2140  0012A6  502A               	movf	___wmul@multiplier+1,w,c
  2141  0012A8  022B               	mulwf	___wmul@multiplicand,c
  2142  0012AA  50F3               	movf	prodl,w,c
  2143  0012AC  262E               	addwf	___wmul@product+1,f,c
  2144  0012AE  C02D  F029         	movff	___wmul@product,?___wmul
  2145  0012B2  C02E  F02A         	movff	___wmul@product+1,?___wmul+1
  2146  0012B6  0012               	return	
  2147  0012B8                     __end_of___wmul:
  2148                           	opt stack 0
  2149                           tosu	equ	0xFFF
  2150                           tosh	equ	0xFFE
  2151                           tosl	equ	0xFFD
  2152                           pclath	equ	0xFFA
  2153                           tblptru	equ	0xFF8
  2154                           tblptrh	equ	0xFF7
  2155                           tblptrl	equ	0xFF6
  2156                           tablat	equ	0xFF5
  2157                           prodh	equ	0xFF4
  2158                           prodl	equ	0xFF3
  2159                           intcon	equ	0xFF2
  2160                           intcon2	equ	0xFF1
  2161                           postinc0	equ	0xFEE
  2162                           wreg	equ	0xFE8
  2163                           postdec1	equ	0xFE5
  2164                           fsr1l	equ	0xFE1
  2165                           indf2	equ	0xFDF
  2166                           postinc2	equ	0xFDE
  2167                           postdec2	equ	0xFDD
  2168                           fsr2h	equ	0xFDA
  2169                           fsr2l	equ	0xFD9
  2170                           status	equ	0xFD8
  2171                           
  2172 ;; *************** function ___lwmod *****************
  2173 ;; Defined at:
  2174 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;  dividend        2    3[BANK0 ] unsigned int 
  2177 ;;  divisor         2    5[BANK0 ] unsigned int 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  counter         1   44[COMRAM] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  2    3[BANK0 ] unsigned int 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2189 ;;      Params:         0       4       0       0       0       0       0       0       0
  2190 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2192 ;;      Totals:         1       4       0       0       0       0       0       0       0
  2193 ;;Total ram usage:        5 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    3
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_sprintf
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text10
  2204  0010C0                     __ptext10:
  2205                           	opt stack 0
  2206  0010C0                     ___lwmod:
  2207                           	opt stack 24
  2208                           
  2209                           ;incstack = 0
  2210  0010C0  0100               	movlb	0	; () banked
  2211  0010C2  51AC               	movf	___lwmod@divisor& (0+255),w,b
  2212  0010C4  11AD               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2213  0010C6  B4D8               	btfsc	status,2,c
  2214  0010C8  D018               	goto	l960
  2215                           
  2216                           ; BSR set to: 0
  2217  0010CA  0E01               	movlw	1
  2218  0010CC  6E2D               	movwf	___lwmod@counter,c
  2219  0010CE  D004               	goto	l955
  2220  0010D0                     
  2221                           ; BSR set to: 0
  2222                           
  2223                           ; BSR set to: 0
  2224  0010D0  90D8               	bcf	status,0,c
  2225  0010D2  37AC               	rlcf	___lwmod@divisor& (0+255),f,b
  2226  0010D4  37AD               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2227  0010D6  2A2D               	incf	___lwmod@counter,f,c
  2228  0010D8                     l955:
  2229                           
  2230                           ; BSR set to: 0
  2231                           
  2232                           ; BSR set to: 0
  2233  0010D8  AFAD               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2234  0010DA  D7FA               	goto	l956
  2235  0010DC                     u1900:
  2236                           
  2237                           ; BSR set to: 0
  2238                           
  2239                           ; BSR set to: 0
  2240                           
  2241                           ; BSR set to: 0
  2242  0010DC  51AC               	movf	___lwmod@divisor& (0+255),w,b
  2243  0010DE  5DAA               	subwf	___lwmod@dividend& (0+255),w,b
  2244  0010E0  51AD               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2245  0010E2  59AB               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2246  0010E4  A0D8               	btfss	status,0,c
  2247  0010E6  D004               	goto	l959
  2248                           
  2249                           ; BSR set to: 0
  2250  0010E8  51AC               	movf	___lwmod@divisor& (0+255),w,b
  2251  0010EA  5FAA               	subwf	___lwmod@dividend& (0+255),f,b
  2252  0010EC  51AD               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2253  0010EE  5BAB               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2254  0010F0                     l959:
  2255                           
  2256                           ; BSR set to: 0
  2257                           
  2258                           ; BSR set to: 0
  2259  0010F0  90D8               	bcf	status,0,c
  2260  0010F2  33AD               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2261  0010F4  33AC               	rrcf	___lwmod@divisor& (0+255),f,b
  2262                           
  2263                           ; BSR set to: 0
  2264  0010F6  2E2D               	decfsz	___lwmod@counter,f,c
  2265  0010F8  D7F1               	goto	u1900
  2266  0010FA                     l960:
  2267                           
  2268                           ; BSR set to: 0
  2269                           
  2270                           ; BSR set to: 0
  2271  0010FA  C0AA  F0AA         	movff	___lwmod@dividend,?___lwmod
  2272  0010FE  C0AB  F0AB         	movff	___lwmod@dividend+1,?___lwmod+1
  2273                           
  2274                           ; BSR set to: 0
  2275  001102  0012               	return		;funcret
  2276  001104                     __end_of___lwmod:
  2277                           	opt stack 0
  2278                           tosu	equ	0xFFF
  2279                           tosh	equ	0xFFE
  2280                           tosl	equ	0xFFD
  2281                           pclath	equ	0xFFA
  2282                           tblptru	equ	0xFF8
  2283                           tblptrh	equ	0xFF7
  2284                           tblptrl	equ	0xFF6
  2285                           tablat	equ	0xFF5
  2286                           prodh	equ	0xFF4
  2287                           prodl	equ	0xFF3
  2288                           intcon	equ	0xFF2
  2289                           intcon2	equ	0xFF1
  2290                           postinc0	equ	0xFEE
  2291                           wreg	equ	0xFE8
  2292                           postdec1	equ	0xFE5
  2293                           fsr1l	equ	0xFE1
  2294                           indf2	equ	0xFDF
  2295                           postinc2	equ	0xFDE
  2296                           postdec2	equ	0xFDD
  2297                           fsr2h	equ	0xFDA
  2298                           fsr2l	equ	0xFD9
  2299                           status	equ	0xFD8
  2300                           
  2301 ;; *************** function ___lwdiv *****************
  2302 ;; Defined at:
  2303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;  dividend        2   40[COMRAM] unsigned int 
  2306 ;;  divisor         2   42[COMRAM] unsigned int 
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;  quotient        2    1[BANK0 ] unsigned int 
  2309 ;;  counter         1    0[BANK0 ] unsigned char 
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  2   40[COMRAM] unsigned int 
  2312 ;; Registers used:
  2313 ;;		wreg, status,2, status,0
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2319 ;;      Params:         4       0       0       0       0       0       0       0       0
  2320 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2321 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2322 ;;      Totals:         4       3       0       0       0       0       0       0       0
  2323 ;;Total ram usage:        7 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    3
  2326 ;; This function calls:
  2327 ;;		Nothing
  2328 ;; This function is called by:
  2329 ;;		_sprintf
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           	psect	text11
  2334  000EF8                     __ptext11:
  2335                           	opt stack 0
  2336  000EF8                     ___lwdiv:
  2337                           	opt stack 24
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;incstack = 0
  2341  000EF8  0E00               	movlw	0
  2342  000EFA  0100               	movlb	0	; () banked
  2343  000EFC  6FA9               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2344  000EFE  0E00               	movlw	0
  2345  000F00  6FA8               	movwf	___lwdiv@quotient& (0+255),b
  2346                           
  2347                           ; BSR set to: 0
  2348  000F02  502B               	movf	___lwdiv@divisor,w,c
  2349  000F04  102C               	iorwf	___lwdiv@divisor+1,w,c
  2350  000F06  B4D8               	btfsc	status,2,c
  2351  000F08  D01C               	goto	l950
  2352                           
  2353                           ; BSR set to: 0
  2354  000F0A  0E01               	movlw	1
  2355  000F0C  6FA7               	movwf	___lwdiv@counter& (0+255),b
  2356  000F0E  D004               	goto	l945
  2357  000F10                     
  2358                           ; BSR set to: 0
  2359                           
  2360                           ; BSR set to: 0
  2361  000F10  90D8               	bcf	status,0,c
  2362  000F12  362B               	rlcf	___lwdiv@divisor,f,c
  2363  000F14  362C               	rlcf	___lwdiv@divisor+1,f,c
  2364  000F16  2BA7               	incf	___lwdiv@counter& (0+255),f,b
  2365  000F18                     l945:
  2366                           
  2367                           ; BSR set to: 0
  2368                           
  2369                           ; BSR set to: 0
  2370  000F18  AE2C               	btfss	___lwdiv@divisor+1,7,c
  2371  000F1A  D7FA               	goto	l946
  2372  000F1C                     u1870:
  2373                           
  2374                           ; BSR set to: 0
  2375                           
  2376                           ; BSR set to: 0
  2377                           
  2378                           ; BSR set to: 0
  2379  000F1C  90D8               	bcf	status,0,c
  2380  000F1E  37A8               	rlcf	___lwdiv@quotient& (0+255),f,b
  2381  000F20  37A9               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2382                           
  2383                           ; BSR set to: 0
  2384  000F22  502B               	movf	___lwdiv@divisor,w,c
  2385  000F24  5C29               	subwf	___lwdiv@dividend,w,c
  2386  000F26  502C               	movf	___lwdiv@divisor+1,w,c
  2387  000F28  582A               	subwfb	___lwdiv@dividend+1,w,c
  2388  000F2A  A0D8               	btfss	status,0,c
  2389  000F2C  D005               	goto	l949
  2390                           
  2391                           ; BSR set to: 0
  2392  000F2E  502B               	movf	___lwdiv@divisor,w,c
  2393  000F30  5E29               	subwf	___lwdiv@dividend,f,c
  2394  000F32  502C               	movf	___lwdiv@divisor+1,w,c
  2395  000F34  5A2A               	subwfb	___lwdiv@dividend+1,f,c
  2396                           
  2397                           ; BSR set to: 0
  2398  000F36  81A8               	bsf	___lwdiv@quotient& (0+255),0,b
  2399  000F38                     l949:
  2400                           
  2401                           ; BSR set to: 0
  2402                           
  2403                           ; BSR set to: 0
  2404  000F38  90D8               	bcf	status,0,c
  2405  000F3A  322C               	rrcf	___lwdiv@divisor+1,f,c
  2406  000F3C  322B               	rrcf	___lwdiv@divisor,f,c
  2407                           
  2408                           ; BSR set to: 0
  2409  000F3E  2FA7               	decfsz	___lwdiv@counter& (0+255),f,b
  2410  000F40  D7ED               	goto	u1870
  2411  000F42                     l950:
  2412                           
  2413                           ; BSR set to: 0
  2414                           
  2415                           ; BSR set to: 0
  2416  000F42  C0A8  F029         	movff	___lwdiv@quotient,?___lwdiv
  2417  000F46  C0A9  F02A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2418                           
  2419                           ; BSR set to: 0
  2420  000F4A  0012               	return		;funcret
  2421  000F4C                     __end_of___lwdiv:
  2422                           	opt stack 0
  2423                           tosu	equ	0xFFF
  2424                           tosh	equ	0xFFE
  2425                           tosl	equ	0xFFD
  2426                           pclath	equ	0xFFA
  2427                           tblptru	equ	0xFF8
  2428                           tblptrh	equ	0xFF7
  2429                           tblptrl	equ	0xFF6
  2430                           tablat	equ	0xFF5
  2431                           prodh	equ	0xFF4
  2432                           prodl	equ	0xFF3
  2433                           intcon	equ	0xFF2
  2434                           intcon2	equ	0xFF1
  2435                           postinc0	equ	0xFEE
  2436                           wreg	equ	0xFE8
  2437                           postdec1	equ	0xFE5
  2438                           fsr1l	equ	0xFE1
  2439                           indf2	equ	0xFDF
  2440                           postinc2	equ	0xFDE
  2441                           postdec2	equ	0xFDD
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function _lcdWrite *****************
  2447 ;; Defined at:
  2448 ;;		line 52 in file "display.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  lcd             2   40[COMRAM] PTR struct .
  2451 ;;		 -> lcd(33), 
  2452 ;;  row             1   42[COMRAM] unsigned char 
  2453 ;;  col             1   43[COMRAM] unsigned char 
  2454 ;;  string          2   44[COMRAM] PTR unsigned char 
  2455 ;;		 -> buffer(32), 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  2   40[COMRAM] int 
  2460 ;; Registers used:
  2461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2467 ;;      Params:         6       0       0       0       0       0       0       0       0
  2468 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2470 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2471 ;;Total ram usage:        6 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    3
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		_OnRenderMenu1
  2478 ;;		_OnRenderMenu2
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text12
  2483  000B44                     __ptext12:
  2484                           	opt stack 0
  2485  000B44                     _lcdWrite:
  2486                           	opt stack 25
  2487                           
  2488                           ;display.c: 54: if (row == 0 || row > 2 || col == 0 || col > 16) {
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;incstack = 0
  2492  000B44  502B               	movf	lcdWrite@row,w,c
  2493  000B46  B4D8               	btfsc	status,2,c
  2494  000B48  0012               	return	
  2495  000B4A  0E03               	movlw	3
  2496  000B4C  602B               	cpfslt	lcdWrite@row,c
  2497  000B4E  0012               	return	
  2498  000B50  502C               	movf	lcdWrite@col,w,c
  2499  000B52  B4D8               	btfsc	status,2,c
  2500  000B54  0012               	return	
  2501  000B56  0E10               	movlw	16
  2502  000B58  642C               	cpfsgt	lcdWrite@col,c
  2503  000B5A  D001               	goto	l152
  2504  000B5C  0012               	return	
  2505  000B5E                     l152:
  2506                           
  2507                           ;display.c: 56: }
  2508                           ;display.c: 58: row--;
  2509  000B5E  062B               	decf	lcdWrite@row,f,c
  2510                           
  2511                           ;display.c: 59: col--;
  2512  000B60  062C               	decf	lcdWrite@col,f,c
  2513                           
  2514                           ;display.c: 61: if (row == 0) {
  2515  000B62  502B               	movf	lcdWrite@row,w,c
  2516  000B64  B4D8               	btfsc	status,2,c
  2517  000B66  D016               	goto	l157
  2518  000B68  D039               	goto	l162
  2519  000B6A                     
  2520                           ;display.c: 63: lcd->Memory[0][col++] = *string;
  2521  000B6A  C02D  FFD9         	movff	lcdWrite@string,fsr2l
  2522  000B6E  C02E  FFDA         	movff	lcdWrite@string+1,fsr2h
  2523  000B72  502C               	movf	lcdWrite@col,w,c
  2524  000B74  0D01               	mullw	1
  2525  000B76  0E01               	movlw	1
  2526  000B78  26F3               	addwf	prodl,f,c
  2527  000B7A  0E00               	movlw	0
  2528  000B7C  22F4               	addwfc	prodh,f,c
  2529  000B7E  50F3               	movf	prodl,w,c
  2530  000B80  2429               	addwf	lcdWrite@lcd,w,c
  2531  000B82  6EE1               	movwf	fsr1l,c
  2532  000B84  50F4               	movf	prodh,w,c
  2533  000B86  202A               	addwfc	lcdWrite@lcd+1,w,c
  2534  000B88  6EE2               	movwf	fsr1h,c
  2535  000B8A  CFDF FFE7          	movff	indf2,indf1
  2536  000B8E  2A2C               	incf	lcdWrite@col,f,c
  2537                           
  2538                           ;display.c: 64: string++;
  2539  000B90  4A2D               	infsnz	lcdWrite@string,f,c
  2540  000B92  2A2E               	incf	lcdWrite@string+1,f,c
  2541  000B94                     l157:
  2542  000B94  C02D  FFD9         	movff	lcdWrite@string,fsr2l
  2543  000B98  C02E  FFDA         	movff	lcdWrite@string+1,fsr2h
  2544  000B9C  50DF               	movf	indf2,w,c
  2545  000B9E  B4D8               	btfsc	status,2,c
  2546  000BA0  D003               	goto	u1290
  2547  000BA2  0E0F               	movlw	15
  2548  000BA4  642C               	cpfsgt	lcdWrite@col,c
  2549  000BA6  D7E1               	goto	l158
  2550  000BA8                     u1290:
  2551                           
  2552                           ;display.c: 65: }
  2553                           ;display.c: 66: col = 0;
  2554  000BA8  0E00               	movlw	0
  2555  000BAA  6E2C               	movwf	lcdWrite@col,c
  2556                           
  2557                           ;display.c: 67: row = 1;
  2558  000BAC  0E01               	movlw	1
  2559  000BAE  6E2B               	movwf	lcdWrite@row,c
  2560                           
  2561                           ;display.c: 68: }
  2562                           ;display.c: 71: while (*string && col <= 0x0F) {
  2563  000BB0  D015               	goto	l162
  2564  000BB2                     
  2565                           ;display.c: 72: lcd->Memory[1][col++] = *string;
  2566  000BB2  C02D  FFD9         	movff	lcdWrite@string,fsr2l
  2567  000BB6  C02E  FFDA         	movff	lcdWrite@string+1,fsr2h
  2568  000BBA  502C               	movf	lcdWrite@col,w,c
  2569  000BBC  0D01               	mullw	1
  2570  000BBE  0E11               	movlw	17
  2571  000BC0  26F3               	addwf	prodl,f,c
  2572  000BC2  0E00               	movlw	0
  2573  000BC4  22F4               	addwfc	prodh,f,c
  2574  000BC6  50F3               	movf	prodl,w,c
  2575  000BC8  2429               	addwf	lcdWrite@lcd,w,c
  2576  000BCA  6EE1               	movwf	fsr1l,c
  2577  000BCC  50F4               	movf	prodh,w,c
  2578  000BCE  202A               	addwfc	lcdWrite@lcd+1,w,c
  2579  000BD0  6EE2               	movwf	fsr1h,c
  2580  000BD2  CFDF FFE7          	movff	indf2,indf1
  2581  000BD6  2A2C               	incf	lcdWrite@col,f,c
  2582                           
  2583                           ;display.c: 73: string++;
  2584  000BD8  4A2D               	infsnz	lcdWrite@string,f,c
  2585  000BDA  2A2E               	incf	lcdWrite@string+1,f,c
  2586  000BDC                     l162:
  2587  000BDC  C02D  FFD9         	movff	lcdWrite@string,fsr2l
  2588  000BE0  C02E  FFDA         	movff	lcdWrite@string+1,fsr2h
  2589  000BE4  50DF               	movf	indf2,w,c
  2590  000BE6  B4D8               	btfsc	status,2,c
  2591  000BE8  D003               	goto	u1310
  2592  000BEA  0E0F               	movlw	15
  2593  000BEC  642C               	cpfsgt	lcdWrite@col,c
  2594  000BEE  D7E1               	goto	l163
  2595  000BF0                     u1310:
  2596                           
  2597                           ;display.c: 74: }
  2598                           ;display.c: 76: lcd->NeedsRedraw = 1;
  2599  000BF0  C029  FFD9         	movff	lcdWrite@lcd,fsr2l
  2600  000BF4  C02A  FFDA         	movff	lcdWrite@lcd+1,fsr2h
  2601  000BF8  0E01               	movlw	1
  2602  000BFA  6EDF               	movwf	indf2,c
  2603  000BFC  0012               	return	
  2604  000BFE                     __end_of_lcdWrite:
  2605                           	opt stack 0
  2606                           tosu	equ	0xFFF
  2607                           tosh	equ	0xFFE
  2608                           tosl	equ	0xFFD
  2609                           pclath	equ	0xFFA
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           intcon	equ	0xFF2
  2617                           intcon2	equ	0xFF1
  2618                           postinc0	equ	0xFEE
  2619                           wreg	equ	0xFE8
  2620                           indf1	equ	0xFE7
  2621                           postdec1	equ	0xFE5
  2622                           fsr1h	equ	0xFE2
  2623                           fsr1l	equ	0xFE1
  2624                           indf2	equ	0xFDF
  2625                           postinc2	equ	0xFDE
  2626                           postdec2	equ	0xFDD
  2627                           fsr2h	equ	0xFDA
  2628                           fsr2l	equ	0xFD9
  2629                           status	equ	0xFD8
  2630                           
  2631 ;; *************** function _menuInit *****************
  2632 ;; Defined at:
  2633 ;;		line 5 in file "menu.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  lcd             2   40[COMRAM] PTR struct .
  2636 ;;		 -> lcd(33), 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;		None
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  1    wreg      void 
  2641 ;; Registers used:
  2642 ;;		wreg, status,2, status,0
  2643 ;; Tracked objects:
  2644 ;;		On entry : 0/0
  2645 ;;		On exit  : 0/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2648 ;;      Params:         2       0       0       0       0       0       0       0       0
  2649 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2650 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2651 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2652 ;;Total ram usage:        2 bytes
  2653 ;; Hardware stack levels used:    1
  2654 ;; Hardware stack levels required when called:    3
  2655 ;; This function calls:
  2656 ;;		Nothing
  2657 ;; This function is called by:
  2658 ;;		_main
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           	psect	text13
  2663  00141E                     __ptext13:
  2664                           	opt stack 0
  2665  00141E                     _menuInit:
  2666                           	opt stack 27
  2667                           
  2668                           ;menu.c: 7: Menu.lcd = lcd;
  2669                           
  2670                           ;incstack = 0
  2671  00141E  C029  F02F         	movff	menuInit@lcd,_Menu
  2672  001422  C02A  F030         	movff	menuInit@lcd+1,_Menu+1
  2673  001426  0012               	return		;funcret
  2674  001428                     __end_of_menuInit:
  2675                           	opt stack 0
  2676                           tosu	equ	0xFFF
  2677                           tosh	equ	0xFFE
  2678                           tosl	equ	0xFFD
  2679                           pclath	equ	0xFFA
  2680                           tblptru	equ	0xFF8
  2681                           tblptrh	equ	0xFF7
  2682                           tblptrl	equ	0xFF6
  2683                           tablat	equ	0xFF5
  2684                           prodh	equ	0xFF4
  2685                           prodl	equ	0xFF3
  2686                           intcon	equ	0xFF2
  2687                           intcon2	equ	0xFF1
  2688                           postinc0	equ	0xFEE
  2689                           wreg	equ	0xFE8
  2690                           indf1	equ	0xFE7
  2691                           postdec1	equ	0xFE5
  2692                           fsr1h	equ	0xFE2
  2693                           fsr1l	equ	0xFE1
  2694                           indf2	equ	0xFDF
  2695                           postinc2	equ	0xFDE
  2696                           postdec2	equ	0xFDD
  2697                           fsr2h	equ	0xFDA
  2698                           fsr2l	equ	0xFD9
  2699                           status	equ	0xFD8
  2700                           
  2701 ;; *************** function _menuGoto *****************
  2702 ;; Defined at:
  2703 ;;		line 10 in file "menu.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;  pos             1    wreg     unsigned char 
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;  pos             1   41[COMRAM] unsigned char 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      void 
  2710 ;; Registers used:
  2711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2717 ;;      Params:         0       0       0       0       0       0       0       0       0
  2718 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2719 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2720 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2721 ;;Total ram usage:        1 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    5
  2724 ;; This function calls:
  2725 ;;		__menuEnterPosition
  2726 ;; This function is called by:
  2727 ;;		_main
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text14
  2732  001428                     __ptext14:
  2733                           	opt stack 0
  2734  001428                     _menuGoto:
  2735                           	opt stack 25
  2736                           
  2737                           ;incstack = 0
  2738                           ;menuGoto@pos stored from wreg
  2739  001428  6E2A               	movwf	menuGoto@pos,c
  2740                           
  2741                           ;menu.c: 12: _menuEnterPosition(pos);
  2742  00142A  502A               	movf	menuGoto@pos,w,c
  2743  00142C  ECA3  F008         	call	__menuEnterPosition
  2744  001430  0012               	return		;funcret
  2745  001432                     __end_of_menuGoto:
  2746                           	opt stack 0
  2747                           tosu	equ	0xFFF
  2748                           tosh	equ	0xFFE
  2749                           tosl	equ	0xFFD
  2750                           pclath	equ	0xFFA
  2751                           tblptru	equ	0xFF8
  2752                           tblptrh	equ	0xFF7
  2753                           tblptrl	equ	0xFF6
  2754                           tablat	equ	0xFF5
  2755                           prodh	equ	0xFF4
  2756                           prodl	equ	0xFF3
  2757                           intcon	equ	0xFF2
  2758                           intcon2	equ	0xFF1
  2759                           postinc0	equ	0xFEE
  2760                           wreg	equ	0xFE8
  2761                           indf1	equ	0xFE7
  2762                           postdec1	equ	0xFE5
  2763                           fsr1h	equ	0xFE2
  2764                           fsr1l	equ	0xFE1
  2765                           indf2	equ	0xFDF
  2766                           postinc2	equ	0xFDE
  2767                           postdec2	equ	0xFDD
  2768                           fsr2h	equ	0xFDA
  2769                           fsr2l	equ	0xFD9
  2770                           status	equ	0xFD8
  2771                           
  2772 ;; *************** function __menuEnterPosition *****************
  2773 ;; Defined at:
  2774 ;;		line 20 in file "menu.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;  pos             1    wreg     unsigned char 
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;  pos             1   40[COMRAM] unsigned char 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2788 ;;      Params:         0       0       0       0       0       0       0       0       0
  2789 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2790 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2791 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2792 ;;Total ram usage:        1 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    4
  2795 ;; This function calls:
  2796 ;;		_OnEnterMenu1
  2797 ;;		_OnEnterMenu2
  2798 ;;		_menuDraw
  2799 ;; This function is called by:
  2800 ;;		_menuGoto
  2801 ;;		_menuNext
  2802 ;;		_menuPrev
  2803 ;;		_menuReset
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           	psect	text15
  2808  001146                     __ptext15:
  2809                           	opt stack 0
  2810  001146                     __menuEnterPosition:
  2811                           	opt stack 25
  2812                           
  2813                           ;incstack = 0
  2814                           ;__menuEnterPosition@pos stored from wreg
  2815  001146  6E29               	movwf	__menuEnterPosition@pos,c
  2816                           
  2817                           ;menu.c: 22: Menu.Current = Menu.Items[pos];
  2818  001148  5029               	movf	__menuEnterPosition@pos,w,c
  2819  00114A  0D02               	mullw	2
  2820  00114C  0E35               	movlw	low (_Menu+6)
  2821  00114E  24F3               	addwf	prodl,w,c
  2822  001150  6ED9               	movwf	fsr2l,c
  2823  001152  0E00               	movlw	high (_Menu+6)
  2824  001154  20F4               	addwfc	prodh,w,c
  2825  001156  6EDA               	movwf	fsr2h,c
  2826  001158  CFDE F033          	movff	postinc2,_Menu+4
  2827  00115C  CFDD F034          	movff	postdec2,_Menu+5
  2828                           
  2829                           ;menu.c: 23: Menu.Current->Enter();
  2830  001160  C033  FFD9         	movff	_Menu+4,fsr2l
  2831  001164  C034  FFDA         	movff	_Menu+5,fsr2h
  2832  001168  D801               	call	u1558
  2833  00116A  D00A               	goto	u1559
  2834  00116C                     u1558:
  2835  00116C  0005               	push	
  2836  00116E  6EFA               	movwf	pclath,c
  2837  001170  50DE               	movf	postinc2,w,c
  2838  001172  6EFD               	movwf	tosl,c
  2839  001174  50DE               	movf	postinc2,w,c
  2840  001176  6EFE               	movwf	tosh,c
  2841  001178  50F8               	movf	tblptru,w,c
  2842  00117A  6EFF               	movwf	tosu,c
  2843  00117C  50FA               	movf	pclath,w,c
  2844  00117E  0012               	return		;indir
  2845  001180                     u1559:
  2846                           
  2847                           ;menu.c: 24: menuDraw();
  2848  001180  EC27  F00A         	call	_menuDraw	;wreg free
  2849  001184  0012               	return		;funcret
  2850  001186                     __end_of__menuEnterPosition:
  2851                           	opt stack 0
  2852                           tosu	equ	0xFFF
  2853                           tosh	equ	0xFFE
  2854                           tosl	equ	0xFFD
  2855                           pclath	equ	0xFFA
  2856                           tblptru	equ	0xFF8
  2857                           tblptrh	equ	0xFF7
  2858                           tblptrl	equ	0xFF6
  2859                           tablat	equ	0xFF5
  2860                           prodh	equ	0xFF4
  2861                           prodl	equ	0xFF3
  2862                           intcon	equ	0xFF2
  2863                           intcon2	equ	0xFF1
  2864                           postinc0	equ	0xFEE
  2865                           wreg	equ	0xFE8
  2866                           indf1	equ	0xFE7
  2867                           postdec1	equ	0xFE5
  2868                           fsr1h	equ	0xFE2
  2869                           fsr1l	equ	0xFE1
  2870                           indf2	equ	0xFDF
  2871                           postinc2	equ	0xFDE
  2872                           postdec2	equ	0xFDD
  2873                           fsr2h	equ	0xFDA
  2874                           fsr2l	equ	0xFD9
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function _menuDraw *****************
  2878 ;; Defined at:
  2879 ;;		line 47 in file "menu.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;		None
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;		None
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2893 ;;      Params:         0       0       0       0       0       0       0       0       0
  2894 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2896 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2897 ;;Total ram usage:        0 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    3
  2900 ;; This function calls:
  2901 ;;		Nothing
  2902 ;; This function is called by:
  2903 ;;		__menuEnterPosition
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text16
  2908  00144E                     __ptext16:
  2909                           	opt stack 0
  2910  00144E                     _menuDraw:
  2911                           	opt stack 25
  2912                           
  2913                           ;menu.c: 49: Menu.NeedsRedraw = 1;
  2914                           
  2915                           ;incstack = 0
  2916  00144E  0E01               	movlw	1
  2917  001450  6E31               	movwf	_Menu+2,c
  2918  001452  0012               	return		;funcret
  2919  001454                     __end_of_menuDraw:
  2920                           	opt stack 0
  2921                           tosu	equ	0xFFF
  2922                           tosh	equ	0xFFE
  2923                           tosl	equ	0xFFD
  2924                           pclath	equ	0xFFA
  2925                           tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           prodh	equ	0xFF4
  2930                           prodl	equ	0xFF3
  2931                           intcon	equ	0xFF2
  2932                           intcon2	equ	0xFF1
  2933                           postinc0	equ	0xFEE
  2934                           wreg	equ	0xFE8
  2935                           indf1	equ	0xFE7
  2936                           postdec1	equ	0xFE5
  2937                           fsr1h	equ	0xFE2
  2938                           fsr1l	equ	0xFE1
  2939                           indf2	equ	0xFDF
  2940                           postinc2	equ	0xFDE
  2941                           postdec2	equ	0xFDD
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function _OnEnterMenu1 *****************
  2947 ;; Defined at:
  2948 ;;		line 18 in file "main.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		None
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2965 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2966 ;;Total ram usage:        0 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    3
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		__menuEnterPosition
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text17
  2977  00145A                     __ptext17:
  2978                           	opt stack 0
  2979  00145A                     _OnEnterMenu1:
  2980                           	opt stack 25
  2981                           
  2982                           ;incstack = 0
  2983  00145A  0012               	return		;funcret
  2984  00145C                     __end_of_OnEnterMenu1:
  2985                           	opt stack 0
  2986                           tosu	equ	0xFFF
  2987                           tosh	equ	0xFFE
  2988                           tosl	equ	0xFFD
  2989                           pclath	equ	0xFFA
  2990                           tblptru	equ	0xFF8
  2991                           tblptrh	equ	0xFF7
  2992                           tblptrl	equ	0xFF6
  2993                           tablat	equ	0xFF5
  2994                           prodh	equ	0xFF4
  2995                           prodl	equ	0xFF3
  2996                           intcon	equ	0xFF2
  2997                           intcon2	equ	0xFF1
  2998                           postinc0	equ	0xFEE
  2999                           wreg	equ	0xFE8
  3000                           indf1	equ	0xFE7
  3001                           postdec1	equ	0xFE5
  3002                           fsr1h	equ	0xFE2
  3003                           fsr1l	equ	0xFE1
  3004                           indf2	equ	0xFDF
  3005                           postinc2	equ	0xFDE
  3006                           postdec2	equ	0xFDD
  3007                           fsr2h	equ	0xFDA
  3008                           fsr2l	equ	0xFD9
  3009                           status	equ	0xFD8
  3010                           
  3011 ;; *************** function _OnEnterMenu2 *****************
  3012 ;; Defined at:
  3013 ;;		line 35 in file "main.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;		None
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;		None
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  1    wreg      void 
  3020 ;; Registers used:
  3021 ;;		None
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3027 ;;      Params:         0       0       0       0       0       0       0       0       0
  3028 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3029 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3030 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3031 ;;Total ram usage:        0 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    3
  3034 ;; This function calls:
  3035 ;;		Nothing
  3036 ;; This function is called by:
  3037 ;;		__menuEnterPosition
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text18
  3042  00145C                     __ptext18:
  3043                           	opt stack 0
  3044  00145C                     _OnEnterMenu2:
  3045                           	opt stack 25
  3046                           
  3047                           ;incstack = 0
  3048  00145C  0012               	return		;funcret
  3049  00145E                     __end_of_OnEnterMenu2:
  3050                           	opt stack 0
  3051                           tosu	equ	0xFFF
  3052                           tosh	equ	0xFFE
  3053                           tosl	equ	0xFFD
  3054                           pclath	equ	0xFFA
  3055                           tblptru	equ	0xFF8
  3056                           tblptrh	equ	0xFF7
  3057                           tblptrl	equ	0xFF6
  3058                           tablat	equ	0xFF5
  3059                           prodh	equ	0xFF4
  3060                           prodl	equ	0xFF3
  3061                           intcon	equ	0xFF2
  3062                           intcon2	equ	0xFF1
  3063                           postinc0	equ	0xFEE
  3064                           wreg	equ	0xFE8
  3065                           indf1	equ	0xFE7
  3066                           postdec1	equ	0xFE5
  3067                           fsr1h	equ	0xFE2
  3068                           fsr1l	equ	0xFE1
  3069                           indf2	equ	0xFDF
  3070                           postinc2	equ	0xFDE
  3071                           postdec2	equ	0xFDD
  3072                           fsr2h	equ	0xFDA
  3073                           fsr2l	equ	0xFD9
  3074                           status	equ	0xFD8
  3075                           
  3076 ;; *************** function _memset *****************
  3077 ;; Defined at:
  3078 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;  p1              2   40[COMRAM] PTR void 
  3081 ;;		 -> buffer(32), 
  3082 ;;  c               2   42[COMRAM] int 
  3083 ;;  n               2   44[COMRAM] unsigned int 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  p               2    0[BANK0 ] PTR unsigned char 
  3086 ;;		 -> buffer(32), 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  2   40[COMRAM] PTR void 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3096 ;;      Params:         6       0       0       0       0       0       0       0       0
  3097 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3099 ;;      Totals:         6       2       0       0       0       0       0       0       0
  3100 ;;Total ram usage:        8 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    3
  3103 ;; This function calls:
  3104 ;;		Nothing
  3105 ;; This function is called by:
  3106 ;;		_main
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           	psect	text19
  3111  00123C                     __ptext19:
  3112                           	opt stack 0
  3113  00123C                     _memset:
  3114                           	opt stack 27
  3115                           
  3116                           ;incstack = 0
  3117  00123C  C029  F0A7         	movff	memset@p1,memset@p
  3118  001240  C02A  F0A8         	movff	memset@p1+1,memset@p+1
  3119  001244  D009               	goto	l969
  3120  001246                     l3105:
  3121  001246  C0A7  FFD9         	movff	memset@p,fsr2l
  3122  00124A  C0A8  FFDA         	movff	memset@p+1,fsr2h
  3123  00124E  C02B  FFDF         	movff	memset@c,indf2
  3124  001252  0100               	movlb	0	; () banked
  3125  001254  4BA7               	infsnz	memset@p& (0+255),f,b
  3126  001256  2BA8               	incf	(memset@p+1)& (0+255),f,b
  3127  001258                     l969:
  3128                           
  3129                           ; BSR set to: 0
  3130  001258  062D               	decf	memset@n,f,c
  3131  00125A  A0D8               	btfss	status,0,c
  3132  00125C  062E               	decf	memset@n+1,f,c
  3133  00125E  282D               	incf	memset@n,w,c
  3134  001260  E1F2               	bnz	l3105
  3135  001262  282E               	incf	memset@n+1,w,c
  3136  001264  B4D8               	btfsc	status,2,c
  3137  001266  0012               	return	
  3138  001268  D7EE               	goto	l970
  3139  00126A                     __end_of_memset:
  3140                           	opt stack 0
  3141                           tosu	equ	0xFFF
  3142                           tosh	equ	0xFFE
  3143                           tosl	equ	0xFFD
  3144                           pclath	equ	0xFFA
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           prodh	equ	0xFF4
  3150                           prodl	equ	0xFF3
  3151                           intcon	equ	0xFF2
  3152                           intcon2	equ	0xFF1
  3153                           postinc0	equ	0xFEE
  3154                           wreg	equ	0xFE8
  3155                           indf1	equ	0xFE7
  3156                           postdec1	equ	0xFE5
  3157                           fsr1h	equ	0xFE2
  3158                           fsr1l	equ	0xFE1
  3159                           indf2	equ	0xFDF
  3160                           postinc2	equ	0xFDE
  3161                           postdec2	equ	0xFDD
  3162                           fsr2h	equ	0xFDA
  3163                           fsr2l	equ	0xFD9
  3164                           status	equ	0xFD8
  3165                           
  3166 ;; *************** function _magnetoInit *****************
  3167 ;; Defined at:
  3168 ;;		line 5 in file "magnetometro.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;		None
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  1    wreg      void 
  3175 ;; Registers used:
  3176 ;;		wreg, status,2, cstack
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3182 ;;      Params:         0       0       0       0       0       0       0       0       0
  3183 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3185 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3186 ;;Total ram usage:        0 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    6
  3189 ;; This function calls:
  3190 ;;		_I2C_Start
  3191 ;;		_I2C_Stop
  3192 ;;		_I2C_Write
  3193 ;; This function is called by:
  3194 ;;		_main
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text20
  3199  00126A                     __ptext20:
  3200                           	opt stack 0
  3201  00126A                     _magnetoInit:
  3202                           	opt stack 24
  3203                           
  3204                           ;magnetometro.c: 7: TRISAbits.RA0 = 0;
  3205                           
  3206                           ;incstack = 0
  3207  00126A  9092               	bcf	3986,0,c	;volatile
  3208                           
  3209                           ;magnetometro.c: 8: TRISAbits.RA1 = 0;
  3210  00126C  9292               	bcf	3986,1,c	;volatile
  3211                           
  3212                           ;magnetometro.c: 10: I2C_Start(0x3C);
  3213  00126E  0E3C               	movlw	60
  3214  001270  ECC7  F009         	call	_I2C_Start
  3215                           
  3216                           ;magnetometro.c: 11: I2C_Write(0x00);
  3217  001274  0E00               	movlw	0
  3218  001276  ECDD  F009         	call	_I2C_Write
  3219                           
  3220                           ;magnetometro.c: 12: I2C_Write(0x70);
  3221  00127A  0E70               	movlw	112
  3222  00127C  ECDD  F009         	call	_I2C_Write
  3223                           
  3224                           ;magnetometro.c: 13: I2C_Write(0xA0);
  3225  001280  0EA0               	movlw	160
  3226  001282  ECDD  F009         	call	_I2C_Write
  3227                           
  3228                           ;magnetometro.c: 14: I2C_Write(0x00);
  3229  001286  0E00               	movlw	0
  3230  001288  ECDD  F009         	call	_I2C_Write
  3231                           
  3232                           ;magnetometro.c: 15: I2C_Stop();
  3233  00128C  EC09  F00A         	call	_I2C_Stop	;wreg free
  3234  001290  0012               	return		;funcret
  3235  001292                     __end_of_magnetoInit:
  3236                           	opt stack 0
  3237                           tosu	equ	0xFFF
  3238                           tosh	equ	0xFFE
  3239                           tosl	equ	0xFFD
  3240                           pclath	equ	0xFFA
  3241                           tblptru	equ	0xFF8
  3242                           tblptrh	equ	0xFF7
  3243                           tblptrl	equ	0xFF6
  3244                           tablat	equ	0xFF5
  3245                           prodh	equ	0xFF4
  3246                           prodl	equ	0xFF3
  3247                           intcon	equ	0xFF2
  3248                           intcon2	equ	0xFF1
  3249                           postinc0	equ	0xFEE
  3250                           wreg	equ	0xFE8
  3251                           indf1	equ	0xFE7
  3252                           postdec1	equ	0xFE5
  3253                           fsr1h	equ	0xFE2
  3254                           fsr1l	equ	0xFE1
  3255                           indf2	equ	0xFDF
  3256                           postinc2	equ	0xFDE
  3257                           postdec2	equ	0xFDD
  3258                           fsr2h	equ	0xFDA
  3259                           fsr2l	equ	0xFD9
  3260                           status	equ	0xFD8
  3261                           
  3262 ;; *************** function _I2C_Start *****************
  3263 ;; Defined at:
  3264 ;;		line 16 in file "i2c.c"
  3265 ;; Parameters:    Size  Location     Type
  3266 ;;  slave_write_    1    wreg     unsigned char 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;  slave_write_    1   41[COMRAM] unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      unsigned char 
  3271 ;; Registers used:
  3272 ;;		wreg, status,2, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3278 ;;      Params:         0       0       0       0       0       0       0       0       0
  3279 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3280 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3281 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3282 ;;Total ram usage:        1 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    5
  3285 ;; This function calls:
  3286 ;;		_I2C_Write
  3287 ;; This function is called by:
  3288 ;;		_magnetoInit
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text21
  3293  00138E                     __ptext21:
  3294                           	opt stack 0
  3295  00138E                     _I2C_Start:
  3296                           	opt stack 24
  3297                           
  3298                           ;incstack = 0
  3299                           ;I2C_Start@slave_write_address stored from wreg
  3300  00138E  6E2A               	movwf	I2C_Start@slave_write_address,c
  3301                           
  3302                           ;i2c.c: 18: SSPCON2bits.SEN = 1;
  3303  001390  80C5               	bsf	4037,0,c	;volatile
  3304  001392  B0C5               	btfsc	4037,0,c	;volatile
  3305  001394  D7FE               	goto	l366
  3306                           
  3307                           ;i2c.c: 20: SSPIF=0;
  3308  001396  969E               	bcf	3998,3,c	;volatile
  3309                           
  3310                           ;i2c.c: 21: if(!SSPSTATbits.S)
  3311  001398  A6C7               	btfss	4039,3,c	;volatile
  3312  00139A  0012               	return	
  3313                           
  3314                           ;i2c.c: 23: return (I2C_Write(slave_write_address));
  3315                           ;	Return value of _I2C_Start is never used
  3316                           
  3317                           ;i2c.c: 22: return 0;
  3318                           ;	Return value of _I2C_Start is never used
  3319  00139C  502A               	movf	I2C_Start@slave_write_address,w,c
  3320  00139E  ECDD  F009         	call	_I2C_Write
  3321  0013A2  0012               	return	
  3322  0013A4                     __end_of_I2C_Start:
  3323                           	opt stack 0
  3324                           tosu	equ	0xFFF
  3325                           tosh	equ	0xFFE
  3326                           tosl	equ	0xFFD
  3327                           pclath	equ	0xFFA
  3328                           tblptru	equ	0xFF8
  3329                           tblptrh	equ	0xFF7
  3330                           tblptrl	equ	0xFF6
  3331                           tablat	equ	0xFF5
  3332                           prodh	equ	0xFF4
  3333                           prodl	equ	0xFF3
  3334                           intcon	equ	0xFF2
  3335                           intcon2	equ	0xFF1
  3336                           postinc0	equ	0xFEE
  3337                           wreg	equ	0xFE8
  3338                           indf1	equ	0xFE7
  3339                           postdec1	equ	0xFE5
  3340                           fsr1h	equ	0xFE2
  3341                           fsr1l	equ	0xFE1
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           postdec2	equ	0xFDD
  3345                           fsr2h	equ	0xFDA
  3346                           fsr2l	equ	0xFD9
  3347                           status	equ	0xFD8
  3348                           
  3349 ;; *************** function _magnetoGetCord *****************
  3350 ;; Defined at:
  3351 ;;		line 18 in file "magnetometro.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;  coord           2   42[COMRAM] PTR struct .
  3354 ;;		 -> cord(6), 
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3366 ;;      Params:         2       0       0       0       0       0       0       0       0
  3367 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3368 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3369 ;;      Totals:         2       4       0       0       0       0       0       0       0
  3370 ;;Total ram usage:        6 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    6
  3373 ;; This function calls:
  3374 ;;		_I2C_Read
  3375 ;;		_I2C_Repeated_Start
  3376 ;;		_I2C_Start_Wait
  3377 ;;		_I2C_Stop
  3378 ;;		_I2C_Write
  3379 ;; This function is called by:
  3380 ;;		_main
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           	psect	text22
  3385  000BFE                     __ptext22:
  3386                           	opt stack 0
  3387  000BFE                     _magnetoGetCord:
  3388                           	opt stack 24
  3389                           
  3390                           ;magnetometro.c: 20: I2C_Start_Wait(0x3C);
  3391                           
  3392                           ;incstack = 0
  3393  000BFE  0E3C               	movlw	60
  3394  000C00  EC8D  F009         	call	_I2C_Start_Wait
  3395                           
  3396                           ;magnetometro.c: 21: I2C_Write(0x03);
  3397  000C04  0E03               	movlw	3
  3398  000C06  ECDD  F009         	call	_I2C_Write
  3399                           
  3400                           ;magnetometro.c: 22: I2C_Repeated_Start(0x3D);
  3401  000C0A  0E3D               	movlw	61
  3402  000C0C  ECD2  F009         	call	_I2C_Repeated_Start
  3403                           
  3404                           ;magnetometro.c: 24: coord->x = (((int) I2C_Read(0) << 8) | (int) I2C_Read(0));
  3405  000C10  0E00               	movlw	0
  3406  000C12  EC5C  F009         	call	_I2C_Read
  3407  000C16  0100               	movlb	0	; () banked
  3408  000C18  6FA7               	movwf	??_magnetoGetCord& (0+255),b
  3409  000C1A  51A7               	movf	??_magnetoGetCord& (0+255),w,b
  3410  000C1C  6FA9               	movwf	(??_magnetoGetCord+2)& (0+255),b
  3411  000C1E  6BA8               	clrf	(??_magnetoGetCord+1)& (0+255),b
  3412  000C20  0E00               	movlw	0
  3413  000C22  EC5C  F009         	call	_I2C_Read
  3414  000C26  0100               	movlb	0	; () banked
  3415  000C28  6FAA               	movwf	(??_magnetoGetCord+3)& (0+255),b
  3416  000C2A  51AA               	movf	(??_magnetoGetCord+3)& (0+255),w,b
  3417  000C2C  13A8               	iorwf	(??_magnetoGetCord+1)& (0+255),f,b
  3418  000C2E  0E00               	movlw	0
  3419  000C30  13A9               	iorwf	(??_magnetoGetCord+2)& (0+255),f,b
  3420  000C32  C02B  FFD9         	movff	magnetoGetCord@coord,fsr2l
  3421  000C36  C02C  FFDA         	movff	magnetoGetCord@coord+1,fsr2h
  3422  000C3A  C0A8  FFDE         	movff	??_magnetoGetCord+1,postinc2
  3423  000C3E  C0A9  FFDD         	movff	??_magnetoGetCord+2,postdec2
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;magnetometro.c: 25: coord->z = (((int) I2C_Read(0) << 8) | (int) I2C_Read(0));
  3427  000C42  0E00               	movlw	0
  3428  000C44  EC5C  F009         	call	_I2C_Read
  3429  000C48  0100               	movlb	0	; () banked
  3430  000C4A  6FA7               	movwf	??_magnetoGetCord& (0+255),b
  3431  000C4C  51A7               	movf	??_magnetoGetCord& (0+255),w,b
  3432  000C4E  6FA9               	movwf	(??_magnetoGetCord+2)& (0+255),b
  3433  000C50  6BA8               	clrf	(??_magnetoGetCord+1)& (0+255),b
  3434  000C52  0E00               	movlw	0
  3435  000C54  EC5C  F009         	call	_I2C_Read
  3436  000C58  0100               	movlb	0	; () banked
  3437  000C5A  6FAA               	movwf	(??_magnetoGetCord+3)& (0+255),b
  3438  000C5C  51AA               	movf	(??_magnetoGetCord+3)& (0+255),w,b
  3439  000C5E  13A8               	iorwf	(??_magnetoGetCord+1)& (0+255),f,b
  3440  000C60  0E00               	movlw	0
  3441  000C62  13A9               	iorwf	(??_magnetoGetCord+2)& (0+255),f,b
  3442  000C64  EE20 F004          	lfsr	2,4
  3443  000C68  502B               	movf	magnetoGetCord@coord,w,c
  3444  000C6A  26D9               	addwf	fsr2l,f,c
  3445  000C6C  502C               	movf	magnetoGetCord@coord+1,w,c
  3446  000C6E  22DA               	addwfc	fsr2h,f,c
  3447  000C70  C0A8  FFDE         	movff	??_magnetoGetCord+1,postinc2
  3448  000C74  C0A9  FFDD         	movff	??_magnetoGetCord+2,postdec2
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;magnetometro.c: 26: coord->y = (((int) I2C_Read(0) << 8) | (int) I2C_Read(1));
  3452  000C78  0E00               	movlw	0
  3453  000C7A  EC5C  F009         	call	_I2C_Read
  3454  000C7E  0100               	movlb	0	; () banked
  3455  000C80  6FA7               	movwf	??_magnetoGetCord& (0+255),b
  3456  000C82  51A7               	movf	??_magnetoGetCord& (0+255),w,b
  3457  000C84  6FA9               	movwf	(??_magnetoGetCord+2)& (0+255),b
  3458  000C86  6BA8               	clrf	(??_magnetoGetCord+1)& (0+255),b
  3459  000C88  0E01               	movlw	1
  3460  000C8A  EC5C  F009         	call	_I2C_Read
  3461  000C8E  0100               	movlb	0	; () banked
  3462  000C90  6FAA               	movwf	(??_magnetoGetCord+3)& (0+255),b
  3463  000C92  51AA               	movf	(??_magnetoGetCord+3)& (0+255),w,b
  3464  000C94  13A8               	iorwf	(??_magnetoGetCord+1)& (0+255),f,b
  3465  000C96  0E00               	movlw	0
  3466  000C98  13A9               	iorwf	(??_magnetoGetCord+2)& (0+255),f,b
  3467  000C9A  EE20 F002          	lfsr	2,2
  3468  000C9E  502B               	movf	magnetoGetCord@coord,w,c
  3469  000CA0  26D9               	addwf	fsr2l,f,c
  3470  000CA2  502C               	movf	magnetoGetCord@coord+1,w,c
  3471  000CA4  22DA               	addwfc	fsr2h,f,c
  3472  000CA6  C0A8  FFDE         	movff	??_magnetoGetCord+1,postinc2
  3473  000CAA  C0A9  FFDD         	movff	??_magnetoGetCord+2,postdec2
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;magnetometro.c: 27: I2C_Stop();
  3477  000CAE  EC09  F00A         	call	_I2C_Stop	;wreg free
  3478  000CB2  0012               	return		;funcret
  3479  000CB4                     __end_of_magnetoGetCord:
  3480                           	opt stack 0
  3481                           tosu	equ	0xFFF
  3482                           tosh	equ	0xFFE
  3483                           tosl	equ	0xFFD
  3484                           pclath	equ	0xFFA
  3485                           tblptru	equ	0xFF8
  3486                           tblptrh	equ	0xFF7
  3487                           tblptrl	equ	0xFF6
  3488                           tablat	equ	0xFF5
  3489                           prodh	equ	0xFF4
  3490                           prodl	equ	0xFF3
  3491                           intcon	equ	0xFF2
  3492                           intcon2	equ	0xFF1
  3493                           postinc0	equ	0xFEE
  3494                           wreg	equ	0xFE8
  3495                           indf1	equ	0xFE7
  3496                           postdec1	equ	0xFE5
  3497                           fsr1h	equ	0xFE2
  3498                           fsr1l	equ	0xFE1
  3499                           indf2	equ	0xFDF
  3500                           postinc2	equ	0xFDE
  3501                           postdec2	equ	0xFDD
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _I2C_Start_Wait *****************
  3507 ;; Defined at:
  3508 ;;		line 26 in file "i2c.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  slave_write_    1    wreg     unsigned char 
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;  slave_write_    1   41[COMRAM] unsigned char 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3522 ;;      Params:         0       0       0       0       0       0       0       0       0
  3523 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3524 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3525 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3526 ;;Total ram usage:        1 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    5
  3529 ;; This function calls:
  3530 ;;		_I2C_Stop
  3531 ;;		_I2C_Write
  3532 ;; This function is called by:
  3533 ;;		_magnetoGetCord
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text23
  3538  00131A                     __ptext23:
  3539                           	opt stack 0
  3540  00131A                     _I2C_Start_Wait:
  3541                           	opt stack 24
  3542                           
  3543                           ;incstack = 0
  3544                           ;I2C_Start_Wait@slave_write_address stored from wreg
  3545  00131A  6E2A               	movwf	I2C_Start_Wait@slave_write_address,c
  3546  00131C                     l372:
  3547                           
  3548                           ;i2c.c: 29: {
  3549                           ;i2c.c: 30: SSPCON2bits.SEN = 1;
  3550  00131C  80C5               	bsf	4037,0,c	;volatile
  3551  00131E  B0C5               	btfsc	4037,0,c	;volatile
  3552  001320  D7FE               	goto	l374
  3553                           
  3554                           ;i2c.c: 32: SSPIF = 0;
  3555  001322  969E               	bcf	3998,3,c	;volatile
  3556                           
  3557                           ;i2c.c: 33: if(!SSPSTATbits.S)
  3558  001324  A6C7               	btfss	4039,3,c	;volatile
  3559  001326  D7FA               	goto	l372
  3560                           
  3561                           ;i2c.c: 35: I2C_Write(slave_write_address);
  3562                           
  3563                           ;i2c.c: 34: continue;
  3564  001328  502A               	movf	I2C_Start_Wait@slave_write_address,w,c
  3565  00132A  ECDD  F009         	call	_I2C_Write
  3566                           
  3567                           ;i2c.c: 36: if(ACKSTAT)
  3568  00132E  ACC5               	btfss	4037,6,c	;volatile
  3569  001330  0012               	return	
  3570                           
  3571                           ;i2c.c: 37: {
  3572                           ;i2c.c: 38: I2C_Stop();
  3573  001332  EC09  F00A         	call	_I2C_Stop	;wreg free
  3574                           
  3575                           ;i2c.c: 39: continue;
  3576  001336  D7F2               	goto	l372
  3577  001338                     __end_of_I2C_Start_Wait:
  3578                           	opt stack 0
  3579                           tosu	equ	0xFFF
  3580                           tosh	equ	0xFFE
  3581                           tosl	equ	0xFFD
  3582                           pclath	equ	0xFFA
  3583                           tblptru	equ	0xFF8
  3584                           tblptrh	equ	0xFF7
  3585                           tblptrl	equ	0xFF6
  3586                           tablat	equ	0xFF5
  3587                           prodh	equ	0xFF4
  3588                           prodl	equ	0xFF3
  3589                           intcon	equ	0xFF2
  3590                           intcon2	equ	0xFF1
  3591                           postinc0	equ	0xFEE
  3592                           wreg	equ	0xFE8
  3593                           indf1	equ	0xFE7
  3594                           postdec1	equ	0xFE5
  3595                           fsr1h	equ	0xFE2
  3596                           fsr1l	equ	0xFE1
  3597                           indf2	equ	0xFDF
  3598                           postinc2	equ	0xFDE
  3599                           postdec2	equ	0xFDD
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function _I2C_Stop *****************
  3605 ;; Defined at:
  3606 ;;		line 96 in file "i2c.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;		None
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      unsigned char 
  3613 ;; Registers used:
  3614 ;;		wreg
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3620 ;;      Params:         0       0       0       0       0       0       0       0       0
  3621 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3623 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3624 ;;Total ram usage:        0 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    3
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_I2C_Start_Wait
  3631 ;;		_magnetoInit
  3632 ;;		_magnetoGetCord
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           	psect	text24
  3637  001412                     __ptext24:
  3638                           	opt stack 0
  3639  001412                     _I2C_Stop:
  3640                           	opt stack 26
  3641                           
  3642                           ;i2c.c: 98: PEN = 1;
  3643                           
  3644                           ;incstack = 0
  3645  001412  84C5               	bsf	4037,2,c	;volatile
  3646  001414  B4C5               	btfsc	4037,2,c	;volatile
  3647  001416  D7FE               	goto	l418
  3648                           
  3649                           ;i2c.c: 100: SSPIF = 0;
  3650  001418  969E               	bcf	3998,3,c	;volatile
  3651                           
  3652                           ;i2c.c: 101: if(!SSPSTATbits.P);
  3653  00141A  50C7               	movf	4039,w,c	;volatile
  3654  00141C  0012               	return	
  3655  00141E                     __end_of_I2C_Stop:
  3656                           	opt stack 0
  3657                           tosu	equ	0xFFF
  3658                           tosh	equ	0xFFE
  3659                           tosl	equ	0xFFD
  3660                           pclath	equ	0xFFA
  3661                           tblptru	equ	0xFF8
  3662                           tblptrh	equ	0xFF7
  3663                           tblptrl	equ	0xFF6
  3664                           tablat	equ	0xFF5
  3665                           prodh	equ	0xFF4
  3666                           prodl	equ	0xFF3
  3667                           intcon	equ	0xFF2
  3668                           intcon2	equ	0xFF1
  3669                           postinc0	equ	0xFEE
  3670                           wreg	equ	0xFE8
  3671                           indf1	equ	0xFE7
  3672                           postdec1	equ	0xFE5
  3673                           fsr1h	equ	0xFE2
  3674                           fsr1l	equ	0xFE1
  3675                           indf2	equ	0xFDF
  3676                           postinc2	equ	0xFDE
  3677                           postdec2	equ	0xFDD
  3678                           fsr2h	equ	0xFDA
  3679                           fsr2l	equ	0xFD9
  3680                           status	equ	0xFD8
  3681                           
  3682 ;; *************** function _I2C_Repeated_Start *****************
  3683 ;; Defined at:
  3684 ;;		line 45 in file "i2c.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;  slave_read_a    1    wreg     unsigned char 
  3687 ;; Auto vars:     Size  Location     Type
  3688 ;;  slave_read_a    1   41[COMRAM] unsigned char 
  3689 ;; Return value:  Size  Location     Type
  3690 ;;                  1    wreg      unsigned char 
  3691 ;; Registers used:
  3692 ;;		wreg, status,2, cstack
  3693 ;; Tracked objects:
  3694 ;;		On entry : 0/0
  3695 ;;		On exit  : 0/0
  3696 ;;		Unchanged: 0/0
  3697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3698 ;;      Params:         0       0       0       0       0       0       0       0       0
  3699 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3700 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3701 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3702 ;;Total ram usage:        1 bytes
  3703 ;; Hardware stack levels used:    1
  3704 ;; Hardware stack levels required when called:    5
  3705 ;; This function calls:
  3706 ;;		_I2C_Write
  3707 ;; This function is called by:
  3708 ;;		_magnetoGetCord
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text25
  3713  0013A4                     __ptext25:
  3714                           	opt stack 0
  3715  0013A4                     _I2C_Repeated_Start:
  3716                           	opt stack 24
  3717                           
  3718                           ;incstack = 0
  3719                           ;I2C_Repeated_Start@slave_read_address stored from wreg
  3720  0013A4  6E2A               	movwf	I2C_Repeated_Start@slave_read_address,c
  3721                           
  3722                           ;i2c.c: 47: RSEN = 1;
  3723  0013A6  82C5               	bsf	4037,1,c	;volatile
  3724  0013A8  B2C5               	btfsc	4037,1,c	;volatile
  3725  0013AA  D7FE               	goto	l384
  3726                           
  3727                           ;i2c.c: 49: SSPIF = 0;
  3728  0013AC  969E               	bcf	3998,3,c	;volatile
  3729                           
  3730                           ;i2c.c: 50: if(!SSPSTATbits.S)
  3731  0013AE  A6C7               	btfss	4039,3,c	;volatile
  3732  0013B0  0012               	return	
  3733                           
  3734                           ;i2c.c: 52: I2C_Write(slave_read_address);
  3735                           
  3736                           ;i2c.c: 51: return 0;
  3737                           ;	Return value of _I2C_Repeated_Start is never used
  3738  0013B2  502A               	movf	I2C_Repeated_Start@slave_read_address,w,c
  3739  0013B4  ECDD  F009         	call	_I2C_Write
  3740                           
  3741                           ;i2c.c: 55: else
  3742                           ;i2c.c: 56: return 2;
  3743                           ;	Return value of _I2C_Repeated_Start is never used
  3744                           
  3745                           ;i2c.c: 54: return 1;
  3746                           ;	Return value of _I2C_Repeated_Start is never used
  3747                           
  3748                           ;i2c.c: 53: if (ACKSTAT)
  3749  0013B8  0012               	return	
  3750  0013BA                     __end_of_I2C_Repeated_Start:
  3751                           	opt stack 0
  3752                           tosu	equ	0xFFF
  3753                           tosh	equ	0xFFE
  3754                           tosl	equ	0xFFD
  3755                           pclath	equ	0xFFA
  3756                           tblptru	equ	0xFF8
  3757                           tblptrh	equ	0xFF7
  3758                           tblptrl	equ	0xFF6
  3759                           tablat	equ	0xFF5
  3760                           prodh	equ	0xFF4
  3761                           prodl	equ	0xFF3
  3762                           intcon	equ	0xFF2
  3763                           intcon2	equ	0xFF1
  3764                           postinc0	equ	0xFEE
  3765                           wreg	equ	0xFE8
  3766                           indf1	equ	0xFE7
  3767                           postdec1	equ	0xFE5
  3768                           fsr1h	equ	0xFE2
  3769                           fsr1l	equ	0xFE1
  3770                           indf2	equ	0xFDF
  3771                           postinc2	equ	0xFDE
  3772                           postdec2	equ	0xFDD
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777 ;; *************** function _I2C_Write *****************
  3778 ;; Defined at:
  3779 ;;		line 59 in file "i2c.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  data            1    wreg     unsigned char 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  data            1   40[COMRAM] unsigned char 
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  1    wreg      unsigned char 
  3786 ;; Registers used:
  3787 ;;		wreg, cstack
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3793 ;;      Params:         0       0       0       0       0       0       0       0       0
  3794 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3796 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3797 ;;Total ram usage:        1 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    4
  3800 ;; This function calls:
  3801 ;;		_I2C_Ready
  3802 ;; This function is called by:
  3803 ;;		_I2C_Start
  3804 ;;		_I2C_Start_Wait
  3805 ;;		_I2C_Repeated_Start
  3806 ;;		_magnetoInit
  3807 ;;		_magnetoGetCord
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           	psect	text26
  3812  0013BA                     __ptext26:
  3813                           	opt stack 0
  3814  0013BA                     _I2C_Write:
  3815                           	opt stack 25
  3816                           
  3817                           ;incstack = 0
  3818                           ;I2C_Write@data stored from wreg
  3819  0013BA  6E29               	movwf	I2C_Write@data,c
  3820                           
  3821                           ;i2c.c: 61: SSPBUF = data;
  3822  0013BC  C029  FFC9         	movff	I2C_Write@data,4041	;volatile
  3823                           
  3824                           ;i2c.c: 62: I2C_Ready();
  3825  0013C0  EC23  F00A         	call	_I2C_Ready	;wreg free
  3826                           
  3827                           ;i2c.c: 63: if (ACKSTAT)
  3828  0013C4  ACC5               	btfss	4037,6,c	;volatile
  3829  0013C6  D002               	goto	l392
  3830                           
  3831                           ;i2c.c: 64: return 1;
  3832  0013C8  0E01               	movlw	1
  3833  0013CA  0012               	return	
  3834  0013CC                     l392:
  3835                           
  3836                           ;i2c.c: 65: else
  3837                           ;i2c.c: 66: return 2;
  3838  0013CC  0E02               	movlw	2
  3839  0013CE  0012               	return	
  3840  0013D0                     __end_of_I2C_Write:
  3841                           	opt stack 0
  3842                           tosu	equ	0xFFF
  3843                           tosh	equ	0xFFE
  3844                           tosl	equ	0xFFD
  3845                           pclath	equ	0xFFA
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           intcon	equ	0xFF2
  3853                           intcon2	equ	0xFF1
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           indf1	equ	0xFE7
  3857                           postdec1	equ	0xFE5
  3858                           fsr1h	equ	0xFE2
  3859                           fsr1l	equ	0xFE1
  3860                           indf2	equ	0xFDF
  3861                           postinc2	equ	0xFDE
  3862                           postdec2	equ	0xFDD
  3863                           fsr2h	equ	0xFDA
  3864                           fsr2l	equ	0xFD9
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _I2C_Read *****************
  3868 ;; Defined at:
  3869 ;;		line 82 in file "i2c.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  flag            1    wreg     unsigned char 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  flag            1   40[COMRAM] unsigned char 
  3874 ;;  buffer          1   41[COMRAM] unsigned char 
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      unsigned char 
  3877 ;; Registers used:
  3878 ;;		wreg, status,2, cstack
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3884 ;;      Params:         0       0       0       0       0       0       0       0       0
  3885 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3886 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3887 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3888 ;;Total ram usage:        2 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    4
  3891 ;; This function calls:
  3892 ;;		_I2C_Ack
  3893 ;;		_I2C_Nack
  3894 ;;		_I2C_Ready
  3895 ;; This function is called by:
  3896 ;;		_magnetoGetCord
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text27
  3901  0012B8                     __ptext27:
  3902                           	opt stack 0
  3903  0012B8                     _I2C_Read:
  3904                           	opt stack 25
  3905                           
  3906                           ;incstack = 0
  3907                           ;I2C_Read@flag stored from wreg
  3908  0012B8  6E29               	movwf	I2C_Read@flag,c
  3909                           
  3910                           ;i2c.c: 84: char buffer;
  3911                           ;i2c.c: 85: RCEN = 1;
  3912  0012BA  86C5               	bsf	4037,3,c	;volatile
  3913  0012BC  A0C7               	btfss	4039,0,c	;volatile
  3914  0012BE  D7FE               	goto	l410
  3915                           
  3916                           ;i2c.c: 87: buffer = SSPBUF;
  3917  0012C0  CFC9 F02A          	movff	4041,I2C_Read@buffer	;volatile
  3918                           
  3919                           ;i2c.c: 88: if(flag==0)
  3920  0012C4  5029               	movf	I2C_Read@flag,w,c
  3921  0012C6  A4D8               	btfss	status,2,c
  3922  0012C8  D003               	goto	l412
  3923                           
  3924                           ;i2c.c: 89: I2C_Ack();
  3925  0012CA  EC1E  F00A         	call	_I2C_Ack	;wreg free
  3926  0012CE  D002               	goto	l413
  3927  0012D0                     l412:
  3928                           
  3929                           ;i2c.c: 90: else
  3930                           ;i2c.c: 91: I2C_Nack();
  3931  0012D0  EC19  F00A         	call	_I2C_Nack	;wreg free
  3932  0012D4                     l413:
  3933                           
  3934                           ;i2c.c: 92: I2C_Ready();
  3935  0012D4  EC23  F00A         	call	_I2C_Ready	;wreg free
  3936                           
  3937                           ;i2c.c: 93: return(buffer);
  3938  0012D8  502A               	movf	I2C_Read@buffer,w,c
  3939  0012DA  0012               	return	
  3940  0012DC                     __end_of_I2C_Read:
  3941                           	opt stack 0
  3942                           tosu	equ	0xFFF
  3943                           tosh	equ	0xFFE
  3944                           tosl	equ	0xFFD
  3945                           pclath	equ	0xFFA
  3946                           tblptru	equ	0xFF8
  3947                           tblptrh	equ	0xFF7
  3948                           tblptrl	equ	0xFF6
  3949                           tablat	equ	0xFF5
  3950                           prodh	equ	0xFF4
  3951                           prodl	equ	0xFF3
  3952                           intcon	equ	0xFF2
  3953                           intcon2	equ	0xFF1
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           indf1	equ	0xFE7
  3957                           postdec1	equ	0xFE5
  3958                           fsr1h	equ	0xFE2
  3959                           fsr1l	equ	0xFE1
  3960                           indf2	equ	0xFDF
  3961                           postinc2	equ	0xFDE
  3962                           postdec2	equ	0xFDD
  3963                           fsr2h	equ	0xFDA
  3964                           fsr2l	equ	0xFD9
  3965                           status	equ	0xFD8
  3966                           
  3967 ;; *************** function _I2C_Ready *****************
  3968 ;; Defined at:
  3969 ;;		line 105 in file "i2c.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		None
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3983 ;;      Params:         0       0       0       0       0       0       0       0       0
  3984 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3986 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    3
  3990 ;; This function calls:
  3991 ;;		Nothing
  3992 ;; This function is called by:
  3993 ;;		_I2C_Write
  3994 ;;		_I2C_Read
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           	psect	text28
  3999  001446                     __ptext28:
  4000                           	opt stack 0
  4001  001446                     _I2C_Ready:
  4002                           	opt stack 25
  4003                           
  4004                           ;i2c.c: 107: while(!SSPIF);
  4005                           
  4006                           ;incstack = 0
  4007  001446  A69E               	btfss	3998,3,c	;volatile
  4008  001448  D7FE               	goto	_I2C_Ready
  4009                           
  4010                           ;i2c.c: 108: SSPIF=0;
  4011  00144A  969E               	bcf	3998,3,c	;volatile
  4012  00144C  0012               	return		;funcret
  4013  00144E                     __end_of_I2C_Ready:
  4014                           	opt stack 0
  4015                           tosu	equ	0xFFF
  4016                           tosh	equ	0xFFE
  4017                           tosl	equ	0xFFD
  4018                           pclath	equ	0xFFA
  4019                           tblptru	equ	0xFF8
  4020                           tblptrh	equ	0xFF7
  4021                           tblptrl	equ	0xFF6
  4022                           tablat	equ	0xFF5
  4023                           prodh	equ	0xFF4
  4024                           prodl	equ	0xFF3
  4025                           intcon	equ	0xFF2
  4026                           intcon2	equ	0xFF1
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           indf1	equ	0xFE7
  4030                           postdec1	equ	0xFE5
  4031                           fsr1h	equ	0xFE2
  4032                           fsr1l	equ	0xFE1
  4033                           indf2	equ	0xFDF
  4034                           postinc2	equ	0xFDE
  4035                           postdec2	equ	0xFDD
  4036                           fsr2h	equ	0xFDA
  4037                           fsr2l	equ	0xFD9
  4038                           status	equ	0xFD8
  4039                           
  4040 ;; *************** function _I2C_Nack *****************
  4041 ;; Defined at:
  4042 ;;		line 76 in file "i2c.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      void 
  4049 ;; Registers used:
  4050 ;;		None
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4056 ;;      Params:         0       0       0       0       0       0       0       0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4058 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4059 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4060 ;;Total ram usage:        0 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    3
  4063 ;; This function calls:
  4064 ;;		Nothing
  4065 ;; This function is called by:
  4066 ;;		_I2C_Read
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text29
  4071  001432                     __ptext29:
  4072                           	opt stack 0
  4073  001432                     _I2C_Nack:
  4074                           	opt stack 25
  4075                           
  4076                           ;i2c.c: 78: ACKDT = 1;
  4077                           
  4078                           ;incstack = 0
  4079  001432  8AC5               	bsf	4037,5,c	;volatile
  4080                           
  4081                           ;i2c.c: 79: ACKEN = 1;
  4082  001434  88C5               	bsf	4037,4,c	;volatile
  4083  001436  A8C5               	btfss	4037,4,c	;volatile
  4084  001438  0012               	return	
  4085  00143A  D7FD               	goto	l404
  4086  00143C                     __end_of_I2C_Nack:
  4087                           	opt stack 0
  4088                           tosu	equ	0xFFF
  4089                           tosh	equ	0xFFE
  4090                           tosl	equ	0xFFD
  4091                           pclath	equ	0xFFA
  4092                           tblptru	equ	0xFF8
  4093                           tblptrh	equ	0xFF7
  4094                           tblptrl	equ	0xFF6
  4095                           tablat	equ	0xFF5
  4096                           prodh	equ	0xFF4
  4097                           prodl	equ	0xFF3
  4098                           intcon	equ	0xFF2
  4099                           intcon2	equ	0xFF1
  4100                           postinc0	equ	0xFEE
  4101                           wreg	equ	0xFE8
  4102                           indf1	equ	0xFE7
  4103                           postdec1	equ	0xFE5
  4104                           fsr1h	equ	0xFE2
  4105                           fsr1l	equ	0xFE1
  4106                           indf2	equ	0xFDF
  4107                           postinc2	equ	0xFDE
  4108                           postdec2	equ	0xFDD
  4109                           fsr2h	equ	0xFDA
  4110                           fsr2l	equ	0xFD9
  4111                           status	equ	0xFD8
  4112                           
  4113 ;; *************** function _I2C_Ack *****************
  4114 ;; Defined at:
  4115 ;;		line 69 in file "i2c.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		None
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4129 ;;      Params:         0       0       0       0       0       0       0       0       0
  4130 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4131 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4132 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4133 ;;Total ram usage:        0 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    3
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_I2C_Read
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text30
  4144  00143C                     __ptext30:
  4145                           	opt stack 0
  4146  00143C                     _I2C_Ack:
  4147                           	opt stack 25
  4148                           
  4149                           ;i2c.c: 71: ACKDT = 0;
  4150                           
  4151                           ;incstack = 0
  4152  00143C  9AC5               	bcf	4037,5,c	;volatile
  4153                           
  4154                           ;i2c.c: 72: ACKEN = 1;
  4155  00143E  88C5               	bsf	4037,4,c	;volatile
  4156  001440  A8C5               	btfss	4037,4,c	;volatile
  4157  001442  0012               	return	
  4158  001444  D7FD               	goto	l398
  4159  001446                     __end_of_I2C_Ack:
  4160                           	opt stack 0
  4161                           tosu	equ	0xFFF
  4162                           tosh	equ	0xFFE
  4163                           tosl	equ	0xFFD
  4164                           pclath	equ	0xFFA
  4165                           tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           prodh	equ	0xFF4
  4170                           prodl	equ	0xFF3
  4171                           intcon	equ	0xFF2
  4172                           intcon2	equ	0xFF1
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           indf1	equ	0xFE7
  4176                           postdec1	equ	0xFE5
  4177                           fsr1h	equ	0xFE2
  4178                           fsr1l	equ	0xFE1
  4179                           indf2	equ	0xFDF
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186 ;; *************** function _lcdInit *****************
  4187 ;; Defined at:
  4188 ;;		line 16 in file "display.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  lcd             2    2[BANK0 ] PTR struct .
  4191 ;;		 -> lcd(33), 
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;		None
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4203 ;;      Params:         0       2       0       0       0       0       0       0       0
  4204 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4205 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4206 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4207 ;;Total ram usage:        2 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    7
  4210 ;; This function calls:
  4211 ;;		_BusyXLCD
  4212 ;;		_OpenXLCD
  4213 ;;		_WriteCmdXLCD
  4214 ;;		_lcdCleanAll
  4215 ;; This function is called by:
  4216 ;;		_main
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text31
  4221  001104                     __ptext31:
  4222                           	opt stack 0
  4223  001104                     _lcdInit:
  4224                           	opt stack 23
  4225                           
  4226                           ;display.c: 17: TRISD = 0;
  4227                           
  4228                           ;incstack = 0
  4229  001104  0E00               	movlw	0
  4230  001106  6E95               	movwf	3989,c	;volatile
  4231                           
  4232                           ;display.c: 19: OpenXLCD(0b00101100 & 0b00111000);
  4233  001108  0E28               	movlw	40
  4234  00110A  ECB2  F006         	call	_OpenXLCD
  4235  00110E  EC01  F009         	call	_BusyXLCD	;wreg free
  4236  001112  0900               	iorlw	0
  4237  001114  A4D8               	btfss	status,2,c
  4238  001116  D7FB               	goto	l127
  4239                           
  4240                           ;display.c: 21: WriteCmdXLCD(0x06);
  4241  001118  0E06               	movlw	6
  4242  00111A  ECE2  F008         	call	_WriteCmdXLCD
  4243  00111E  EC01  F009         	call	_BusyXLCD	;wreg free
  4244  001122  0900               	iorlw	0
  4245  001124  A4D8               	btfss	status,2,c
  4246  001126  D7FB               	goto	l130
  4247                           
  4248                           ;display.c: 23: WriteCmdXLCD(0x0C);
  4249  001128  0E0C               	movlw	12
  4250  00112A  ECE2  F008         	call	_WriteCmdXLCD
  4251  00112E  EC01  F009         	call	_BusyXLCD	;wreg free
  4252  001132  0900               	iorlw	0
  4253  001134  A4D8               	btfss	status,2,c
  4254  001136  D7FB               	goto	l133
  4255                           
  4256                           ;display.c: 26: lcdCleanAll(lcd);
  4257  001138  C0A9  F0A7         	movff	lcdInit@lcd,lcdCleanAll@lcd
  4258  00113C  C0AA  F0A8         	movff	lcdInit@lcd+1,lcdCleanAll@lcd+1
  4259  001140  ECF3  F009         	call	_lcdCleanAll	;wreg free
  4260  001144  0012               	return		;funcret
  4261  001146                     __end_of_lcdInit:
  4262                           	opt stack 0
  4263                           tosu	equ	0xFFF
  4264                           tosh	equ	0xFFE
  4265                           tosl	equ	0xFFD
  4266                           pclath	equ	0xFFA
  4267                           tblptru	equ	0xFF8
  4268                           tblptrh	equ	0xFF7
  4269                           tblptrl	equ	0xFF6
  4270                           tablat	equ	0xFF5
  4271                           prodh	equ	0xFF4
  4272                           prodl	equ	0xFF3
  4273                           intcon	equ	0xFF2
  4274                           intcon2	equ	0xFF1
  4275                           postinc0	equ	0xFEE
  4276                           wreg	equ	0xFE8
  4277                           indf1	equ	0xFE7
  4278                           postdec1	equ	0xFE5
  4279                           fsr1h	equ	0xFE2
  4280                           fsr1l	equ	0xFE1
  4281                           indf2	equ	0xFDF
  4282                           postinc2	equ	0xFDE
  4283                           postdec2	equ	0xFDD
  4284                           fsr2h	equ	0xFDA
  4285                           fsr2l	equ	0xFD9
  4286                           status	equ	0xFD8
  4287                           
  4288 ;; *************** function _lcdCleanAll *****************
  4289 ;; Defined at:
  4290 ;;		line 46 in file "display.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  lcd             2    0[BANK0 ] PTR struct .
  4293 ;;		 -> lcd(33), 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;		None
  4296 ;; Return value:  Size  Location     Type
  4297 ;;                  1    wreg      void 
  4298 ;; Registers used:
  4299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4305 ;;      Params:         0       2       0       0       0       0       0       0       0
  4306 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4307 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4308 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4309 ;;Total ram usage:        2 bytes
  4310 ;; Hardware stack levels used:    1
  4311 ;; Hardware stack levels required when called:    6
  4312 ;; This function calls:
  4313 ;;		_lcdClean
  4314 ;;		_lcdMemClean
  4315 ;; This function is called by:
  4316 ;;		_lcdInit
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text32
  4321  0013E6                     __ptext32:
  4322                           	opt stack 0
  4323  0013E6                     _lcdCleanAll:
  4324                           	opt stack 23
  4325                           
  4326                           ;display.c: 47: lcdClean();
  4327                           
  4328                           ;incstack = 0
  4329  0013E6  EC9C  F009         	call	_lcdClean	;wreg free
  4330                           
  4331                           ;display.c: 48: lcdMemClean(lcd);
  4332  0013EA  C0A7  F029         	movff	lcdCleanAll@lcd,lcdMemClean@lcd
  4333  0013EE  C0A8  F02A         	movff	lcdCleanAll@lcd+1,lcdMemClean@lcd+1
  4334  0013F2  EC51  F007         	call	_lcdMemClean	;wreg free
  4335  0013F6  0012               	return		;funcret
  4336  0013F8                     __end_of_lcdCleanAll:
  4337                           	opt stack 0
  4338                           tosu	equ	0xFFF
  4339                           tosh	equ	0xFFE
  4340                           tosl	equ	0xFFD
  4341                           pclath	equ	0xFFA
  4342                           tblptru	equ	0xFF8
  4343                           tblptrh	equ	0xFF7
  4344                           tblptrl	equ	0xFF6
  4345                           tablat	equ	0xFF5
  4346                           prodh	equ	0xFF4
  4347                           prodl	equ	0xFF3
  4348                           intcon	equ	0xFF2
  4349                           intcon2	equ	0xFF1
  4350                           postinc0	equ	0xFEE
  4351                           wreg	equ	0xFE8
  4352                           indf1	equ	0xFE7
  4353                           postdec1	equ	0xFE5
  4354                           fsr1h	equ	0xFE2
  4355                           fsr1l	equ	0xFE1
  4356                           indf2	equ	0xFDF
  4357                           postinc2	equ	0xFDE
  4358                           postdec2	equ	0xFDD
  4359                           fsr2h	equ	0xFDA
  4360                           fsr2l	equ	0xFD9
  4361                           status	equ	0xFD8
  4362                           
  4363 ;; *************** function _lcdMemClean *****************
  4364 ;; Defined at:
  4365 ;;		line 38 in file "display.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;  lcd             2   40[COMRAM] PTR struct .
  4368 ;;		 -> lcd(33), 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  i               1   42[COMRAM] unsigned char 
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  1    wreg      void 
  4373 ;; Registers used:
  4374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4380 ;;      Params:         2       0       0       0       0       0       0       0       0
  4381 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4383 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4384 ;;Total ram usage:        3 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    3
  4387 ;; This function calls:
  4388 ;;		Nothing
  4389 ;; This function is called by:
  4390 ;;		_lcdCleanAll
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           	psect	text33
  4395  000EA2                     __ptext33:
  4396                           	opt stack 0
  4397  000EA2                     _lcdMemClean:
  4398                           	opt stack 25
  4399                           
  4400                           ;display.c: 39: for (uint8_t i = 0; i < 16; i++) {
  4401                           
  4402                           ;incstack = 0
  4403  000EA2  0E00               	movlw	0
  4404  000EA4  6E2B               	movwf	lcdMemClean@i,c
  4405  000EA6                     l2247:
  4406  000EA6  0E0F               	movlw	15
  4407  000EA8  642B               	cpfsgt	lcdMemClean@i,c
  4408  000EAA  D001               	goto	l144
  4409  000EAC  D01E               	goto	u1340
  4410  000EAE                     l144:
  4411                           
  4412                           ;display.c: 40: lcd->Memory[0][i] = 0x20;
  4413  000EAE  502B               	movf	lcdMemClean@i,w,c
  4414  000EB0  0D01               	mullw	1
  4415  000EB2  0E01               	movlw	1
  4416  000EB4  26F3               	addwf	prodl,f,c
  4417  000EB6  0E00               	movlw	0
  4418  000EB8  22F4               	addwfc	prodh,f,c
  4419  000EBA  50F3               	movf	prodl,w,c
  4420  000EBC  2429               	addwf	lcdMemClean@lcd,w,c
  4421  000EBE  6ED9               	movwf	fsr2l,c
  4422  000EC0  50F4               	movf	prodh,w,c
  4423  000EC2  202A               	addwfc	lcdMemClean@lcd+1,w,c
  4424  000EC4  6EDA               	movwf	fsr2h,c
  4425  000EC6  0E20               	movlw	32
  4426  000EC8  6EDF               	movwf	indf2,c
  4427                           
  4428                           ;display.c: 41: lcd->Memory[1][i] = 0x20;
  4429  000ECA  502B               	movf	lcdMemClean@i,w,c
  4430  000ECC  0D01               	mullw	1
  4431  000ECE  0E11               	movlw	17
  4432  000ED0  26F3               	addwf	prodl,f,c
  4433  000ED2  0E00               	movlw	0
  4434  000ED4  22F4               	addwfc	prodh,f,c
  4435  000ED6  50F3               	movf	prodl,w,c
  4436  000ED8  2429               	addwf	lcdMemClean@lcd,w,c
  4437  000EDA  6ED9               	movwf	fsr2l,c
  4438  000EDC  50F4               	movf	prodh,w,c
  4439  000EDE  202A               	addwfc	lcdMemClean@lcd+1,w,c
  4440  000EE0  6EDA               	movwf	fsr2h,c
  4441  000EE2  0E20               	movlw	32
  4442  000EE4  6EDF               	movwf	indf2,c
  4443  000EE6  2A2B               	incf	lcdMemClean@i,f,c
  4444  000EE8  D7DE               	goto	l2247
  4445  000EEA                     u1340:
  4446                           
  4447                           ;display.c: 42: }
  4448                           ;display.c: 43: lcd->NeedsRedraw = 1;
  4449  000EEA  C029  FFD9         	movff	lcdMemClean@lcd,fsr2l
  4450  000EEE  C02A  FFDA         	movff	lcdMemClean@lcd+1,fsr2h
  4451  000EF2  0E01               	movlw	1
  4452  000EF4  6EDF               	movwf	indf2,c
  4453  000EF6  0012               	return		;funcret
  4454  000EF8                     __end_of_lcdMemClean:
  4455                           	opt stack 0
  4456                           tosu	equ	0xFFF
  4457                           tosh	equ	0xFFE
  4458                           tosl	equ	0xFFD
  4459                           pclath	equ	0xFFA
  4460                           tblptru	equ	0xFF8
  4461                           tblptrh	equ	0xFF7
  4462                           tblptrl	equ	0xFF6
  4463                           tablat	equ	0xFF5
  4464                           prodh	equ	0xFF4
  4465                           prodl	equ	0xFF3
  4466                           intcon	equ	0xFF2
  4467                           intcon2	equ	0xFF1
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           indf1	equ	0xFE7
  4471                           postdec1	equ	0xFE5
  4472                           fsr1h	equ	0xFE2
  4473                           fsr1l	equ	0xFE1
  4474                           indf2	equ	0xFDF
  4475                           postinc2	equ	0xFDE
  4476                           postdec2	equ	0xFDD
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function _lcdClean *****************
  4482 ;; Defined at:
  4483 ;;		line 30 in file "display.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;		None
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  1    wreg      void 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4497 ;;      Params:         0       0       0       0       0       0       0       0       0
  4498 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4499 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4500 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4501 ;;Total ram usage:        0 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    5
  4504 ;; This function calls:
  4505 ;;		_BusyXLCD
  4506 ;;		_WriteCmdXLCD
  4507 ;;		_delay_ms
  4508 ;; This function is called by:
  4509 ;;		_lcdCleanAll
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text34
  4514  001338                     __ptext34:
  4515                           	opt stack 0
  4516  001338                     _lcdClean:
  4517                           	opt stack 23
  4518                           
  4519                           ;display.c: 31: while (BusyXLCD());
  4520                           
  4521                           ;incstack = 0
  4522  001338  EC01  F009         	call	_BusyXLCD	;wreg free
  4523  00133C  0900               	iorlw	0
  4524  00133E  A4D8               	btfss	status,2,c
  4525  001340  D7FB               	goto	_lcdClean
  4526                           
  4527                           ;display.c: 32: WriteCmdXLCD(0x01);
  4528  001342  0E01               	movlw	1
  4529  001344  ECE2  F008         	call	_WriteCmdXLCD
  4530                           
  4531                           ;display.c: 34: delay_ms(80);
  4532  001348  0E00               	movlw	0
  4533  00134A  6E2A               	movwf	delay_ms@milis+1,c
  4534  00134C  0E50               	movlw	80
  4535  00134E  6E29               	movwf	delay_ms@milis,c
  4536  001350  ECB9  F009         	call	_delay_ms	;wreg free
  4537  001354  0012               	return		;funcret
  4538  001356                     __end_of_lcdClean:
  4539                           	opt stack 0
  4540                           tosu	equ	0xFFF
  4541                           tosh	equ	0xFFE
  4542                           tosl	equ	0xFFD
  4543                           pclath	equ	0xFFA
  4544                           tblptru	equ	0xFF8
  4545                           tblptrh	equ	0xFF7
  4546                           tblptrl	equ	0xFF6
  4547                           tablat	equ	0xFF5
  4548                           prodh	equ	0xFF4
  4549                           prodl	equ	0xFF3
  4550                           intcon	equ	0xFF2
  4551                           intcon2	equ	0xFF1
  4552                           postinc0	equ	0xFEE
  4553                           wreg	equ	0xFE8
  4554                           indf1	equ	0xFE7
  4555                           postdec1	equ	0xFE5
  4556                           fsr1h	equ	0xFE2
  4557                           fsr1l	equ	0xFE1
  4558                           indf2	equ	0xFDF
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           fsr2h	equ	0xFDA
  4562                           fsr2l	equ	0xFD9
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function _OpenXLCD *****************
  4566 ;; Defined at:
  4567 ;;		line 63 in file "xlcd_mod.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  lcdtype         1    wreg     unsigned char 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  lcdtype         1    0[BANK0 ] unsigned char 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  1    wreg      void 
  4574 ;; Registers used:
  4575 ;;		wreg, status,2, status,0, cstack
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4581 ;;      Params:         0       0       0       0       0       0       0       0       0
  4582 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4583 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4584 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4585 ;;Total ram usage:        1 bytes
  4586 ;; Hardware stack levels used:    1
  4587 ;; Hardware stack levels required when called:    5
  4588 ;; This function calls:
  4589 ;;		_BusyXLCD
  4590 ;;		_Delay10KTCYx
  4591 ;;		_DelayPORXLCD
  4592 ;;		_SetDDRamAddr
  4593 ;;		_WriteCmdXLCD
  4594 ;; This function is called by:
  4595 ;;		_lcdInit
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           	psect	text35
  4600  000D64                     __ptext35:
  4601                           	opt stack 0
  4602  000D64                     _OpenXLCD:
  4603                           	opt stack 24
  4604                           
  4605                           ;incstack = 0
  4606                           ;OpenXLCD@lcdtype stored from wreg
  4607  000D64  0100               	movlb	0	; () banked
  4608  000D66  6FA7               	movwf	OpenXLCD@lcdtype& (0+255),b
  4609                           
  4610                           ;xlcd_mod.c: 75: PORTD &= 0xf0;
  4611  000D68  0EF0               	movlw	240
  4612  000D6A  1683               	andwf	3971,f,c	;volatile
  4613                           
  4614                           ;xlcd_mod.c: 76: TRISD &= 0xF0;
  4615  000D6C  0EF0               	movlw	240
  4616  000D6E  1695               	andwf	3989,f,c	;volatile
  4617                           
  4618                           ;xlcd_mod.c: 79: TRISDbits.TRISD5 = 0;
  4619  000D70  9A95               	bcf	3989,5,c	;volatile
  4620                           
  4621                           ;xlcd_mod.c: 80: TRISDbits.TRISD6 = 0;
  4622  000D72  9C95               	bcf	3989,6,c	;volatile
  4623                           
  4624                           ;xlcd_mod.c: 81: TRISDbits.TRISD4 = 0;
  4625  000D74  9895               	bcf	3989,4,c	;volatile
  4626                           
  4627                           ;xlcd_mod.c: 82: LATDbits.LATD5 = 0;
  4628  000D76  9A8C               	bcf	3980,5,c	;volatile
  4629                           
  4630                           ;xlcd_mod.c: 83: LATDbits.LATD6 = 0;
  4631  000D78  9C8C               	bcf	3980,6,c	;volatile
  4632                           
  4633                           ;xlcd_mod.c: 84: LATDbits.LATD4 = 0;
  4634  000D7A  988C               	bcf	3980,4,c	;volatile
  4635                           
  4636                           ;xlcd_mod.c: 87: DelayPORXLCD();
  4637  000D7C  ECFC  F009         	call	_DelayPORXLCD	;wreg free
  4638                           
  4639                           ;xlcd_mod.c: 89: WriteCmdXLCD(0x30);
  4640  000D80  0E30               	movlw	48
  4641  000D82  ECE2  F008         	call	_WriteCmdXLCD
  4642                           
  4643                           ;xlcd_mod.c: 90: Delay10KTCYx(0x05);
  4644  000D86  0E05               	movlw	5
  4645  000D88  ECE8  F009         	call	_Delay10KTCYx
  4646                           
  4647                           ;xlcd_mod.c: 92: WriteCmdXLCD(0x30);
  4648  000D8C  0E30               	movlw	48
  4649  000D8E  ECE2  F008         	call	_WriteCmdXLCD
  4650                           
  4651                           ;xlcd_mod.c: 93: Delay10KTCYx(0x01);
  4652  000D92  0E01               	movlw	1
  4653  000D94  ECE8  F009         	call	_Delay10KTCYx
  4654                           
  4655                           ;xlcd_mod.c: 96: WriteCmdXLCD(0x32);
  4656  000D98  0E32               	movlw	50
  4657  000D9A  ECE2  F008         	call	_WriteCmdXLCD
  4658  000D9E  EC01  F009         	call	_BusyXLCD	;wreg free
  4659  000DA2  0900               	iorlw	0
  4660  000DA4  A4D8               	btfss	status,2,c
  4661  000DA6  D7FB               	goto	l233
  4662  000DA8                     u2090:
  4663                           
  4664                           ;xlcd_mod.c: 102: while (BusyXLCD());
  4665  000DA8  EC01  F009         	call	_BusyXLCD	;wreg free
  4666  000DAC  0900               	iorlw	0
  4667  000DAE  A4D8               	btfss	status,2,c
  4668  000DB0  D7FB               	goto	u2090
  4669                           
  4670                           ;xlcd_mod.c: 103: WriteCmdXLCD(lcdtype);
  4671  000DB2  0100               	movlb	0	; () banked
  4672  000DB4  51A7               	movf	OpenXLCD@lcdtype& (0+255),w,b
  4673  000DB6  ECE2  F008         	call	_WriteCmdXLCD
  4674  000DBA  EC01  F009         	call	_BusyXLCD	;wreg free
  4675  000DBE  0900               	iorlw	0
  4676  000DC0  A4D8               	btfss	status,2,c
  4677  000DC2  D7FB               	goto	l239
  4678                           
  4679                           ;xlcd_mod.c: 107: WriteCmdXLCD(0b00001011 & 0b00001101 & 0b00001110);
  4680  000DC4  0E08               	movlw	8
  4681  000DC6  ECE2  F008         	call	_WriteCmdXLCD
  4682  000DCA  EC01  F009         	call	_BusyXLCD	;wreg free
  4683  000DCE  0900               	iorlw	0
  4684  000DD0  A4D8               	btfss	status,2,c
  4685  000DD2  D7FB               	goto	l242
  4686                           
  4687                           ;xlcd_mod.c: 109: WriteCmdXLCD(0b00001111 & 0b00001111 & 0b00001111);
  4688  000DD4  0E0F               	movlw	15
  4689  000DD6  ECE2  F008         	call	_WriteCmdXLCD
  4690  000DDA  EC01  F009         	call	_BusyXLCD	;wreg free
  4691  000DDE  0900               	iorlw	0
  4692  000DE0  A4D8               	btfss	status,2,c
  4693  000DE2  D7FB               	goto	l245
  4694                           
  4695                           ;xlcd_mod.c: 113: WriteCmdXLCD(0x01);
  4696  000DE4  0E01               	movlw	1
  4697  000DE6  ECE2  F008         	call	_WriteCmdXLCD
  4698  000DEA  EC01  F009         	call	_BusyXLCD	;wreg free
  4699  000DEE  0900               	iorlw	0
  4700  000DF0  A4D8               	btfss	status,2,c
  4701  000DF2  D7FB               	goto	l248
  4702                           
  4703                           ;xlcd_mod.c: 117: WriteCmdXLCD(0b00000100);
  4704  000DF4  0E04               	movlw	4
  4705  000DF6  ECE2  F008         	call	_WriteCmdXLCD
  4706  000DFA  EC01  F009         	call	_BusyXLCD	;wreg free
  4707  000DFE  0900               	iorlw	0
  4708  000E00  A4D8               	btfss	status,2,c
  4709  000E02  D7FB               	goto	l251
  4710                           
  4711                           ;xlcd_mod.c: 121: SetDDRamAddr(0x80);
  4712  000E04  0E80               	movlw	128
  4713  000E06  ECA6  F007         	call	_SetDDRamAddr
  4714  000E0A  0012               	return	
  4715  000E0C                     __end_of_OpenXLCD:
  4716                           	opt stack 0
  4717                           tosu	equ	0xFFF
  4718                           tosh	equ	0xFFE
  4719                           tosl	equ	0xFFD
  4720                           pclath	equ	0xFFA
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           intcon	equ	0xFF2
  4728                           intcon2	equ	0xFF1
  4729                           postinc0	equ	0xFEE
  4730                           wreg	equ	0xFE8
  4731                           indf1	equ	0xFE7
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           fsr2h	equ	0xFDA
  4739                           fsr2l	equ	0xFD9
  4740                           status	equ	0xFD8
  4741                           
  4742 ;; *************** function _WriteCmdXLCD *****************
  4743 ;; Defined at:
  4744 ;;		line 315 in file "xlcd_mod.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;  cmd             1    wreg     unsigned char 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;  cmd             1   42[COMRAM] unsigned char 
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  1    wreg      void 
  4751 ;; Registers used:
  4752 ;;		wreg, status,2, status,0, cstack
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4758 ;;      Params:         0       0       0       0       0       0       0       0       0
  4759 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4760 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4761 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4762 ;;Total ram usage:        1 bytes
  4763 ;; Hardware stack levels used:    1
  4764 ;; Hardware stack levels required when called:    4
  4765 ;; This function calls:
  4766 ;;		_DelayFor18TCY
  4767 ;; This function is called by:
  4768 ;;		_lcdInit
  4769 ;;		_lcdClean
  4770 ;;		_OpenXLCD
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           	psect	text36
  4775  0011C4                     __ptext36:
  4776                           	opt stack 0
  4777  0011C4                     _WriteCmdXLCD:
  4778                           	opt stack 23
  4779                           
  4780                           ;incstack = 0
  4781                           ;WriteCmdXLCD@cmd stored from wreg
  4782  0011C4  6E2B               	movwf	WriteCmdXLCD@cmd,c
  4783                           
  4784                           ;xlcd_mod.c: 334: TRISD &= 0xf0;
  4785  0011C6  0EF0               	movlw	240
  4786  0011C8  1695               	andwf	3989,f,c	;volatile
  4787                           
  4788                           ;xlcd_mod.c: 335: PORTD &= 0xf0;
  4789  0011CA  0EF0               	movlw	240
  4790  0011CC  1683               	andwf	3971,f,c	;volatile
  4791                           
  4792                           ;xlcd_mod.c: 336: PORTD |= (cmd >> 4)&0x0f;
  4793  0011CE  382B               	swapf	WriteCmdXLCD@cmd,w,c
  4794  0011D0  0B0F               	andlw	15
  4795  0011D2  0B0F               	andlw	15
  4796  0011D4  1283               	iorwf	3971,f,c	;volatile
  4797                           
  4798                           ;xlcd_mod.c: 338: LATDbits.LATD5 = 0;
  4799  0011D6  9A8C               	bcf	3980,5,c	;volatile
  4800                           
  4801                           ;xlcd_mod.c: 339: LATDbits.LATD6 = 0;
  4802  0011D8  9C8C               	bcf	3980,6,c	;volatile
  4803                           
  4804                           ;xlcd_mod.c: 340: DelayFor18TCY();
  4805  0011DA  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  4806                           
  4807                           ;xlcd_mod.c: 341: LATDbits.LATD4 = 1;
  4808  0011DE  888C               	bsf	3980,4,c	;volatile
  4809                           
  4810                           ;xlcd_mod.c: 342: DelayFor18TCY();
  4811  0011E0  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  4812                           
  4813                           ;xlcd_mod.c: 343: LATDbits.LATD4 = 0;
  4814  0011E4  988C               	bcf	3980,4,c	;volatile
  4815                           
  4816                           ;xlcd_mod.c: 348: PORTD &= 0xf0;
  4817  0011E6  0EF0               	movlw	240
  4818  0011E8  1683               	andwf	3971,f,c	;volatile
  4819                           
  4820                           ;xlcd_mod.c: 349: PORTD |= cmd & 0x0f;
  4821  0011EA  502B               	movf	WriteCmdXLCD@cmd,w,c
  4822  0011EC  0B0F               	andlw	15
  4823  0011EE  1283               	iorwf	3971,f,c	;volatile
  4824                           
  4825                           ;xlcd_mod.c: 351: DelayFor18TCY();
  4826  0011F0  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  4827                           
  4828                           ;xlcd_mod.c: 352: LATDbits.LATD4 = 1;
  4829  0011F4  888C               	bsf	3980,4,c	;volatile
  4830                           
  4831                           ;xlcd_mod.c: 353: DelayFor18TCY();
  4832  0011F6  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  4833                           
  4834                           ;xlcd_mod.c: 354: LATDbits.LATD4 = 0;
  4835  0011FA  988C               	bcf	3980,4,c	;volatile
  4836                           
  4837                           ;xlcd_mod.c: 358: TRISD |= 0x0f;
  4838  0011FC  0E0F               	movlw	15
  4839  0011FE  1295               	iorwf	3989,f,c	;volatile
  4840  001200  0012               	return	
  4841  001202                     __end_of_WriteCmdXLCD:
  4842                           	opt stack 0
  4843                           tosu	equ	0xFFF
  4844                           tosh	equ	0xFFE
  4845                           tosl	equ	0xFFD
  4846                           pclath	equ	0xFFA
  4847                           tblptru	equ	0xFF8
  4848                           tblptrh	equ	0xFF7
  4849                           tblptrl	equ	0xFF6
  4850                           tablat	equ	0xFF5
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           intcon	equ	0xFF2
  4854                           intcon2	equ	0xFF1
  4855                           postinc0	equ	0xFEE
  4856                           wreg	equ	0xFE8
  4857                           indf1	equ	0xFE7
  4858                           postdec1	equ	0xFE5
  4859                           fsr1h	equ	0xFE2
  4860                           fsr1l	equ	0xFE1
  4861                           indf2	equ	0xFDF
  4862                           postinc2	equ	0xFDE
  4863                           postdec2	equ	0xFDD
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868 ;; *************** function _SetDDRamAddr *****************
  4869 ;; Defined at:
  4870 ;;		line 266 in file "xlcd_mod.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  DDaddr          1    wreg     unsigned char 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  DDaddr          1   45[COMRAM] unsigned char 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, status,0, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4884 ;;      Params:         0       0       0       0       0       0       0       0       0
  4885 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4886 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4887 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4888 ;;Total ram usage:        4 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    4
  4891 ;; This function calls:
  4892 ;;		_DelayFor18TCY
  4893 ;; This function is called by:
  4894 ;;		_lcdRuntime
  4895 ;;		_OpenXLCD
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text37
  4900  000F4C                     __ptext37:
  4901                           	opt stack 0
  4902  000F4C                     _SetDDRamAddr:
  4903                           	opt stack 24
  4904                           
  4905                           ;incstack = 0
  4906                           ;SetDDRamAddr@DDaddr stored from wreg
  4907  000F4C  6E2E               	movwf	SetDDRamAddr@DDaddr,c
  4908                           
  4909                           ;xlcd_mod.c: 285: TRISD &= 0xf0;
  4910  000F4E  0EF0               	movlw	240
  4911  000F50  1695               	andwf	3989,f,c	;volatile
  4912                           
  4913                           ;xlcd_mod.c: 286: PORTD &= 0xf0;
  4914  000F52  0EF0               	movlw	240
  4915  000F54  1683               	andwf	3971,f,c	;volatile
  4916                           
  4917                           ;xlcd_mod.c: 287: PORTD |= (((DDaddr | 0b10000000) >> 4) & 0x0f);
  4918  000F56  502E               	movf	SetDDRamAddr@DDaddr,w,c
  4919  000F58  6E2B               	movwf	??_SetDDRamAddr& (0+255),c
  4920  000F5A  6A2C               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  4921  000F5C  8E2B               	bsf	??_SetDDRamAddr,7,c
  4922  000F5E  0E04               	movlw	4
  4923  000F60  6E2D               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  4924  000F62                     u2085:
  4925  000F62  342C               	rlcf	??_SetDDRamAddr+1,w,c
  4926  000F64  322C               	rrcf	??_SetDDRamAddr+1,f,c
  4927  000F66  322B               	rrcf	??_SetDDRamAddr,f,c
  4928  000F68  2E2D               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  4929  000F6A  D7FB               	goto	u2085
  4930  000F6C  502B               	movf	??_SetDDRamAddr,w,c
  4931  000F6E  0B0F               	andlw	15
  4932  000F70  1283               	iorwf	3971,f,c	;volatile
  4933                           
  4934                           ;xlcd_mod.c: 289: LATDbits.LATD5 = 0;
  4935  000F72  9A8C               	bcf	3980,5,c	;volatile
  4936                           
  4937                           ;xlcd_mod.c: 290: LATDbits.LATD6 = 0;
  4938  000F74  9C8C               	bcf	3980,6,c	;volatile
  4939                           
  4940                           ;xlcd_mod.c: 291: DelayFor18TCY();
  4941  000F76  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  4942                           
  4943                           ;xlcd_mod.c: 292: LATDbits.LATD4 = 1;
  4944  000F7A  888C               	bsf	3980,4,c	;volatile
  4945                           
  4946                           ;xlcd_mod.c: 293: DelayFor18TCY();
  4947  000F7C  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  4948                           
  4949                           ;xlcd_mod.c: 294: LATDbits.LATD4 = 0;
  4950  000F80  988C               	bcf	3980,4,c	;volatile
  4951                           
  4952                           ;xlcd_mod.c: 299: PORTD &= 0xf0;
  4953  000F82  0EF0               	movlw	240
  4954  000F84  1683               	andwf	3971,f,c	;volatile
  4955                           
  4956                           ;xlcd_mod.c: 300: PORTD |= (DDaddr & 0x0f);
  4957  000F86  502E               	movf	SetDDRamAddr@DDaddr,w,c
  4958  000F88  0B0F               	andlw	15
  4959  000F8A  1283               	iorwf	3971,f,c	;volatile
  4960                           
  4961                           ;xlcd_mod.c: 302: DelayFor18TCY();
  4962  000F8C  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  4963                           
  4964                           ;xlcd_mod.c: 303: LATDbits.LATD4 = 1;
  4965  000F90  888C               	bsf	3980,4,c	;volatile
  4966                           
  4967                           ;xlcd_mod.c: 304: DelayFor18TCY();
  4968  000F92  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  4969                           
  4970                           ;xlcd_mod.c: 305: LATDbits.LATD4 = 0;
  4971  000F96  988C               	bcf	3980,4,c	;volatile
  4972                           
  4973                           ;xlcd_mod.c: 309: TRISD |= 0x0f;
  4974  000F98  0E0F               	movlw	15
  4975  000F9A  1295               	iorwf	3989,f,c	;volatile
  4976  000F9C  0012               	return	
  4977  000F9E                     __end_of_SetDDRamAddr:
  4978                           	opt stack 0
  4979                           tosu	equ	0xFFF
  4980                           tosh	equ	0xFFE
  4981                           tosl	equ	0xFFD
  4982                           pclath	equ	0xFFA
  4983                           tblptru	equ	0xFF8
  4984                           tblptrh	equ	0xFF7
  4985                           tblptrl	equ	0xFF6
  4986                           tablat	equ	0xFF5
  4987                           prodh	equ	0xFF4
  4988                           prodl	equ	0xFF3
  4989                           intcon	equ	0xFF2
  4990                           intcon2	equ	0xFF1
  4991                           postinc0	equ	0xFEE
  4992                           wreg	equ	0xFE8
  4993                           indf1	equ	0xFE7
  4994                           postdec1	equ	0xFE5
  4995                           fsr1h	equ	0xFE2
  4996                           fsr1l	equ	0xFE1
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           postdec2	equ	0xFDD
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _DelayPORXLCD *****************
  5005 ;; Defined at:
  5006 ;;		line 108 in file "display.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;		None
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, status,2, status,0, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5020 ;;      Params:         0       0       0       0       0       0       0       0       0
  5021 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5023 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5024 ;;Total ram usage:        0 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    4
  5027 ;; This function calls:
  5028 ;;		_delay_ms
  5029 ;; This function is called by:
  5030 ;;		_OpenXLCD
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text38
  5035  0013F8                     __ptext38:
  5036                           	opt stack 0
  5037  0013F8                     _DelayPORXLCD:
  5038                           	opt stack 24
  5039                           
  5040                           ;display.c: 109: delay_ms(60);
  5041                           
  5042                           ;incstack = 0
  5043  0013F8  0E00               	movlw	0
  5044  0013FA  6E2A               	movwf	delay_ms@milis+1,c
  5045  0013FC  0E3C               	movlw	60
  5046  0013FE  6E29               	movwf	delay_ms@milis,c
  5047  001400  ECB9  F009         	call	_delay_ms	;wreg free
  5048  001404  0012               	return		;funcret
  5049  001406                     __end_of_DelayPORXLCD:
  5050                           	opt stack 0
  5051                           tosu	equ	0xFFF
  5052                           tosh	equ	0xFFE
  5053                           tosl	equ	0xFFD
  5054                           pclath	equ	0xFFA
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           intcon	equ	0xFF2
  5062                           intcon2	equ	0xFF1
  5063                           postinc0	equ	0xFEE
  5064                           wreg	equ	0xFE8
  5065                           indf1	equ	0xFE7
  5066                           postdec1	equ	0xFE5
  5067                           fsr1h	equ	0xFE2
  5068                           fsr1l	equ	0xFE1
  5069                           indf2	equ	0xFDF
  5070                           postinc2	equ	0xFDE
  5071                           postdec2	equ	0xFDD
  5072                           fsr2h	equ	0xFDA
  5073                           fsr2l	equ	0xFD9
  5074                           status	equ	0xFD8
  5075                           
  5076 ;; *************** function _delay_ms *****************
  5077 ;; Defined at:
  5078 ;;		line 144 in file "main.c"
  5079 ;; Parameters:    Size  Location     Type
  5080 ;;  milis           2   40[COMRAM] unsigned int 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;  t               1   44[COMRAM] unsigned char 
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  1    wreg      void 
  5085 ;; Registers used:
  5086 ;;		wreg, status,2, status,0
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5092 ;;      Params:         2       0       0       0       0       0       0       0       0
  5093 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5094 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5095 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5096 ;;Total ram usage:        5 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    3
  5099 ;; This function calls:
  5100 ;;		Nothing
  5101 ;; This function is called by:
  5102 ;;		_lcdClean
  5103 ;;		_DelayPORXLCD
  5104 ;;		_DelayXLCD
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text39
  5109  001372                     __ptext39:
  5110                           	opt stack 0
  5111  001372                     _delay_ms:
  5112                           	opt stack 24
  5113                           
  5114                           ;main.c: 146: uint8_t t;
  5115                           ;main.c: 147: for (t = 0; t < milis; t++) {
  5116                           
  5117                           ;incstack = 0
  5118  001372  0E00               	movlw	0
  5119  001374  6E2D               	movwf	delay_ms@t,c
  5120  001376  D001               	goto	l104
  5121  001378                     
  5122                           ;main.c: 148: ;
  5123  001378  2A2D               	incf	delay_ms@t,f,c
  5124  00137A                     l104:
  5125  00137A  502D               	movf	delay_ms@t,w,c
  5126  00137C  6E2B               	movwf	??_delay_ms& (0+255),c
  5127  00137E  6A2C               	clrf	(??_delay_ms+1)& (0+255),c
  5128  001380  5029               	movf	delay_ms@milis,w,c
  5129  001382  5C2B               	subwf	??_delay_ms,w,c
  5130  001384  502A               	movf	delay_ms@milis+1,w,c
  5131  001386  582C               	subwfb	??_delay_ms+1,w,c
  5132  001388  B0D8               	btfsc	status,0,c
  5133  00138A  0012               	return	
  5134  00138C  D7F5               	goto	l105
  5135  00138E                     __end_of_delay_ms:
  5136                           	opt stack 0
  5137                           tosu	equ	0xFFF
  5138                           tosh	equ	0xFFE
  5139                           tosl	equ	0xFFD
  5140                           pclath	equ	0xFFA
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           intcon	equ	0xFF2
  5148                           intcon2	equ	0xFF1
  5149                           postinc0	equ	0xFEE
  5150                           wreg	equ	0xFE8
  5151                           indf1	equ	0xFE7
  5152                           postdec1	equ	0xFE5
  5153                           fsr1h	equ	0xFE2
  5154                           fsr1l	equ	0xFE1
  5155                           indf2	equ	0xFDF
  5156                           postinc2	equ	0xFDE
  5157                           postdec2	equ	0xFDD
  5158                           fsr2h	equ	0xFDA
  5159                           fsr2l	equ	0xFD9
  5160                           status	equ	0xFD8
  5161                           
  5162 ;; *************** function _Delay10KTCYx *****************
  5163 ;; Defined at:
  5164 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\d10ktcyx.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;  unit            1    wreg     unsigned char 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  unit            1   41[COMRAM] unsigned char 
  5169 ;; Return value:  Size  Location     Type
  5170 ;;                  1    wreg      void 
  5171 ;; Registers used:
  5172 ;;		wreg
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5178 ;;      Params:         0       0       0       0       0       0       0       0       0
  5179 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5180 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5181 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5182 ;;Total ram usage:        2 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:    3
  5185 ;; This function calls:
  5186 ;;		Nothing
  5187 ;; This function is called by:
  5188 ;;		_OpenXLCD
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           	psect	text40
  5193  0013D0                     __ptext40:
  5194                           	opt stack 0
  5195  0013D0                     _Delay10KTCYx:
  5196                           	opt stack 25
  5197                           
  5198                           ;incstack = 0
  5199                           ;Delay10KTCYx@unit stored from wreg
  5200  0013D0  6E2A               	movwf	Delay10KTCYx@unit,c
  5201  0013D2                     l731:
  5202  0013D2  0E0D               	movlw	13
  5203  0013D4  6E29               	movwf	??_Delay10KTCYx& (0+255),c
  5204  0013D6  0EFC               	movlw	252
  5205  0013D8                     u2367:
  5206  0013D8  2EE8               	decfsz	wreg,f,c
  5207  0013DA  D7FE               	bra	u2367
  5208  0013DC  2E29               	decfsz	??_Delay10KTCYx& (0+255),f,c
  5209  0013DE  D7FC               	bra	u2367
  5210  0013E0  2E2A               	decfsz	Delay10KTCYx@unit,f,c
  5211  0013E2  D7F7               	goto	l731
  5212  0013E4  0012               	return	
  5213  0013E6                     __end_of_Delay10KTCYx:
  5214                           	opt stack 0
  5215                           tosu	equ	0xFFF
  5216                           tosh	equ	0xFFE
  5217                           tosl	equ	0xFFD
  5218                           pclath	equ	0xFFA
  5219                           tblptru	equ	0xFF8
  5220                           tblptrh	equ	0xFF7
  5221                           tblptrl	equ	0xFF6
  5222                           tablat	equ	0xFF5
  5223                           prodh	equ	0xFF4
  5224                           prodl	equ	0xFF3
  5225                           intcon	equ	0xFF2
  5226                           intcon2	equ	0xFF1
  5227                           postinc0	equ	0xFEE
  5228                           wreg	equ	0xFE8
  5229                           indf1	equ	0xFE7
  5230                           postdec1	equ	0xFE5
  5231                           fsr1h	equ	0xFE2
  5232                           fsr1l	equ	0xFE1
  5233                           indf2	equ	0xFDF
  5234                           postinc2	equ	0xFDE
  5235                           postdec2	equ	0xFDD
  5236                           fsr2h	equ	0xFDA
  5237                           fsr2l	equ	0xFD9
  5238                           status	equ	0xFD8
  5239                           
  5240 ;; *************** function _BusyXLCD *****************
  5241 ;; Defined at:
  5242 ;;		line 6 in file "xlcd_mod.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;		None
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;		None
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  1    wreg      unsigned char 
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5256 ;;      Params:         0       0       0       0       0       0       0       0       0
  5257 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5259 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5260 ;;Total ram usage:        0 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    4
  5263 ;; This function calls:
  5264 ;;		_DelayFor18TCY
  5265 ;; This function is called by:
  5266 ;;		_lcdInit
  5267 ;;		_lcdClean
  5268 ;;		_lcdRuntime
  5269 ;;		_OpenXLCD
  5270 ;;		_putrsXLCD
  5271 ;;		_putsXLCD
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           	psect	text41
  5276  001202                     __ptext41:
  5277                           	opt stack 0
  5278  001202                     _BusyXLCD:
  5279                           	opt stack 24
  5280                           
  5281                           ;xlcd_mod.c: 8: LATDbits.LATD5 = 1;
  5282                           
  5283                           ;incstack = 0
  5284  001202  8A8C               	bsf	3980,5,c	;volatile
  5285                           
  5286                           ;xlcd_mod.c: 9: LATDbits.LATD6 = 0;
  5287  001204  9C8C               	bcf	3980,6,c	;volatile
  5288                           
  5289                           ;xlcd_mod.c: 10: DelayFor18TCY();
  5290  001206  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  5291                           
  5292                           ;xlcd_mod.c: 11: LATDbits.LATD4 = 1;
  5293  00120A  888C               	bsf	3980,4,c	;volatile
  5294                           
  5295                           ;xlcd_mod.c: 12: DelayFor18TCY();
  5296  00120C  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  5297                           
  5298                           ;xlcd_mod.c: 29: if (PORTD & 0x08)
  5299  001210  A683               	btfss	3971,3,c	;volatile
  5300  001212  D00A               	goto	l218
  5301                           
  5302                           ;xlcd_mod.c: 31: {
  5303                           ;xlcd_mod.c: 32: LATDbits.LATD4 = 0;
  5304  001214  988C               	bcf	3980,4,c	;volatile
  5305                           
  5306                           ;xlcd_mod.c: 33: DelayFor18TCY();
  5307  001216  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  5308                           
  5309                           ;xlcd_mod.c: 34: LATDbits.LATD4 = 1;
  5310  00121A  888C               	bsf	3980,4,c	;volatile
  5311                           
  5312                           ;xlcd_mod.c: 35: DelayFor18TCY();
  5313  00121C  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  5314                           
  5315                           ;xlcd_mod.c: 36: LATDbits.LATD4 = 0;
  5316  001220  988C               	bcf	3980,4,c	;volatile
  5317                           
  5318                           ;xlcd_mod.c: 37: LATDbits.LATD5 = 0;
  5319  001222  9A8C               	bcf	3980,5,c	;volatile
  5320                           
  5321                           ;xlcd_mod.c: 38: return 1;
  5322  001224  0E01               	movlw	1
  5323                           
  5324                           ;xlcd_mod.c: 39: } else
  5325  001226  0012               	return	
  5326  001228                     l218:
  5327                           
  5328                           ;xlcd_mod.c: 40: {
  5329                           ;xlcd_mod.c: 41: LATDbits.LATD4 = 0;
  5330  001228  988C               	bcf	3980,4,c	;volatile
  5331                           
  5332                           ;xlcd_mod.c: 42: DelayFor18TCY();
  5333  00122A  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  5334                           
  5335                           ;xlcd_mod.c: 43: LATDbits.LATD4 = 1;
  5336  00122E  888C               	bsf	3980,4,c	;volatile
  5337                           
  5338                           ;xlcd_mod.c: 44: DelayFor18TCY();
  5339  001230  EC6E  F009         	call	_DelayFor18TCY	;wreg free
  5340                           
  5341                           ;xlcd_mod.c: 45: LATDbits.LATD4 = 0;
  5342  001234  988C               	bcf	3980,4,c	;volatile
  5343                           
  5344                           ;xlcd_mod.c: 46: LATDbits.LATD5 = 0;
  5345  001236  9A8C               	bcf	3980,5,c	;volatile
  5346                           
  5347                           ;xlcd_mod.c: 47: return 0;
  5348  001238  0E00               	movlw	0
  5349  00123A  0012               	return	
  5350  00123C                     __end_of_BusyXLCD:
  5351                           	opt stack 0
  5352                           tosu	equ	0xFFF
  5353                           tosh	equ	0xFFE
  5354                           tosl	equ	0xFFD
  5355                           pclath	equ	0xFFA
  5356                           tblptru	equ	0xFF8
  5357                           tblptrh	equ	0xFF7
  5358                           tblptrl	equ	0xFF6
  5359                           tablat	equ	0xFF5
  5360                           prodh	equ	0xFF4
  5361                           prodl	equ	0xFF3
  5362                           intcon	equ	0xFF2
  5363                           intcon2	equ	0xFF1
  5364                           postinc0	equ	0xFEE
  5365                           wreg	equ	0xFE8
  5366                           indf1	equ	0xFE7
  5367                           postdec1	equ	0xFE5
  5368                           fsr1h	equ	0xFE2
  5369                           fsr1l	equ	0xFE1
  5370                           indf2	equ	0xFDF
  5371                           postinc2	equ	0xFDE
  5372                           postdec2	equ	0xFDD
  5373                           fsr2h	equ	0xFDA
  5374                           fsr2l	equ	0xFD9
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function _DelayFor18TCY *****************
  5378 ;; Defined at:
  5379 ;;		line 102 in file "display.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  i               2   40[COMRAM] int 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, status,2, status,0
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5393 ;;      Params:         0       0       0       0       0       0       0       0       0
  5394 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5396 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5397 ;;Total ram usage:        2 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    3
  5400 ;; This function calls:
  5401 ;;		Nothing
  5402 ;; This function is called by:
  5403 ;;		_BusyXLCD
  5404 ;;		_SetDDRamAddr
  5405 ;;		_WriteCmdXLCD
  5406 ;;		_WriteDataXLCD
  5407 ;;		_ReadAddrXLCD
  5408 ;;		_ReadDataXLCD
  5409 ;;		_SetCGRamAddr
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           	psect	text42
  5414  0012DC                     __ptext42:
  5415                           	opt stack 0
  5416  0012DC                     _DelayFor18TCY:
  5417                           	opt stack 24
  5418                           
  5419                           ;display.c: 103: for (int i = 0; i < 18; i++) {
  5420                           
  5421                           ;incstack = 0
  5422  0012DC  0E00               	movlw	0
  5423  0012DE  6E2A               	movwf	DelayFor18TCY@i+1,c
  5424  0012E0  0E00               	movlw	0
  5425  0012E2  6E29               	movwf	DelayFor18TCY@i,c
  5426  0012E4                     l2733:
  5427  0012E4  BE2A               	btfsc	DelayFor18TCY@i+1,7,c
  5428  0012E6  D006               	goto	l186
  5429  0012E8  502A               	movf	DelayFor18TCY@i+1,w,c
  5430  0012EA  E107               	bnz	l189
  5431  0012EC  0E12               	movlw	18
  5432  0012EE  5C29               	subwf	DelayFor18TCY@i,w,c
  5433  0012F0  B0D8               	btfsc	status,0,c
  5434  0012F2  0012               	return	
  5435  0012F4                     l186:
  5436                           
  5437                           ;display.c: 104: continue;
  5438  0012F4  4A29               	infsnz	DelayFor18TCY@i,f,c
  5439  0012F6  2A2A               	incf	DelayFor18TCY@i+1,f,c
  5440  0012F8  D7F5               	goto	l2733
  5441  0012FA                     l189:
  5442  0012FA  0012               	return		;funcret
  5443  0012FC                     __end_of_DelayFor18TCY:
  5444                           	opt stack 0
  5445                           tosu	equ	0xFFF
  5446                           tosh	equ	0xFFE
  5447                           tosl	equ	0xFFD
  5448                           pclath	equ	0xFFA
  5449                           tblptru	equ	0xFF8
  5450                           tblptrh	equ	0xFF7
  5451                           tblptrl	equ	0xFF6
  5452                           tablat	equ	0xFF5
  5453                           prodh	equ	0xFF4
  5454                           prodl	equ	0xFF3
  5455                           intcon	equ	0xFF2
  5456                           intcon2	equ	0xFF1
  5457                           postinc0	equ	0xFEE
  5458                           wreg	equ	0xFE8
  5459                           indf1	equ	0xFE7
  5460                           postdec1	equ	0xFE5
  5461                           fsr1h	equ	0xFE2
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           postdec2	equ	0xFDD
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _ISR_LP *****************
  5471 ;; Defined at:
  5472 ;;		line 68 in file "main.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;		None
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;		None
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  1    wreg      void 
  5479 ;; Registers used:
  5480 ;;		wreg, status,2, status,0, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5486 ;;      Params:         0       0       0       0       0       0       0       0       0
  5487 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5488 ;;      Temps:         22       0       0       0       0       0       0       0       0
  5489 ;;      Totals:        22       0       0       0       0       0       0       0       0
  5490 ;;Total ram usage:       22 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    2
  5493 ;; This function calls:
  5494 ;;		i1_menuDraw
  5495 ;; This function is called by:
  5496 ;;		Interrupt level 1
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	intcodelo
  5501  000018                     __pintcodelo:
  5502                           	opt stack 0
  5503  000018                     _ISR_LP:
  5504                           	opt stack 23
  5505                           
  5506                           ;incstack = 0
  5507  000018  8037               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5508  00001A  CFD8 F014          	movff	status,??_ISR_LP+1
  5509  00001E  CFE8 F015          	movff	wreg,??_ISR_LP+2
  5510  000022  CFE0 F016          	movff	bsr,??_ISR_LP+3
  5511  000026  CFFA F017          	movff	pclath,??_ISR_LP+4
  5512  00002A  CFFB F018          	movff	pclatu,??_ISR_LP+5
  5513  00002E  CFE9 F019          	movff	fsr0l,??_ISR_LP+6
  5514  000032  CFEA F01A          	movff	fsr0h,??_ISR_LP+7
  5515  000036  CFE1 F01B          	movff	fsr1l,??_ISR_LP+8
  5516  00003A  CFE2 F01C          	movff	fsr1h,??_ISR_LP+9
  5517  00003E  CFD9 F01D          	movff	fsr2l,??_ISR_LP+10
  5518  000042  CFDA F01E          	movff	fsr2h,??_ISR_LP+11
  5519  000046  CFF3 F01F          	movff	prodl,??_ISR_LP+12
  5520  00004A  CFF4 F020          	movff	prodh,??_ISR_LP+13
  5521  00004E  CFF6 F021          	movff	tblptrl,??_ISR_LP+14
  5522  000052  CFF7 F022          	movff	tblptrh,??_ISR_LP+15
  5523  000056  CFF8 F023          	movff	tblptru,??_ISR_LP+16
  5524  00005A  CFF5 F024          	movff	tablat,??_ISR_LP+17
  5525  00005E  C037  F025         	movff	btemp,??_ISR_LP+18
  5526  000062  C038  F026         	movff	btemp+1,??_ISR_LP+19
  5527  000066  C039  F027         	movff	btemp+2,??_ISR_LP+20
  5528  00006A  C03A  F028         	movff	btemp+3,??_ISR_LP+21
  5529                           
  5530                           ;main.c: 70: if (TMR0IF) {
  5531  00006E  A4F2               	btfss	intcon,2,c	;volatile
  5532  000070  D012               	goto	i1l88
  5533                           
  5534                           ;main.c: 71: TMR0IF = 0;
  5535  000072  94F2               	bcf	intcon,2,c	;volatile
  5536                           
  5537                           ;main.c: 72: TMR0H = 0x63;
  5538  000074  0E63               	movlw	99
  5539  000076  6ED7               	movwf	4055,c	;volatile
  5540                           
  5541                           ;main.c: 73: TMR0L = 0xC0;
  5542  000078  0EC0               	movlw	192
  5543  00007A  6ED6               	movwf	4054,c	;volatile
  5544                           
  5545                           ;main.c: 76: PORTCbits.RC0 = !PORTCbits.RC0;
  5546  00007C  B082               	btfsc	3970,0,c	;volatile
  5547  00007E  D003               	goto	i1u79_20
  5548  000080  6A13               	clrf	??_ISR_LP& (0+255),c
  5549  000082  2A13               	incf	??_ISR_LP& (0+255),f,c
  5550  000084  D001               	goto	i1u80_28
  5551  000086                     i1u79_20:
  5552  000086  6A13               	clrf	??_ISR_LP& (0+255),c
  5553  000088                     i1u80_28:
  5554  000088  5082               	movf	3970,w,c	;volatile
  5555  00008A  1813               	xorwf	??_ISR_LP,w,c
  5556  00008C  0BFE               	andlw	-2
  5557  00008E  1813               	xorwf	??_ISR_LP,w,c
  5558  000090  6E82               	movwf	3970,c	;volatile
  5559                           
  5560                           ;main.c: 77: menuDraw();
  5561  000092  EC2A  F00A         	call	i1_menuDraw	;wreg free
  5562  000096                     i1l88:
  5563  000096  C028  F03A         	movff	??_ISR_LP+21,btemp+3
  5564  00009A  C027  F039         	movff	??_ISR_LP+20,btemp+2
  5565  00009E  C026  F038         	movff	??_ISR_LP+19,btemp+1
  5566  0000A2  C025  F037         	movff	??_ISR_LP+18,btemp
  5567  0000A6  C024  FFF5         	movff	??_ISR_LP+17,tablat
  5568  0000AA  C023  FFF8         	movff	??_ISR_LP+16,tblptru
  5569  0000AE  C022  FFF7         	movff	??_ISR_LP+15,tblptrh
  5570  0000B2  C021  FFF6         	movff	??_ISR_LP+14,tblptrl
  5571  0000B6  C020  FFF4         	movff	??_ISR_LP+13,prodh
  5572  0000BA  C01F  FFF3         	movff	??_ISR_LP+12,prodl
  5573  0000BE  C01E  FFDA         	movff	??_ISR_LP+11,fsr2h
  5574  0000C2  C01D  FFD9         	movff	??_ISR_LP+10,fsr2l
  5575  0000C6  C01C  FFE2         	movff	??_ISR_LP+9,fsr1h
  5576  0000CA  C01B  FFE1         	movff	??_ISR_LP+8,fsr1l
  5577  0000CE  C01A  FFEA         	movff	??_ISR_LP+7,fsr0h
  5578  0000D2  C019  FFE9         	movff	??_ISR_LP+6,fsr0l
  5579  0000D6  C018  FFFB         	movff	??_ISR_LP+5,pclatu
  5580  0000DA  C017  FFFA         	movff	??_ISR_LP+4,pclath
  5581  0000DE  C016  FFE0         	movff	??_ISR_LP+3,bsr
  5582  0000E2  C015  FFE8         	movff	??_ISR_LP+2,wreg
  5583  0000E6  C014  FFD8         	movff	??_ISR_LP+1,status
  5584  0000EA  9037               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5585  0000EC  0010               	retfie	
  5586  0000EE                     __end_of_ISR_LP:
  5587                           	opt stack 0
  5588                           tosu	equ	0xFFF
  5589                           tosh	equ	0xFFE
  5590                           tosl	equ	0xFFD
  5591                           pclatu	equ	0xFFB
  5592                           pclath	equ	0xFFA
  5593                           tblptru	equ	0xFF8
  5594                           tblptrh	equ	0xFF7
  5595                           tblptrl	equ	0xFF6
  5596                           tablat	equ	0xFF5
  5597                           prodh	equ	0xFF4
  5598                           prodl	equ	0xFF3
  5599                           intcon	equ	0xFF2
  5600                           intcon2	equ	0xFF1
  5601                           postinc0	equ	0xFEE
  5602                           fsr0h	equ	0xFEA
  5603                           fsr0l	equ	0xFE9
  5604                           wreg	equ	0xFE8
  5605                           indf1	equ	0xFE7
  5606                           postdec1	equ	0xFE5
  5607                           fsr1h	equ	0xFE2
  5608                           fsr1l	equ	0xFE1
  5609                           bsr	equ	0xFE0
  5610                           indf2	equ	0xFDF
  5611                           postinc2	equ	0xFDE
  5612                           postdec2	equ	0xFDD
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function i1_menuDraw *****************
  5618 ;; Defined at:
  5619 ;;		line 47 in file "menu.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;		None
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5633 ;;      Params:         0       0       0       0       0       0       0       0       0
  5634 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5635 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5636 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5637 ;;Total ram usage:        0 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    1
  5640 ;; This function calls:
  5641 ;;		Nothing
  5642 ;; This function is called by:
  5643 ;;		_ISR_LP
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text44
  5648  001454                     __ptext44:
  5649                           	opt stack 0
  5650  001454                     i1_menuDraw:
  5651                           	opt stack 23
  5652                           
  5653                           ;menu.c: 49: Menu.NeedsRedraw = 1;
  5654                           
  5655                           ;incstack = 0
  5656  001454  0E01               	movlw	1
  5657  001456  6E31               	movwf	_Menu+2,c
  5658  001458  0012               	return		;funcret
  5659  00145A                     __end_ofi1_menuDraw:
  5660                           	opt stack 0
  5661                           tosu	equ	0xFFF
  5662                           tosh	equ	0xFFE
  5663                           tosl	equ	0xFFD
  5664                           pclatu	equ	0xFFB
  5665                           pclath	equ	0xFFA
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           prodh	equ	0xFF4
  5671                           prodl	equ	0xFF3
  5672                           intcon	equ	0xFF2
  5673                           intcon2	equ	0xFF1
  5674                           postinc0	equ	0xFEE
  5675                           fsr0h	equ	0xFEA
  5676                           fsr0l	equ	0xFE9
  5677                           wreg	equ	0xFE8
  5678                           indf1	equ	0xFE7
  5679                           postdec1	equ	0xFE5
  5680                           fsr1h	equ	0xFE2
  5681                           fsr1l	equ	0xFE1
  5682                           bsr	equ	0xFE0
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           postdec2	equ	0xFDD
  5686                           fsr2h	equ	0xFDA
  5687                           fsr2l	equ	0xFD9
  5688                           status	equ	0xFD8
  5689                           
  5690 ;; *************** function _ISR *****************
  5691 ;; Defined at:
  5692 ;;		line 63 in file "main.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;		None
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;		None
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      void 
  5699 ;; Registers used:
  5700 ;;		None
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5706 ;;      Params:         0       0       0       0       0       0       0       0       0
  5707 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5708 ;;      Temps:         18       0       0       0       0       0       0       0       0
  5709 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5710 ;;Total ram usage:       18 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; This function calls:
  5713 ;;		Nothing
  5714 ;; This function is called by:
  5715 ;;		Interrupt level 2
  5716 ;; This function uses a non-reentrant model
  5717 ;;
  5718                           
  5719                           	psect	intcode
  5720  000008                     __pintcode:
  5721                           	opt stack 0
  5722  000008                     _ISR:
  5723                           	opt stack 23
  5724                           
  5725                           ;incstack = 0
  5726  000008  8237               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5727  00000A  ED06  F007         	call	int_func,f	;refresh shadow registers
  5728                           tosu	equ	0xFFF
  5729                           tosh	equ	0xFFE
  5730                           tosl	equ	0xFFD
  5731                           pclatu	equ	0xFFB
  5732                           pclath	equ	0xFFA
  5733                           tblptru	equ	0xFF8
  5734                           tblptrh	equ	0xFF7
  5735                           tblptrl	equ	0xFF6
  5736                           tablat	equ	0xFF5
  5737                           prodh	equ	0xFF4
  5738                           prodl	equ	0xFF3
  5739                           intcon	equ	0xFF2
  5740                           intcon2	equ	0xFF1
  5741                           postinc0	equ	0xFEE
  5742                           fsr0h	equ	0xFEA
  5743                           fsr0l	equ	0xFE9
  5744                           wreg	equ	0xFE8
  5745                           indf1	equ	0xFE7
  5746                           postdec1	equ	0xFE5
  5747                           fsr1h	equ	0xFE2
  5748                           fsr1l	equ	0xFE1
  5749                           bsr	equ	0xFE0
  5750                           indf2	equ	0xFDF
  5751                           postinc2	equ	0xFDE
  5752                           postdec2	equ	0xFDD
  5753                           fsr2h	equ	0xFDA
  5754                           fsr2l	equ	0xFD9
  5755                           status	equ	0xFD8
  5756                           
  5757                           	psect	intcode_body
  5758  000E0C                     __pintcode_body:
  5759                           	opt stack 23
  5760  000E0C                     int_func:
  5761                           	opt stack 23
  5762  000E0C  0006               	pop		; remove dummy address from shadow register refresh
  5763  000E0E  CFFA F001          	movff	pclath,??_ISR
  5764  000E12  CFFB F002          	movff	pclatu,??_ISR+1
  5765  000E16  CFE9 F003          	movff	fsr0l,??_ISR+2
  5766  000E1A  CFEA F004          	movff	fsr0h,??_ISR+3
  5767  000E1E  CFE1 F005          	movff	fsr1l,??_ISR+4
  5768  000E22  CFE2 F006          	movff	fsr1h,??_ISR+5
  5769  000E26  CFD9 F007          	movff	fsr2l,??_ISR+6
  5770  000E2A  CFDA F008          	movff	fsr2h,??_ISR+7
  5771  000E2E  CFF3 F009          	movff	prodl,??_ISR+8
  5772  000E32  CFF4 F00A          	movff	prodh,??_ISR+9
  5773  000E36  CFF6 F00B          	movff	tblptrl,??_ISR+10
  5774  000E3A  CFF7 F00C          	movff	tblptrh,??_ISR+11
  5775  000E3E  CFF8 F00D          	movff	tblptru,??_ISR+12
  5776  000E42  CFF5 F00E          	movff	tablat,??_ISR+13
  5777  000E46  C037  F00F         	movff	btemp,??_ISR+14
  5778  000E4A  C038  F010         	movff	btemp+1,??_ISR+15
  5779  000E4E  C039  F011         	movff	btemp+2,??_ISR+16
  5780  000E52  C03A  F012         	movff	btemp+3,??_ISR+17
  5781  000E56  C012  F03A         	movff	??_ISR+17,btemp+3
  5782  000E5A  C011  F039         	movff	??_ISR+16,btemp+2
  5783  000E5E  C010  F038         	movff	??_ISR+15,btemp+1
  5784  000E62  C00F  F037         	movff	??_ISR+14,btemp
  5785  000E66  C00E  FFF5         	movff	??_ISR+13,tablat
  5786  000E6A  C00D  FFF8         	movff	??_ISR+12,tblptru
  5787  000E6E  C00C  FFF7         	movff	??_ISR+11,tblptrh
  5788  000E72  C00B  FFF6         	movff	??_ISR+10,tblptrl
  5789  000E76  C00A  FFF4         	movff	??_ISR+9,prodh
  5790  000E7A  C009  FFF3         	movff	??_ISR+8,prodl
  5791  000E7E  C008  FFDA         	movff	??_ISR+7,fsr2h
  5792  000E82  C007  FFD9         	movff	??_ISR+6,fsr2l
  5793  000E86  C006  FFE2         	movff	??_ISR+5,fsr1h
  5794  000E8A  C005  FFE1         	movff	??_ISR+4,fsr1l
  5795  000E8E  C004  FFEA         	movff	??_ISR+3,fsr0h
  5796  000E92  C003  FFE9         	movff	??_ISR+2,fsr0l
  5797  000E96  C002  FFFB         	movff	??_ISR+1,pclatu
  5798  000E9A  C001  FFFA         	movff	??_ISR,pclath
  5799  000E9E  9237               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5800  000EA0  0011               	retfie		f
  5801  000EA2                     __end_of_ISR:
  5802                           	opt stack 0
  5803                           tosu	equ	0xFFF
  5804                           tosh	equ	0xFFE
  5805                           tosl	equ	0xFFD
  5806                           pclatu	equ	0xFFB
  5807                           pclath	equ	0xFFA
  5808                           tblptru	equ	0xFF8
  5809                           tblptrh	equ	0xFF7
  5810                           tblptrl	equ	0xFF6
  5811                           tablat	equ	0xFF5
  5812                           prodh	equ	0xFF4
  5813                           prodl	equ	0xFF3
  5814                           intcon	equ	0xFF2
  5815                           intcon2	equ	0xFF1
  5816                           postinc0	equ	0xFEE
  5817                           fsr0h	equ	0xFEA
  5818                           fsr0l	equ	0xFE9
  5819                           wreg	equ	0xFE8
  5820                           indf1	equ	0xFE7
  5821                           postdec1	equ	0xFE5
  5822                           fsr1h	equ	0xFE2
  5823                           fsr1l	equ	0xFE1
  5824                           bsr	equ	0xFE0
  5825                           indf2	equ	0xFDF
  5826                           postinc2	equ	0xFDE
  5827                           postdec2	equ	0xFDD
  5828                           fsr2h	equ	0xFDA
  5829                           fsr2l	equ	0xFD9
  5830                           status	equ	0xFD8
  5831                           tosu	equ	0xFFF
  5832                           tosh	equ	0xFFE
  5833                           tosl	equ	0xFFD
  5834                           pclatu	equ	0xFFB
  5835                           pclath	equ	0xFFA
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodh	equ	0xFF4
  5841                           prodl	equ	0xFF3
  5842                           intcon	equ	0xFF2
  5843                           intcon2	equ	0xFF1
  5844                           postinc0	equ	0xFEE
  5845                           fsr0h	equ	0xFEA
  5846                           fsr0l	equ	0xFE9
  5847                           wreg	equ	0xFE8
  5848                           indf1	equ	0xFE7
  5849                           postdec1	equ	0xFE5
  5850                           fsr1h	equ	0xFE2
  5851                           fsr1l	equ	0xFE1
  5852                           bsr	equ	0xFE0
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           postdec2	equ	0xFDD
  5856                           fsr2h	equ	0xFDA
  5857                           fsr2l	equ	0xFD9
  5858                           status	equ	0xFD8
  5859                           
  5860                           	psect	rparam
  5861  0000                     tosu	equ	0xFFF
  5862                           tosh	equ	0xFFE
  5863                           tosl	equ	0xFFD
  5864                           pclatu	equ	0xFFB
  5865                           pclath	equ	0xFFA
  5866                           tblptru	equ	0xFF8
  5867                           tblptrh	equ	0xFF7
  5868                           tblptrl	equ	0xFF6
  5869                           tablat	equ	0xFF5
  5870                           prodh	equ	0xFF4
  5871                           prodl	equ	0xFF3
  5872                           intcon	equ	0xFF2
  5873                           intcon2	equ	0xFF1
  5874                           postinc0	equ	0xFEE
  5875                           fsr0h	equ	0xFEA
  5876                           fsr0l	equ	0xFE9
  5877                           wreg	equ	0xFE8
  5878                           indf1	equ	0xFE7
  5879                           postdec1	equ	0xFE5
  5880                           fsr1h	equ	0xFE2
  5881                           fsr1l	equ	0xFE1
  5882                           bsr	equ	0xFE0
  5883                           indf2	equ	0xFDF
  5884                           postinc2	equ	0xFDE
  5885                           postdec2	equ	0xFDD
  5886                           fsr2h	equ	0xFDA
  5887                           fsr2l	equ	0xFD9
  5888                           status	equ	0xFD8
  5889                           
  5890                           	psect	temp
  5891  000037                     btemp:
  5892                           	opt stack 0
  5893  000037                     	ds	1
  5894  0000                     int$flags	set	btemp
  5895  0000                     wtemp6	set	btemp+1
  5896                           tosu	equ	0xFFF
  5897                           tosh	equ	0xFFE
  5898                           tosl	equ	0xFFD
  5899                           pclatu	equ	0xFFB
  5900                           pclath	equ	0xFFA
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           prodh	equ	0xFF4
  5906                           prodl	equ	0xFF3
  5907                           intcon	equ	0xFF2
  5908                           intcon2	equ	0xFF1
  5909                           postinc0	equ	0xFEE
  5910                           fsr0h	equ	0xFEA
  5911                           fsr0l	equ	0xFE9
  5912                           wreg	equ	0xFE8
  5913                           indf1	equ	0xFE7
  5914                           postdec1	equ	0xFE5
  5915                           fsr1h	equ	0xFE2
  5916                           fsr1l	equ	0xFE1
  5917                           bsr	equ	0xFE0
  5918                           indf2	equ	0xFDF
  5919                           postinc2	equ	0xFDE
  5920                           postdec2	equ	0xFDD
  5921                           fsr2h	equ	0xFDA
  5922                           fsr2l	equ	0xFD9
  5923                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    10
    Data        12
    BSS         79
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      54
    BANK0           160     31     114
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[13]), STR_1(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    magnetoGetCord@coord	PTR struct . size(2) Largest target is 6
		 -> cord(BANK0[6]), 

    Menu.Current.Exit	PTR FTN()void  size(2) Largest target is 1
		 -> OnExitMenu2(), OnExitMenu1(), 

    Menu.Current.Render	PTR FTN()void  size(2) Largest target is 1
		 -> OnRenderMenu2(), OnRenderMenu1(), 

    Menu.Current.Enter	PTR FTN()void  size(2) Largest target is 1
		 -> OnEnterMenu2(), OnEnterMenu1(), 

    Menu.Items.Exit	PTR FTN()void  size(2) Largest target is 1
		 -> OnExitMenu2(), OnExitMenu1(), 

    Menu.Items.Render	PTR FTN()void  size(2) Largest target is 1
		 -> OnRenderMenu2(), OnRenderMenu1(), 

    Menu.Items.Enter	PTR FTN()void  size(2) Largest target is 1
		 -> OnEnterMenu2(), OnEnterMenu1(), 

    menuSetPosition@item	PTR struct . size(2) Largest target is 6
		 -> menu2(BANK0[6]), menu1(BANK0[6]), 

    menuInit@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    lcdRuntime@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    lcdWrite@string	PTR unsigned char  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    lcdWrite@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    lcdCleanAll@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    lcdMemClean@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    lcdInit@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    menu2.Exit	PTR FTN()void  size(2) Largest target is 1
		 -> OnExitMenu2(), OnExitMenu1(), 

    menu2.Render	PTR FTN()void  size(2) Largest target is 1
		 -> OnRenderMenu2(), OnRenderMenu1(), 

    menu2.Enter	PTR FTN()void  size(2) Largest target is 1
		 -> OnEnterMenu2(), OnEnterMenu1(), 

    S28$Exit	PTR FTN()void  size(2) Largest target is 1
		 -> OnExitMenu2(), OnExitMenu1(), 

    menu1.Exit	PTR FTN()void  size(2) Largest target is 1
		 -> OnExitMenu2(), OnExitMenu1(), 

    S28$Render	PTR FTN()void  size(2) Largest target is 1
		 -> OnRenderMenu2(), OnRenderMenu1(), 

    menu1.Render	PTR FTN()void  size(2) Largest target is 1
		 -> OnRenderMenu2(), OnRenderMenu1(), 

    S28$Enter	PTR FTN()void  size(2) Largest target is 1
		 -> OnEnterMenu2(), OnEnterMenu1(), 

    menu1.Enter	PTR FTN()void  size(2) Largest target is 1
		 -> OnEnterMenu2(), OnEnterMenu1(), 

    S32$Items	PTR struct .[1] size(2) Largest target is 6
		 -> menu2(BANK0[6]), menu1(BANK0[6]), 

    Menu.Items	PTR struct .[1] size(2) Largest target is 6
		 -> menu2(BANK0[6]), menu1(BANK0[6]), 

    S32$Current	PTR struct . size(2) Largest target is 6
		 -> menu2(BANK0[6]), menu1(BANK0[6]), 

    Menu.Current	PTR struct . size(2) Largest target is 6
		 -> menu2(BANK0[6]), menu1(BANK0[6]), 

    S32$lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    Menu.lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 


Critical Paths under _main in COMRAM

    _main->_memset
    _lcdRuntime->_SetDDRamAddr
    _WriteDataXLCD->_DelayFor18TCY
    _OnRenderMenu2->_lcdWrite
    _OnRenderMenu1->_lcdWrite
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _menuGoto->__menuEnterPosition
    _magnetoInit->_I2C_Start
    _I2C_Start->_I2C_Write
    _magnetoGetCord->_I2C_Read
    _magnetoGetCord->_I2C_Repeated_Start
    _magnetoGetCord->_I2C_Start_Wait
    _I2C_Start_Wait->_I2C_Write
    _I2C_Repeated_Start->_I2C_Write
    _lcdClean->_delay_ms
    _OpenXLCD->_SetDDRamAddr
    _WriteCmdXLCD->_DelayFor18TCY
    _SetDDRamAddr->_DelayFor18TCY
    _DelayPORXLCD->_delay_ms
    _BusyXLCD->_DelayFor18TCY

Critical Paths under _ISR_LP in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _OnRenderMenu2->_sprintf
    _OnRenderMenu1->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdInit->_lcdCleanAll

Critical Paths under _ISR_LP in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_LP in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_LP in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_LP in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_LP in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_LP in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_LP in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_LP in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11529
                                             30 BANK0      1     1      0
                            _lcdInit
                     _magnetoGetCord
                        _magnetoInit
                             _memset
                           _menuGoto
                           _menuInit
                        _menuRuntime
                    _menuSetPosition
 ---------------------------------------------------------------------------------
 (1) _menuSetPosition                                      3     1      2     196
                                             40 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _menuRuntime                                          0     0      0    8410
                      _OnRenderMenu1 *
                      _OnRenderMenu2 *
                         _lcdRuntime
 ---------------------------------------------------------------------------------
 (2) _lcdRuntime                                           8     6      2     740
                                              0 BANK0      8     6      2
                           _BusyXLCD
                       _SetDDRamAddr
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (3) _WriteDataXLCD                                        1     1      0     130
                                             42 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _OnRenderMenu2                                        0     0      0    3835
                           _lcdWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _OnRenderMenu1                                        0     0      0    3835
                           _lcdWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    2867
                                              7 BANK0     23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                             40 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     511
                                             40 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                             44 COMRAM     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     421
                                             40 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _lcdWrite                                             6     0      6     968
                                             40 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _menuInit                                             2     0      2      98
                                             40 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _menuGoto                                             1     1      0      44
                                             41 COMRAM     1     1      0
                 __menuEnterPosition
 ---------------------------------------------------------------------------------
 (2) __menuEnterPosition                                   1     1      0      22
                                             40 COMRAM     1     1      0
                       _OnEnterMenu1 *
                       _OnEnterMenu2 *
                           _menuDraw
 ---------------------------------------------------------------------------------
 (3) _menuDraw                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OnEnterMenu2                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OnEnterMenu1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     407
                                             40 COMRAM     6     0      6
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _magnetoInit                                          0     0      0      66
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            1     1      0      44
                                             41 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _magnetoGetCord                                       6     4      2     338
                                             42 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                           _I2C_Read
                 _I2C_Repeated_Start
                     _I2C_Start_Wait
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Start_Wait                                       1     1      0      44
                                             41 COMRAM     1     1      0
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Repeated_Start                                   1     1      0      44
                                             41 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      22
                                             40 COMRAM     1     1      0
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             2     2      0      45
                                             40 COMRAM     2     2      0
                            _I2C_Ack
                           _I2C_Nack
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (3) _I2C_Ready                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Nack                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              2     0      2    1936
                                              2 BANK0      2     0      2
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
                        _lcdCleanAll
 ---------------------------------------------------------------------------------
 (2) _lcdCleanAll                                          2     0      2     889
                                              0 BANK0      2     0      2
                           _lcdClean
                        _lcdMemClean
 ---------------------------------------------------------------------------------
 (3) _lcdMemClean                                          3     1      2     232
                                             40 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _lcdClean                                             0     0      0     536
                           _BusyXLCD
                       _WriteCmdXLCD
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     728
                                              0 BANK0      1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (4) _WriteCmdXLCD                                         1     1      0     130
                                             42 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0     130
                                             42 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0     338
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             5     3      2     338
                                             40 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      31
                                             40 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0      68
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (4) _DelayFor18TCY                                        2     2      0      68
                                             40 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR_LP                                              22    22      0       0
                                             18 COMRAM    22    22      0
                         i1_menuDraw
 ---------------------------------------------------------------------------------
 (7) i1_menuDraw                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcdInit
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _Delay10KTCYx
       _DelayPORXLCD
         _delay_ms
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
     _lcdCleanAll
       _lcdClean
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _delay_ms
       _lcdMemClean
   _magnetoGetCord
     _I2C_Read
       _I2C_Ack
       _I2C_Nack
       _I2C_Ready
     _I2C_Repeated_Start
       _I2C_Write
         _I2C_Ready
     _I2C_Start_Wait
       _I2C_Stop
       _I2C_Write
         _I2C_Ready
     _I2C_Stop
     _I2C_Write
       _I2C_Ready
   _magnetoInit
     _I2C_Start
       _I2C_Write
         _I2C_Ready
     _I2C_Stop
     _I2C_Write
       _I2C_Ready
   _memset
   _menuGoto
     __menuEnterPosition
       _OnEnterMenu1 *
       _OnEnterMenu2 *
       _menuDraw *
   _menuInit
   _menuRuntime
     _OnRenderMenu1 *
       _lcdWrite
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _OnRenderMenu2 *
       _lcdWrite
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _lcdRuntime *
       _BusyXLCD
         _DelayFor18TCY
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteDataXLCD
         _DelayFor18TCY
   _menuSetPosition

 _ISR_LP (ROOT)
   i1_menuDraw

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1F      72       5       71.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      36       1       57.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A8      20        0.0%
DATA                 0      0      A8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jul 02 03:00:21 2018

                         lcdRuntime@i 00AB                    __size_of_I2C_Ready 0008  
                         lcdWrite@col 002C                           lcdWrite@lcd 0029  
                  __size_of_I2C_Start 0016                         ?_OnEnterMenu1 0001  
                       ?_OnEnterMenu2 0001                           lcdWrite@row 002B  
                         _SSPSTATbits 000FC7                    __size_of_I2C_Write 0016  
                                  l94 0D54                                    l95 0D38  
                                  l96 0D42                           __CFG_BOR$ON 000000  
                                  bsr 000FE0                   ___wmul@multiplicand 002B  
                         __CFG_BORV$2 000000                          __CFG_CP0$OFF 000000  
                        __CFG_CP1$OFF 000000                          __CFG_CP2$OFF 000000  
                        __CFG_CP3$OFF 000000                           __CFG_LVP$ON 000000  
                       lcdRuntime@lcd 00A7                                   l104 137A  
                                 l105 1378                                   l130 111E  
                                 l133 112E                                   l127 110E  
                                 l144 0EAE                                   l152 0B5E  
                                 l233 0D9E                                   l218 1228  
                                 l242 0DCA                                   l410 12BC  
                                 l162 0BDC                                   l251 0DFA  
                                 l163 0BB2                                   l404 1436  
                                 l412 12D0                                   l245 0DDA  
                                 l413 12D4                                   l157 0B94  
                                 l173 0A96                                   l158 0B6A  
                                 l502 0826                                   l239 0DBA  
                                 l503 0840                                   l248 0DEA  
                                 l520 0990                                   l512 08F0  
                                 l505 086A                                   l186 12F4  
                                 l418 1414                                   l514 091A  
                                 l178 0AF6                                   l507 08C8  
                                 l372 131C                                   l524 09D2  
                                 l189 12FA                                   l525 0A2E  
                                 l374 131E                                   l366 1392  
                                 l526 09D8                                   l518 0964  
                                 l519 0988                                   l392 13CC  
                                 l384 13A8                                   l731 13D2  
                                 l398 1440                                   l950 0F42  
                                 l960 10FA                                   l945 0F18  
                                 l970 1246                                   l946 0F10  
                                 l866 1312                                   l955 10D8  
                                 l956 10D0                                   l949 0F38  
                                 l959 10F0                                   l969 1258  
                        __CFG_CPB$OFF 000000                                   _PEN 007E2A  
                        __CFG_CPD$OFF 000000                                   _ISR 0008  
                     __end_of_I2C_Ack 1446                                   _lcd 0060  
               __size_of_WriteCmdXLCD 003E                                   prod 000FF3  
                                 tosl 000FFD                                   wreg 000FE8  
                        ?_magnetoInit 0001                                  ?_ISR 0001  
                        __CFG_WDT$OFF 000000                                  l3101 0B36  
                                l3105 1246                                  l2247 0EA6  
                                l3085 0AD6                                  l2733 12E4  
                                l2883 091E                                  STR_1 080B  
                                STR_2 080B                            i1_menuDraw 1454  
                                _GIEH 007F97                                  u2020 0998  
                                u1310 0BF0                                  u2030 09B6  
                                u2200 0AD6                                  u2050 0A36  
                                u1340 0EEA                                  u2060 0A50  
                                u2230 0B36                                  u2090 0DA8  
                                u1290 0BA8                                  u2308 109E  
                                u2085 0F62                                  u2309 10B2  
                                u1900 10DC                                  u1558 116C  
                                u2367 13D8                                  u1559 1180  
                                _IPEN 007E87                                  u1870 0F1C  
                                _PEIE 007F96                                  u1980 094A  
                                _RCEN 007E2B                                  _RCIF 007CF5  
                                i1l88 0096                                  _RSEN 007E29  
                                _TRMT 007D61                                  _TXIF 007CF4  
                                _Menu 002F                                  _cord 00A1  
                                _main 0CB4                    __menuEnterPosition 1146  
                    __end_of_I2C_Nack 143C                      __end_of_I2C_Read 12DC  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0037                      __end_of_I2C_Stop 141E  
              __size_of_WriteDataXLCD 003E                                  prodh 000FF4  
                                prodl 000FF3                                  start 00EE  
                       __CFG_IESO$OFF 000000                         __CFG_MCLRE$ON 000000  
                        ___param_bank 000000                   ?__menuEnterPosition 0001  
                       _OnRenderMenu1 0F9E                         _OnRenderMenu2 0FEA  
                      ??_OnEnterMenu1 0029                        ??_OnEnterMenu2 0029  
                               ??_ISR 0001                          _WriteCmdXLCD 11C4  
                     lcdRuntime@i_330 00AD                         __CFG_PLLDIV$1 000000  
                      __CFG_CCP2MX$ON 000000                        lcdWrite@string 002D  
                       ?_SetDDRamAddr 0001                                 ?_main 0001  
                               _ACKEN 007E2C                                 _ACKDT 007E2D  
                     __end_of___lwdiv 0F4C                       __end_of___lwmod 1104  
                               _RCREG 000FAE                                 _RCSTA 000FAB  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _PORTD 000F83  
                       __CFG_USBDIV$1 000000                                 _TRISC 000F94  
                               _TRISD 000F95                                 _SSPIE 007CEB  
                               _SSPIF 007CF3                                 _TXREG 000FAD  
               __size_of_Delay10KTCYx 0016                                 _TXSTA 000FAC  
                       __CFG_PWRT$OFF 000000                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                         __CFG_WRT2$OFF 000000  
                       __CFG_WRT3$OFF 000000                       __end_of_lcdInit 1146  
                      __CFG_EBTR0$OFF 000000                        __CFG_FCMEN$OFF 000000  
                      __CFG_EBTR1$OFF 000000                        __CFG_EBTR2$OFF 000000  
                      __CFG_EBTR3$OFF 000000                  ??__menuEnterPosition 0029  
                       __CFG_WRTB$OFF 000000                         __CFG_WRTC$OFF 000000  
                        ?_menuRuntime 0001                         __CFG_WRTD$OFF 000000  
                      __CFG_EBTRB$OFF 000000                       __end_of_dpowers 080B  
                               _menu1 00CC                                 _menu2 00C6  
                     __end_of_isdigit 131A                     __end_of_I2C_Ready 144E  
                   __end_of_I2C_Start 13A4                     __end_of_I2C_Write 13D0  
                               pclath 000FFA                                 tablat 000FF5  
                               status 000FD8                                 wtemp6 0038  
                     __end_of_sprintf 0A5E                        __CFG_ICPRT$OFF 000000  
                     __initialization 1036                        ?_OnRenderMenu1 0001  
                      ?_OnRenderMenu2 0001                          __end_of_main 0D64  
                    __end_of_BusyXLCD 123C                  __size_of_lcdCleanAll 0012  
                        _Delay10KTCYx 13D0                 __size_of_DelayPORXLCD 000E  
                           ??_I2C_Ack 0029                        ??_SetDDRamAddr 002B  
                    __end_of_OpenXLCD 0E0C                                ??_main 002F  
                __size_of_lcdMemClean 0056                         __activetblptr 000002  
                       _WriteDataXLCD 1186                        DelayFor18TCY@i 0029  
                      _magnetoGetCord 0BFE                                _ADCON1 000FC1  
                         ?i1_menuDraw 0001                                _OSCCON 000FD3  
                              _ISR_LP 0018                                _TMR0IE 007F95  
                              _TMR0IF 007F92                                _TMR0IP 007F8A  
                              _SSPADD 000FC8                                _TRISB0 007C98  
                              _TRISB1 007C99                                _SSPBUF 000FC9  
                    __end_of_delay_ms 138E                      __end_of_lcdClean 1356  
                        _DelayPORXLCD 13F8                        __CFG_XINST$OFF 000000  
                      lcdCleanAll@lcd 00A7                      __end_of_lcdWrite 0BFE  
                         menuInit@lcd 0029                   magnetoGetCord@coord 002B  
                              ___wmul 1292                        __CFG_STVREN$ON 000000  
                         menuGoto@pos 002A                             ??___lwdiv 002D  
                           ??___lwmod 002D                                _buffer 0081  
                    __end_of_menuDraw 1454                      __end_of_menuInit 1428  
                    __end_of_menuGoto 1432                                _memset 123C  
                              clear_0 105C                                clear_1 1068  
                           ??_lcdInit 002F                    menuSetPosition@pos 002B  
                  _I2C_Repeated_Start 13A4                        ?_WriteDataXLCD 0001  
                     _menuSetPosition 1356                             ?_I2C_Nack 0001  
                           ??_isdigit 0029                             ?_I2C_Read 0001  
                           ?_I2C_Stop 0001                __end_of_magnetoGetCord 0CB4  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                 ?_I2C_Repeated_Start 0001                             ??_sprintf 00B8  
                __end_of_OnEnterMenu1 145C                  __end_of_OnEnterMenu2 145E  
                __size_of_magnetoInit 0028                           _OnExitMenu1 000000  
                         _OnExitMenu2 000000                            __accesstop 0060  
             __end_of__initialization 106E                       __CFG_PBADEN$OFF 000000  
                       ___rparam_used 000001                       ??_OnRenderMenu1 002F  
                     ??_OnRenderMenu2 002F                  ??_I2C_Repeated_Start 002A  
                      __pcstackCOMRAM 0001                          __pidataBANK0 1406  
                 __size_ofi1_menuDraw 0006                            ??_I2C_Nack 0029  
                          ??_I2C_Read 0029                            ??_I2C_Stop 0029  
                     ?_magnetoGetCord 002B                __size_of_DelayFor18TCY 0020  
                        sprintf@width 00C2               __size_of_I2C_Start_Wait 001E  
                __size_of_menuRuntime 0044                            __pbssBANK0 0060  
                           ?_BusyXLCD 0001                               ?_ISR_LP 0001  
                     WriteCmdXLCD@cmd 002B                  __end_of_SetDDRamAddr 0F9E  
                           ?_OpenXLCD 0001                          I2C_Read@flag 0029  
                   WriteDataXLCD@data 002B                        I2C_Read@buffer 002A  
                             ?___wmul 0029               __end_of_menuSetPosition 1372  
                             _I2C_Ack 143C                       ??_WriteDataXLCD 002B  
                             _ACKSTAT 007E2E                               ?_memset 0029  
                          _lcdRuntime 0A5E                             ?_delay_ms 0029  
                           ?_lcdClean 0001                               i1u80_28 0088  
                             i1u79_20 0086                               _SSPCON1 000FC6  
                             _SSPCON2 000FC5                             ?_lcdWrite 0029  
                             _SSPSTAT 000FC7                            ??_BusyXLCD 002B  
                     __CFG_VREGEN$OFF 000000                             ?_menuDraw 0001  
                           ?_menuInit 0029                             ?_menuGoto 0001  
                     __size_of_ISR_LP 00D6                             _I2C_Ready 1446  
                      lcdMemClean@lcd 0029                             _I2C_Start 138E  
                          ??_OpenXLCD 002F                             _I2C_Write 13BA  
                             __Hparam 0000                               __Lparam 0000  
                       _DelayFor18TCY 12DC                       __size_of___wmul 0026  
                             ___lwdiv 0EF8                               ___lwmod 10C0  
                        __psmallconst 0800                               __pcinit 1036  
                     __size_of_memset 002E                               __ramtop 0800  
                             _lcdInit 1104                               __ptext0 0CB4  
                             __ptext1 1356                               __ptext2 107C  
                             __ptext3 0A5E                               __ptext4 1186  
                             __ptext5 0F9E                               __ptext6 0FEA  
                             __ptext7 081A                               __ptext8 12FC  
                             __ptext9 1292     I2C_Start_Wait@slave_write_address 002A  
                           _T0CONbits 000FD5                          __size_of_ISR 0E9A  
                             _dpowers 0801                               _isdigit 12FC  
               __size_of_OnEnterMenu1 0002                 __size_of_OnEnterMenu2 0002  
                          ??_delay_ms 002B                            ??_lcdClean 002E  
                 menuSetPosition@item 0029           __size_of__menuEnterPosition 0040  
                          ??_lcdWrite 002F                               _sprintf 081A  
                      __pintcode_body 0E0C                          ??i1_menuDraw 0013  
                end_of_initialization 106E                            ??_menuDraw 0029  
                             memset@c 002B                               memset@n 002D  
                             memset@p 00A7                            ??_menuInit 002B  
                          ??_menuGoto 002A                         __Lmediumconst 0000  
                             int_func 0E0C                            ?_I2C_Ready 0001  
                          ?_I2C_Start 0001                            ?_I2C_Write 0001  
                       ??_lcdCleanAll 002E                            lcdInit@lcd 00A9  
                           _RCSTAbits 000FAB                        ?_DelayFor18TCY 0001  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                       ??_lcdMemClean 002B                      ?_menuSetPosition 0029  
                        _OnEnterMenu1 145A                          _OnEnterMenu2 145C  
                  __end_ofi1_menuDraw 145A                             _PORTCbits 000F82  
                         ?_lcdRuntime 00A7                             _TRISAbits 000F92  
                           _TRISDbits 000F95                     __size_of_I2C_Nack 000A  
                   __size_of_I2C_Read 0024                 __size_of_SetDDRamAddr 0052  
                   __size_of_I2C_Stop 000C                        _I2C_Start_Wait 131A  
                      __end_of_ISR_LP 00EE                        __end_of___wmul 12B8  
                       delay_ms@milis 0029                   __end_of_lcdCleanAll 13F8  
                    ??_magnetoGetCord 00A7                        __end_of_memset 126A  
                        _SetDDRamAddr 0F4C                    SetDDRamAddr@DDaddr 002E  
                 __end_of_lcdMemClean 0EF8                   start_initialization 1036  
                         __end_of_ISR 0EA2                __end_of_I2C_Start_Wait 1338  
                       ??_magnetoInit 002B  I2C_Repeated_Start@slave_read_address 002A  
                            ??_ISR_LP 0013                           ??_I2C_Ready 0029  
                   __size_of_BusyXLCD 003A                           ??_I2C_Start 002A  
                         ??_I2C_Write 0029                       ??_DelayFor18TCY 0029  
                 __size_of_lcdRuntime 00E6                     __size_of_OpenXLCD 00A8  
         __size_of_I2C_Repeated_Start 0016                 __end_of_OnRenderMenu1 0FEA  
               __end_of_OnRenderMenu2 1036                              ??___wmul 002D  
                       ?_WriteCmdXLCD 0001                           __pdataBANK0 00C6  
                    __CFG_LPT1OSC$OFF 000000                              ?_I2C_Ack 0001  
                            ??_memset 002F                           __pbssCOMRAM 002F  
                       __pcstackBANK0 00A7                         ??_menuRuntime 002F  
                     ?_I2C_Start_Wait 0001                          _isdigit$1137 002A  
                   __size_of_delay_ms 001C                     __size_of_lcdClean 001E  
                   __size_of_lcdWrite 00BA                           sprintf@flag 00BF  
                         sprintf@prec 00BE                   __end_of_magnetoInit 1292  
                   __size_of_menuDraw 0006                     __size_of_menuInit 000A  
                   __size_of_menuGoto 000A                      ___lwdiv@dividend 0029  
                         _lcdCleanAll 13E6                             __pintcode 0008  
                      ??_WriteCmdXLCD 002B                         ?_Delay10KTCYx 0001  
                            ?___lwdiv 0029                              ?___lwmod 00AA  
                         _lcdMemClean 0EA2                           __pintcodelo 0018  
                            ?_lcdInit 00A9                 __end_of_WriteDataXLCD 11C4  
                         __smallconst 0800                              _I2C_Nack 1432  
                            ?_isdigit 0001                              _I2C_Read 12B8  
                            _I2C_Stop 1412                      ___lwdiv@quotient 00A8  
                            ?_sprintf 00AE                   __end_of_menuRuntime 10C0  
                      ___wmul@product 002D                              _LATDbits 000F8C  
                           delay_ms@t 002D                         ?_DelayPORXLCD 0001  
                     OpenXLCD@lcdtype 00A7                      __CFG_WDTPS$32768 000000  
                      ??_Delay10KTCYx 0029                      __size_of_I2C_Ack 000A  
                   ___wmul@multiplier 0029                          ??_lcdRuntime 00A9  
          __end_of__menuEnterPosition 1186                             main@opcao 00C5  
                    Delay10KTCYx@unit 002A                           _magnetoInit 126A  
                           copy_data0 104A                              _BusyXLCD 1202  
        I2C_Start@slave_write_address 002A                        ??_DelayPORXLCD 002E  
                            _OpenXLCD 0D64                              __Hrparam 0000  
                            __Lrparam 0000                    __end_of_lcdRuntime 0B44  
                       I2C_Write@data 0029                      __size_of___lwdiv 0054  
                    __size_of___lwmod 0044                 __CFG_FOSC$INTOSCIO_EC 000000  
                    __size_of_lcdInit 0042                            sprintf@val 00C0  
            __size_of_menuSetPosition 001C                      __size_of_isdigit 001E  
                            _delay_ms 1372                              _lcdClean 1338  
                     ___lwdiv@divisor 002B                       ___lwdiv@counter 00A7  
                         _menuRuntime 107C                              __ptext10 10C0  
                            __ptext11 0EF8                              __ptext20 126A  
                            __ptext12 0B44                              __ptext21 138E  
                            __ptext13 141E                              __ptext30 143C  
                            __ptext22 0BFE                              __ptext14 1428  
                            __ptext31 1104                              __ptext23 131A  
                            __ptext15 1146                              __ptext40 13D0  
                            __ptext32 13E6                              __ptext24 1412  
                            __ptext16 144E                              __ptext41 1202  
                            __ptext33 0EA2                              __ptext25 13A4  
                            __ptext17 145A                              __ptext42 12DC  
                            __ptext34 1338                              __ptext26 13BA  
                            __ptext18 145C                              __ptext35 0D64  
                            __ptext27 12B8                              __ptext19 123C  
                            __ptext44 1454                              __ptext36 11C4  
                            __ptext28 1446                              __ptext37 0F4C  
                            __ptext29 1432                              __ptext38 13F8  
                            __ptext39 1372                              _lcdWrite 0B44  
                __end_of_WriteCmdXLCD 1202                      __size_of_sprintf 0244  
                        lcdMemClean@i 002B                __menuEnterPosition@pos 0029  
                            _menuDraw 144E                              _menuInit 141E  
                            _menuGoto 1428                         __size_of_main 00B0  
                            int$flags 0037                      ??_I2C_Start_Wait 002A  
               __CFG_CPUDIV$OSC1_PLL2 000000                              isdigit@c 002B  
                            memset@p1 0029                  __end_of_Delay10KTCYx 13E6  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 00BC                             sprintf@sp 00AE  
                    ___lwmod@dividend 00AA            __end_of_I2C_Repeated_Start 13BA  
                        ?_lcdCleanAll 00A7                 __end_of_DelayFor18TCY 12FC  
                        ?_lcdMemClean 0029                              sprintf@c 00C4  
                            sprintf@f 00B0                  __end_of_DelayPORXLCD 1406  
                     ___lwmod@divisor 00AC                       ___lwmod@counter 002D  
                         _SSPCON2bits 000FC5               __size_of_magnetoGetCord 00B6  
              __size_of_OnRenderMenu1 004C                __size_of_OnRenderMenu2 004C  
                   ??_menuSetPosition 002B  
