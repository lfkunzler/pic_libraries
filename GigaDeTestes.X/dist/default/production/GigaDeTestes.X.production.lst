

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jul 02 01:40:50 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.45
    61                           ; Generated 16/11/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4550 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95 ;; Function _OnExitMenu1 is unused but had its address taken
    96  0000                     
    97                           	psect	idataBANK0
    98  0013A8                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _menu1
   102  0013A8  BA                 	db	low _OnEnterMenu1
   103  0013A9  13                 	db	high _OnEnterMenu1
   104  0013AA  8E                 	db	low _OnRenderMenu1
   105  0013AB  0F                 	db	high _OnRenderMenu1
   106  0013AC  00                 	db	0
   107  0013AD  00                 	db	0
   108                           
   109                           	psect	smallconst
   110  000800                     __psmallconst:
   111                           	opt stack 0
   112  000800  00                 	db	0
   113  000801                     _dpowers:
   114                           	opt stack 0
   115  000801  0001               	dw	1
   116  000803  000A               	dw	10
   117  000805  0064               	dw	100
   118  000807  03E8               	dw	1000
   119  000809  2710               	dw	10000
   120  00080B                     __end_of_dpowers:
   121                           	opt stack 0
   122  0000                     _TRISAbits	set	3986
   123  0000                     _TXREG	set	4013
   124  0000                     _RCREG	set	4014
   125  0000                     _RCSTAbits	set	4011
   126  0000                     _SPBRG	set	4015
   127  0000                     _TXSTA	set	4012
   128  0000                     _RCSTA	set	4011
   129  0000                     _SSPBUF	set	4041
   130  0000                     _SSPSTATbits	set	4039
   131  0000                     _SSPCON2bits	set	4037
   132  0000                     _SSPADD	set	4040
   133  0000                     _SSPCON2	set	4037
   134  0000                     _SSPCON1	set	4038
   135  0000                     _SSPSTAT	set	4039
   136  0000                     _TRISDbits	set	3989
   137  0000                     _PORTD	set	3971
   138  0000                     _LATDbits	set	3980
   139  0000                     _TRISD	set	3989
   140  0000                     _T1CONbits	set	4045
   141  0000                     _TRISC	set	3988
   142  0000                     _OSCCON	set	4051
   143  0000                     _ADCON1	set	4033
   144  0000                     _PORTCbits	set	3970
   145  0000                     _TMR1L	set	4046
   146  0000                     _TMR1H	set	4047
   147  0000                     _TRMT	set	32097
   148  0000                     _TXIF	set	31988
   149  0000                     _RCIF	set	31989
   150  0000                     _PEN	set	32298
   151  0000                     _RCEN	set	32299
   152  0000                     _ACKEN	set	32300
   153  0000                     _ACKDT	set	32301
   154  0000                     _RSEN	set	32297
   155  0000                     _ACKSTAT	set	32302
   156  0000                     _SSPIF	set	31987
   157  0000                     _SSPIE	set	31979
   158  0000                     _TRISB1	set	31897
   159  0000                     _TRISB0	set	31896
   160  0000                     _TMR1IP	set	31992
   161  0000                     _TMR1IE	set	31976
   162  0000                     _PEIE	set	32662
   163  0000                     _GIEH	set	32663
   164  0000                     _IPEN	set	32391
   165  0000                     _TMR1IF	set	31984
   166  00080B                     STR_1:
   167  00080B  25                 	db	37
   168  00080C  34                 	db	52	;'4'
   169  00080D  64                 	db	100	;'d'
   170  00080E  20                 	db	32
   171  00080F  25                 	db	37
   172  000810  34                 	db	52	;'4'
   173  000811  64                 	db	100	;'d'
   174  000812  20                 	db	32
   175  000813  25                 	db	37
   176  000814  34                 	db	52	;'4'
   177  000815  64                 	db	100	;'d'
   178  000816  00                 	db	0
   179  000817  00                 	db	0
   180                           
   181                           ; #config settings
   182  000818  00                 	db	0	; dummy byte at the end
   183  0000                     
   184                           	psect	cinit
   185  000FDA                     __pcinit:
   186                           	opt stack 0
   187  000FDA                     start_initialization:
   188                           	opt stack 0
   189  000FDA                     __initialization:
   190                           	opt stack 0
   191                           
   192                           ; Initialize objects allocated to BANK0 (6 bytes)
   193                           ; load TBLPTR registers with __pidataBANK0
   194  000FDA  0EA8               	movlw	low __pidataBANK0
   195  000FDC  6EF6               	movwf	tblptrl,c
   196  000FDE  0E13               	movlw	high __pidataBANK0
   197  000FE0  6EF7               	movwf	tblptrh,c
   198  000FE2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   199  000FE4  6EF8               	movwf	tblptru,c
   200  000FE6  EE00  F0C6         	lfsr	0,__pdataBANK0
   201  000FEA  EE10 F006          	lfsr	1,6
   202  000FEE                     copy_data0:
   203  000FEE  0009               	tblrd		*+
   204  000FF0  CFF5 FFEE          	movff	tablat,postinc0
   205  000FF4  50E5               	movf	postdec1,w,c
   206  000FF6  50E1               	movf	fsr1l,w,c
   207  000FF8  E1FA               	bnz	copy_data0
   208                           
   209                           ; Clear objects allocated to BANK0 (71 bytes)
   210  000FFA  EE00  F060         	lfsr	0,__pbssBANK0
   211  000FFE  0E47               	movlw	71
   212  001000                     clear_0:
   213  001000  6AEE               	clrf	postinc0,c
   214  001002  06E8               	decf	wreg,f,c
   215  001004  E1FD               	bnz	clear_0
   216                           
   217                           ; Clear objects allocated to COMRAM (8 bytes)
   218  001006  EE00  F02F         	lfsr	0,__pbssCOMRAM
   219  00100A  0E08               	movlw	8
   220  00100C                     clear_1:
   221  00100C  6AEE               	clrf	postinc0,c
   222  00100E  06E8               	decf	wreg,f,c
   223  001010  E1FD               	bnz	clear_1
   224  001012                     end_of_initialization:
   225                           	opt stack 0
   226  001012                     __end_of__initialization:
   227                           	opt stack 0
   228  001012  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   229  001014  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   230  001016  0E00               	movlw	low (__Lmediumconst shr (0+16))
   231  001018  6EF8               	movwf	tblptru,c
   232  00101A  0100               	movlb	0
   233  00101C  EFAE  F006         	goto	_main	;jump to C main() function
   234                           tblptru	equ	0xFF8
   235                           tblptrh	equ	0xFF7
   236                           tblptrl	equ	0xFF6
   237                           tablat	equ	0xFF5
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           postdec1	equ	0xFE5
   241                           fsr1l	equ	0xFE1
   242                           
   243                           	psect	bssCOMRAM
   244  00002F                     __pbssCOMRAM:
   245                           	opt stack 0
   246  00002F                     _Menu:
   247                           	opt stack 0
   248  00002F                     	ds	8
   249                           tblptru	equ	0xFF8
   250                           tblptrh	equ	0xFF7
   251                           tblptrl	equ	0xFF6
   252                           tablat	equ	0xFF5
   253                           postinc0	equ	0xFEE
   254                           wreg	equ	0xFE8
   255                           postdec1	equ	0xFE5
   256                           fsr1l	equ	0xFE1
   257                           
   258                           	psect	bssBANK0
   259  000060                     __pbssBANK0:
   260                           	opt stack 0
   261  000060                     _lcd:
   262                           	opt stack 0
   263  000060                     	ds	33
   264  000081                     _buffer:
   265                           	opt stack 0
   266  000081                     	ds	32
   267  0000A1                     _cord:
   268                           	opt stack 0
   269  0000A1                     	ds	6
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           postdec1	equ	0xFE5
   277                           fsr1l	equ	0xFE1
   278                           
   279                           	psect	dataBANK0
   280  0000C6                     __pdataBANK0:
   281                           	opt stack 0
   282  0000C6                     _menu1:
   283                           	opt stack 0
   284  0000C6                     	ds	6
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           postdec1	equ	0xFE5
   292                           fsr1l	equ	0xFE1
   293                           
   294                           	psect	cstackBANK0
   295  0000A7                     __pcstackBANK0:
   296                           	opt stack 0
   297  0000A7                     ??_magnetoGetCord:
   298  0000A7                     OpenXLCD@lcdtype:
   299                           	opt stack 0
   300  0000A7                     ___lwdiv@counter:
   301                           	opt stack 0
   302  0000A7                     lcdCleanAll@lcd:
   303                           	opt stack 0
   304  0000A7                     lcdRuntime@lcd:
   305                           	opt stack 0
   306  0000A7                     memset@p:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x0
   310  0000A7                     	ds	1
   311  0000A8                     ___lwdiv@quotient:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x1
   315  0000A8                     	ds	1
   316  0000A9                     ??_lcdRuntime:
   317  0000A9                     lcdInit@lcd:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x2
   321  0000A9                     	ds	1
   322  0000AA                     ?___lwmod:
   323                           	opt stack 0
   324  0000AA                     ___lwmod@dividend:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x3
   328  0000AA                     	ds	1
   329  0000AB                     lcdRuntime@i:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x4
   333  0000AB                     	ds	1
   334  0000AC                     ___lwmod@divisor:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x5
   338  0000AC                     	ds	1
   339  0000AD                     lcdRuntime@i_343:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x6
   343  0000AD                     	ds	1
   344  0000AE                     ?_sprintf:
   345                           	opt stack 0
   346  0000AE                     sprintf@sp:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x7
   350  0000AE                     	ds	2
   351  0000B0                     sprintf@f:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x9
   355  0000B0                     	ds	8
   356  0000B8                     ??_sprintf:
   357                           
   358                           ; 1 bytes @ 0x11
   359  0000B8                     	ds	4
   360  0000BC                     sprintf@ap:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x15
   364  0000BC                     	ds	2
   365  0000BE                     sprintf@prec:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x17
   369  0000BE                     	ds	1
   370  0000BF                     sprintf@flag:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x18
   374  0000BF                     	ds	1
   375  0000C0                     sprintf@val:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x19
   379  0000C0                     	ds	2
   380  0000C2                     sprintf@width:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x1B
   384  0000C2                     	ds	2
   385  0000C4                     sprintf@c:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x1D
   389  0000C4                     	ds	1
   390  0000C5                     main@opcao:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x1E
   394  0000C5                     	ds	1
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           postdec1	equ	0xFE5
   402                           fsr1l	equ	0xFE1
   403                           
   404                           	psect	cstackCOMRAM
   405  000001                     __pcstackCOMRAM:
   406                           	opt stack 0
   407  000001                     ??_ISR:
   408  000001                     
   409                           ; 1 bytes @ 0x0
   410  000001                     	ds	18
   411  000013                     ??_ISR_LP:
   412  000013                     
   413                           ; 1 bytes @ 0x12
   414  000013                     	ds	22
   415  000029                     ??_Delay10KTCYx:
   416  000029                     ??_isdigit:
   417  000029                     ?___wmul:
   418                           	opt stack 0
   419  000029                     ?___lwdiv:
   420                           	opt stack 0
   421  000029                     __menuEnterPosition@pos:
   422                           	opt stack 0
   423  000029                     I2C_Write@data:
   424                           	opt stack 0
   425  000029                     I2C_Read@flag:
   426                           	opt stack 0
   427  000029                     delay_ms@milis:
   428                           	opt stack 0
   429  000029                     lcdMemClean@lcd:
   430                           	opt stack 0
   431  000029                     lcdWrite@lcd:
   432                           	opt stack 0
   433  000029                     DelayFor18TCY@i:
   434                           	opt stack 0
   435  000029                     menuInit@lcd:
   436                           	opt stack 0
   437  000029                     menuSetPosition@item:
   438                           	opt stack 0
   439  000029                     ___wmul@multiplier:
   440                           	opt stack 0
   441  000029                     ___lwdiv@dividend:
   442                           	opt stack 0
   443  000029                     memset@p1:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x28
   447  000029                     	ds	1
   448  00002A                     menuGoto@pos:
   449                           	opt stack 0
   450  00002A                     I2C_Start_Wait@slave_write_address:
   451                           	opt stack 0
   452  00002A                     I2C_Repeated_Start@slave_read_address:
   453                           	opt stack 0
   454  00002A                     I2C_Read@buffer:
   455                           	opt stack 0
   456  00002A                     Delay10KTCYx@unit:
   457                           	opt stack 0
   458  00002A                     _isdigit$1150:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x29
   462  00002A                     	ds	1
   463  00002B                     ??_SetDDRamAddr:
   464  00002B                     ??_delay_ms:
   465  00002B                     lcdMemClean@i:
   466                           	opt stack 0
   467  00002B                     lcdWrite@row:
   468                           	opt stack 0
   469  00002B                     WriteCmdXLCD@cmd:
   470                           	opt stack 0
   471  00002B                     WriteDataXLCD@data:
   472                           	opt stack 0
   473  00002B                     menuSetPosition@pos:
   474                           	opt stack 0
   475  00002B                     isdigit@c:
   476                           	opt stack 0
   477  00002B                     magnetoGetCord@coord:
   478                           	opt stack 0
   479  00002B                     ___wmul@multiplicand:
   480                           	opt stack 0
   481  00002B                     ___lwdiv@divisor:
   482                           	opt stack 0
   483  00002B                     memset@c:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x2A
   487  00002B                     	ds	1
   488  00002C                     lcdWrite@col:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x2B
   492  00002C                     	ds	1
   493  00002D                     delay_ms@t:
   494                           	opt stack 0
   495  00002D                     ___lwmod@counter:
   496                           	opt stack 0
   497  00002D                     lcdWrite@string:
   498                           	opt stack 0
   499  00002D                     ___wmul@product:
   500                           	opt stack 0
   501  00002D                     memset@n:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x2C
   505  00002D                     	ds	1
   506  00002E                     SetDDRamAddr@DDaddr:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x2D
   510  00002E                     	ds	1
   511  00002F                     tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           postdec1	equ	0xFE5
   518                           fsr1l	equ	0xFE1
   519                           
   520                           ; 1 bytes @ 0x2E
   521 ;;
   522 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   523 ;;
   524 ;; *************** function _main *****************
   525 ;; Defined at:
   526 ;;		line 58 in file "main.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;  opcao           1   30[BANK0 ] unsigned char 
   531 ;; Return value:  Size  Location     Type
   532 ;;                  1    wreg      void 
   533 ;; Registers used:
   534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   540 ;;      Params:         0       0       0       0       0       0       0       0       0
   541 ;;      Locals:         0       1       0       0       0       0       0       0       0
   542 ;;      Temps:          0       0       0       0       0       0       0       0       0
   543 ;;      Totals:         0       1       0       0       0       0       0       0       0
   544 ;;Total ram usage:        1 bytes
   545 ;; Hardware stack levels required when called:    8
   546 ;; This function calls:
   547 ;;		_lcdInit
   548 ;;		_magnetoGetCord
   549 ;;		_memset
   550 ;;		_menuGoto
   551 ;;		_menuInit
   552 ;;		_menuRuntime
   553 ;;		_menuSetPosition
   554 ;; This function is called by:
   555 ;;		Startup code after reset
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           	psect	text0
   560  000D5C                     __ptext0:
   561                           	opt stack 0
   562  000D5C                     _main:
   563                           	opt stack 23
   564                           
   565                           ;main.c: 60: uint8_t opcao = 1;
   566                           
   567                           ;incstack = 0
   568  000D5C  0E01               	movlw	1
   569  000D5E  0100               	movlb	0	; () banked
   570  000D60  6FC5               	movwf	main@opcao& (0+255),b
   571                           
   572                           ; BSR set to: 0
   573                           ;main.c: 62: memset(buffer, 0, 32);
   574  000D62  0E81               	movlw	low _buffer
   575  000D64  6E29               	movwf	memset@p1,c
   576  000D66  0E00               	movlw	high _buffer
   577  000D68  6E2A               	movwf	memset@p1+1,c
   578  000D6A  0E00               	movlw	0
   579  000D6C  6E2C               	movwf	memset@c+1,c
   580  000D6E  0E00               	movlw	0
   581  000D70  6E2B               	movwf	memset@c,c
   582  000D72  0E00               	movlw	0
   583  000D74  6E2E               	movwf	memset@n+1,c
   584  000D76  0E20               	movlw	32
   585  000D78  6E2D               	movwf	memset@n,c
   586  000D7A  ECF0  F008         	call	_memset	;wreg free
   587                           
   588                           ;main.c: 64: ADCON1 = 0x0F;
   589  000D7E  0E0F               	movlw	15
   590  000D80  6EC1               	movwf	4033,c	;volatile
   591                           
   592                           ;main.c: 65: OSCCON = 0x72;
   593  000D82  0E72               	movlw	114
   594  000D84  6ED3               	movwf	4051,c	;volatile
   595                           
   596                           ;main.c: 67: TRISC = 0xFE;
   597  000D86  0EFE               	movlw	254
   598  000D88  6E94               	movwf	3988,c	;volatile
   599                           
   600                           ;main.c: 68: PORTCbits.RC0 = 1;
   601  000D8A  8082               	bsf	3970,0,c	;volatile
   602                           
   603                           ;main.c: 71: IPEN = 1;
   604  000D8C  8ED0               	bsf	4048,7,c	;volatile
   605                           
   606                           ;main.c: 72: GIEH = 1;
   607  000D8E  8EF2               	bsf	intcon,7,c	;volatile
   608                           
   609                           ;main.c: 73: PEIE = 1;
   610  000D90  8CF2               	bsf	intcon,6,c	;volatile
   611                           
   612                           ;main.c: 83: T1CONbits.RD16 = 1;
   613  000D92  8ECD               	bsf	4045,7,c	;volatile
   614                           
   615                           ;main.c: 84: T1CONbits.T1RUN = 0;
   616  000D94  9CCD               	bcf	4045,6,c	;volatile
   617                           
   618                           ;main.c: 85: T1CONbits.T1CKPS = 0;
   619  000D96  0ECF               	movlw	-49
   620  000D98  16CD               	andwf	4045,f,c	;volatile
   621                           
   622                           ;main.c: 86: T1CONbits.T1OSCEN = 0;
   623  000D9A  96CD               	bcf	4045,3,c	;volatile
   624                           
   625                           ;main.c: 87: T1CONbits.TMR1CS = 0;
   626  000D9C  92CD               	bcf	4045,1,c	;volatile
   627                           
   628                           ;main.c: 88: T1CONbits.TMR1ON = 1;
   629  000D9E  80CD               	bsf	4045,0,c	;volatile
   630                           
   631                           ;main.c: 89: TMR1H = 0x63;
   632  000DA0  0E63               	movlw	99
   633  000DA2  6ECF               	movwf	4047,c	;volatile
   634                           
   635                           ;main.c: 90: TMR1L = 0xC0;
   636  000DA4  0EC0               	movlw	192
   637  000DA6  6ECE               	movwf	4046,c	;volatile
   638                           
   639                           ;main.c: 91: TMR1IF = 0;
   640  000DA8  909E               	bcf	3998,0,c	;volatile
   641                           
   642                           ;main.c: 92: TMR1IE = 1;
   643  000DAA  809D               	bsf	3997,0,c	;volatile
   644                           
   645                           ;main.c: 93: TMR1IP = 0;
   646  000DAC  909F               	bcf	3999,0,c	;volatile
   647                           
   648                           ;main.c: 96: lcdInit(&lcd);
   649  000DAE  0E60               	movlw	low _lcd
   650  000DB0  0100               	movlb	0	; () banked
   651  000DB2  6FA9               	movwf	lcdInit@lcd& (0+255),b
   652  000DB4  0E00               	movlw	high _lcd
   653  000DB6  6FAA               	movwf	(lcdInit@lcd+1)& (0+255),b
   654  000DB8  EC54  F008         	call	_lcdInit	;wreg free
   655                           
   656                           ;main.c: 97: menuInit(&lcd);
   657  000DBC  0E60               	movlw	low _lcd
   658  000DBE  6E29               	movwf	menuInit@lcd,c
   659  000DC0  0E00               	movlw	high _lcd
   660  000DC2  6E2A               	movwf	menuInit@lcd+1,c
   661  000DC4  ECBC  F009         	call	_menuInit	;wreg free
   662                           
   663                           ;main.c: 98: menuSetPosition(0, &menu1);
   664  000DC8  0EC6               	movlw	low _menu1
   665  000DCA  6E29               	movwf	menuSetPosition@item,c
   666  000DCC  0E00               	movlw	high _menu1
   667  000DCE  6E2A               	movwf	menuSetPosition@item+1,c
   668  000DD0  0E00               	movlw	0
   669  000DD2  EC69  F009         	call	_menuSetPosition
   670                           
   671                           ;main.c: 99: menuGoto(0);
   672  000DD6  0E00               	movlw	0
   673  000DD8  ECC1  F009         	call	_menuGoto
   674                           
   675                           ;main.c: 102: switch (opcao) {
   676                           
   677                           ;main.c: 101: while (1) {
   678  000DDC  D007               	goto	l82
   679  000DDE                     
   680                           ;main.c: 104: magnetoGetCord(&cord);
   681  000DDE  0EA1               	movlw	low _cord
   682  000DE0  6E2B               	movwf	magnetoGetCord@coord,c
   683  000DE2  0E00               	movlw	high _cord
   684  000DE4  6E2C               	movwf	magnetoGetCord@coord+1,c
   685  000DE6  ECFF  F005         	call	_magnetoGetCord	;wreg free
   686                           
   687                           ;main.c: 107: }
   688                           
   689                           ;main.c: 106: break;
   690  000DEA  D005               	goto	l84
   691  000DEC                     l82:
   692  000DEC  0100               	movlb	0	; () banked
   693  000DEE  51C5               	movf	main@opcao& (0+255),w,b
   694                           
   695                           ; Switch size 1, requested type "space"
   696                           ; Number of cases is 1, Range of values is 1 to 1
   697                           ; switch strategies available:
   698                           ; Name         Instructions Cycles
   699                           ; simple_byte            4     3 (average)
   700                           ;	Chosen strategy is simple_byte
   701  000DF0  0A01               	xorlw	1	; case 1
   702  000DF2  B4D8               	btfsc	status,2,c
   703  000DF4  D7F4               	goto	l83
   704  000DF6                     l84:
   705                           
   706                           ;main.c: 108: menuRuntime();
   707                           
   708                           ; BSR set to: 0
   709  000DF6  EC10  F008         	call	_menuRuntime	;wreg free
   710  000DFA  D7F8               	goto	l82
   711  000DFC                     __end_of_main:
   712                           	opt stack 0
   713                           tblptru	equ	0xFF8
   714                           tblptrh	equ	0xFF7
   715                           tblptrl	equ	0xFF6
   716                           tablat	equ	0xFF5
   717                           intcon	equ	0xFF2
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           postdec1	equ	0xFE5
   721                           fsr1l	equ	0xFE1
   722                           status	equ	0xFD8
   723                           
   724 ;; *************** function _menuSetPosition *****************
   725 ;; Defined at:
   726 ;;		line 15 in file "menu.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  pos             1    wreg     unsigned char 
   729 ;;  item            2   40[COMRAM] PTR struct .
   730 ;;		 -> menu1(6), 
   731 ;; Auto vars:     Size  Location     Type
   732 ;;  pos             1   42[COMRAM] unsigned char 
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   742 ;;      Params:         2       0       0       0       0       0       0       0       0
   743 ;;      Locals:         1       0       0       0       0       0       0       0       0
   744 ;;      Temps:          0       0       0       0       0       0       0       0       0
   745 ;;      Totals:         3       0       0       0       0       0       0       0       0
   746 ;;Total ram usage:        3 bytes
   747 ;; Hardware stack levels used:    1
   748 ;; Hardware stack levels required when called:    3
   749 ;; This function calls:
   750 ;;		Nothing
   751 ;; This function is called by:
   752 ;;		_main
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           	psect	text1
   757  0012D2                     __ptext1:
   758                           	opt stack 0
   759  0012D2                     _menuSetPosition:
   760                           	opt stack 27
   761                           
   762                           ;incstack = 0
   763                           ;menuSetPosition@pos stored from wreg
   764  0012D2  6E2B               	movwf	menuSetPosition@pos,c
   765                           
   766                           ;menu.c: 17: Menu.Items[pos] = item;
   767  0012D4  502B               	movf	menuSetPosition@pos,w,c
   768  0012D6  0D02               	mullw	2
   769  0012D8  0E35               	movlw	low (_Menu+6)
   770  0012DA  24F3               	addwf	prodl,w,c
   771  0012DC  6ED9               	movwf	fsr2l,c
   772  0012DE  0E00               	movlw	high (_Menu+6)
   773  0012E0  20F4               	addwfc	prodh,w,c
   774  0012E2  6EDA               	movwf	fsr2h,c
   775  0012E4  C029  FFDE         	movff	menuSetPosition@item,postinc2
   776  0012E8  C02A  FFDD         	movff	menuSetPosition@item+1,postdec2
   777  0012EC  0012               	return		;funcret
   778  0012EE                     __end_of_menuSetPosition:
   779                           	opt stack 0
   780                           tblptru	equ	0xFF8
   781                           tblptrh	equ	0xFF7
   782                           tblptrl	equ	0xFF6
   783                           tablat	equ	0xFF5
   784                           prodh	equ	0xFF4
   785                           prodl	equ	0xFF3
   786                           intcon	equ	0xFF2
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           postdec1	equ	0xFE5
   790                           fsr1l	equ	0xFE1
   791                           postinc2	equ	0xFDE
   792                           postdec2	equ	0xFDD
   793                           fsr2h	equ	0xFDA
   794                           fsr2l	equ	0xFD9
   795                           status	equ	0xFD8
   796                           
   797 ;; *************** function _menuRuntime *****************
   798 ;; Defined at:
   799 ;;		line 59 in file "menu.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;		None
   802 ;; Auto vars:     Size  Location     Type
   803 ;;		None
   804 ;; Return value:  Size  Location     Type
   805 ;;                  1    wreg      void 
   806 ;; Registers used:
   807 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   808 ;; Tracked objects:
   809 ;;		On entry : 0/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   813 ;;      Params:         0       0       0       0       0       0       0       0       0
   814 ;;      Locals:         0       0       0       0       0       0       0       0       0
   815 ;;      Temps:          0       0       0       0       0       0       0       0       0
   816 ;;      Totals:         0       0       0       0       0       0       0       0       0
   817 ;;Total ram usage:        0 bytes
   818 ;; Hardware stack levels used:    1
   819 ;; Hardware stack levels required when called:    6
   820 ;; This function calls:
   821 ;;		_OnRenderMenu1
   822 ;;		_lcdRuntime
   823 ;; This function is called by:
   824 ;;		_main
   825 ;; This function uses a non-reentrant model
   826 ;;
   827                           
   828                           	psect	text2
   829  001020                     __ptext2:
   830                           	opt stack 0
   831  001020                     _menuRuntime:
   832                           	opt stack 24
   833                           
   834                           ;menu.c: 61: if (Menu.NeedsRedraw) {
   835                           
   836                           ;incstack = 0
   837  001020  5031               	movf	_Menu+2,w,c
   838  001022  B4D8               	btfsc	status,2,c
   839  001024  0012               	return	
   840                           
   841                           ;menu.c: 62: Menu.NeedsRedraw = 0;
   842  001026  0E00               	movlw	0
   843  001028  6E31               	movwf	_Menu+2,c
   844                           
   845                           ;menu.c: 63: if (Menu.Current) {
   846  00102A  5033               	movf	_Menu+4,w,c
   847  00102C  1034               	iorwf	_Menu+5,w,c
   848  00102E  B4D8               	btfsc	status,2,c
   849  001030  D012               	goto	u2309
   850                           
   851                           ;menu.c: 64: Menu.Current->Render();
   852  001032  EE20 F002          	lfsr	2,2
   853  001036  5033               	movf	_Menu+4,w,c
   854  001038  26D9               	addwf	fsr2l,f,c
   855  00103A  5034               	movf	_Menu+5,w,c
   856  00103C  22DA               	addwfc	fsr2h,f,c
   857  00103E  D801               	call	u2308
   858  001040  D00A               	goto	u2309
   859  001042                     u2308:
   860  001042  0005               	push	
   861  001044  6EFA               	movwf	pclath,c
   862  001046  50DE               	movf	postinc2,w,c
   863  001048  6EFD               	movwf	tosl,c
   864  00104A  50DE               	movf	postinc2,w,c
   865  00104C  6EFE               	movwf	tosh,c
   866  00104E  50F8               	movf	tblptru,w,c
   867  001050  6EFF               	movwf	tosu,c
   868  001052  50FA               	movf	pclath,w,c
   869  001054  0012               	return		;indir
   870  001056                     u2309:
   871                           
   872                           ;menu.c: 65: }
   873                           ;menu.c: 66: lcdRuntime(Menu.lcd);
   874  001056  C02F  F0A7         	movff	_Menu,lcdRuntime@lcd
   875  00105A  C030  F0A8         	movff	_Menu+1,lcdRuntime@lcd+1
   876  00105E  EC2F  F005         	call	_lcdRuntime	;wreg free
   877  001062  0012               	return	
   878  001064                     __end_of_menuRuntime:
   879                           	opt stack 0
   880                           tosu	equ	0xFFF
   881                           tosh	equ	0xFFE
   882                           tosl	equ	0xFFD
   883                           pclath	equ	0xFFA
   884                           tblptru	equ	0xFF8
   885                           tblptrh	equ	0xFF7
   886                           tblptrl	equ	0xFF6
   887                           tablat	equ	0xFF5
   888                           prodh	equ	0xFF4
   889                           prodl	equ	0xFF3
   890                           intcon	equ	0xFF2
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           postdec1	equ	0xFE5
   894                           fsr1l	equ	0xFE1
   895                           postinc2	equ	0xFDE
   896                           postdec2	equ	0xFDD
   897                           fsr2h	equ	0xFDA
   898                           fsr2l	equ	0xFD9
   899                           status	equ	0xFD8
   900                           
   901 ;; *************** function _lcdRuntime *****************
   902 ;; Defined at:
   903 ;;		line 81 in file "display.c"
   904 ;; Parameters:    Size  Location     Type
   905 ;;  lcd             2    0[BANK0 ] PTR struct .
   906 ;;		 -> lcd(33), 
   907 ;; Auto vars:     Size  Location     Type
   908 ;;  i               2    6[BANK0 ] int 
   909 ;;  i               2    4[BANK0 ] int 
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   919 ;;      Params:         0       2       0       0       0       0       0       0       0
   920 ;;      Locals:         0       4       0       0       0       0       0       0       0
   921 ;;      Temps:          0       2       0       0       0       0       0       0       0
   922 ;;      Totals:         0       8       0       0       0       0       0       0       0
   923 ;;Total ram usage:        8 bytes
   924 ;; Hardware stack levels used:    1
   925 ;; Hardware stack levels required when called:    5
   926 ;; This function calls:
   927 ;;		_BusyXLCD
   928 ;;		_SetDDRamAddr
   929 ;;		_WriteDataXLCD
   930 ;; This function is called by:
   931 ;;		_menuRuntime
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text3
   936  000A5E                     __ptext3:
   937                           	opt stack 0
   938  000A5E                     _lcdRuntime:
   939                           	opt stack 24
   940                           
   941                           ;display.c: 82: while (BusyXLCD());
   942                           
   943                           ;incstack = 0
   944  000A5E  ECD3  F008         	call	_BusyXLCD	;wreg free
   945  000A62  0900               	iorlw	0
   946  000A64  A4D8               	btfss	status,2,c
   947  000A66  D7FB               	goto	_lcdRuntime
   948                           
   949                           ;display.c: 84: if (lcd->NeedsRedraw == 1) {
   950  000A68  C0A7  FFD9         	movff	lcdRuntime@lcd,fsr2l
   951  000A6C  C0A8  FFDA         	movff	lcdRuntime@lcd+1,fsr2h
   952  000A70  04DE               	decf	postinc2,w,c
   953  000A72  A4D8               	btfss	status,2,c
   954  000A74  0012               	return	
   955                           
   956                           ;display.c: 85: SetDDRamAddr(0x00);
   957  000A76  0E00               	movlw	0
   958  000A78  EC9E  F007         	call	_SetDDRamAddr
   959                           
   960                           ;display.c: 86: for (int i = 0; i < 16; i++) {
   961  000A7C  0E00               	movlw	0
   962  000A7E  0100               	movlb	0	; () banked
   963  000A80  6FAC               	movwf	(lcdRuntime@i+1)& (0+255),b
   964  000A82  0E00               	movlw	0
   965  000A84  6FAB               	movwf	lcdRuntime@i& (0+255),b
   966                           
   967                           ; BSR set to: 0
   968  000A86  BFAC               	btfsc	(lcdRuntime@i+1)& (0+255),7,b
   969  000A88  D006               	goto	l159
   970  000A8A  51AC               	movf	(lcdRuntime@i+1)& (0+255),w,b
   971  000A8C  E124               	bnz	l3059
   972  000A8E  0E10               	movlw	16
   973  000A90  5DAB               	subwf	lcdRuntime@i& (0+255),w,b
   974  000A92  B0D8               	btfsc	status,0,c
   975  000A94  D020               	goto	u2200
   976  000A96                     l159:
   977                           
   978                           ; BSR set to: 0
   979                           
   980                           ; BSR set to: 0
   981                           
   982                           ; BSR set to: 0
   983                           ;display.c: 87: while (BusyXLCD());
   984  000A96  ECD3  F008         	call	_BusyXLCD	;wreg free
   985  000A9A  0900               	iorlw	0
   986  000A9C  A4D8               	btfss	status,2,c
   987  000A9E  D7FB               	goto	l159
   988                           
   989                           ;display.c: 88: WriteDataXLCD((char) lcd->Memory[0][i]);
   990  000AA0  0E01               	movlw	1
   991  000AA2  0100               	movlb	0	; () banked
   992  000AA4  25AB               	addwf	lcdRuntime@i& (0+255),w,b
   993  000AA6  6FA9               	movwf	??_lcdRuntime& (0+255),b
   994  000AA8  0E00               	movlw	0
   995  000AAA  21AC               	addwfc	(lcdRuntime@i+1)& (0+255),w,b
   996  000AAC  6FAA               	movwf	(??_lcdRuntime+1)& (0+255),b
   997  000AAE  51A9               	movf	??_lcdRuntime& (0+255),w,b
   998  000AB0  25A7               	addwf	lcdRuntime@lcd& (0+255),w,b
   999  000AB2  6ED9               	movwf	fsr2l,c
  1000  000AB4  51AA               	movf	(??_lcdRuntime+1)& (0+255),w,b
  1001  000AB6  21A8               	addwfc	(lcdRuntime@lcd+1)& (0+255),w,b
  1002  000AB8  6EDA               	movwf	fsr2h,c
  1003  000ABA  50DF               	movf	indf2,w,c
  1004  000ABC  EC95  F008         	call	_WriteDataXLCD
  1005  000AC0  0100               	movlb	0	; () banked
  1006  000AC2  4BAB               	infsnz	lcdRuntime@i& (0+255),f,b
  1007  000AC4  2BAC               	incf	(lcdRuntime@i+1)& (0+255),f,b
  1008                           
  1009                           ; BSR set to: 0
  1010  000AC6  BFAC               	btfsc	(lcdRuntime@i+1)& (0+255),7,b
  1011  000AC8  D7E6               	goto	l159
  1012  000ACA  51AC               	movf	(lcdRuntime@i+1)& (0+255),w,b
  1013  000ACC  E104               	bnz	l3059
  1014  000ACE  0E10               	movlw	16
  1015  000AD0  5DAB               	subwf	lcdRuntime@i& (0+255),w,b
  1016  000AD2  A0D8               	btfss	status,0,c
  1017  000AD4  D7E0               	goto	l159
  1018  000AD6                     u2200:
  1019  000AD6                     l3059:
  1020                           
  1021                           ; BSR set to: 0
  1022                           ;display.c: 89: }
  1023                           ;display.c: 90: SetDDRamAddr(0x40);
  1024  000AD6  0E40               	movlw	64
  1025  000AD8  EC9E  F007         	call	_SetDDRamAddr
  1026                           
  1027                           ;display.c: 91: for (int i = 0; i < 16; i++) {
  1028  000ADC  0E00               	movlw	0
  1029  000ADE  0100               	movlb	0	; () banked
  1030  000AE0  6FAE               	movwf	(lcdRuntime@i_343+1)& (0+255),b
  1031  000AE2  0E00               	movlw	0
  1032  000AE4  6FAD               	movwf	lcdRuntime@i_343& (0+255),b
  1033                           
  1034                           ; BSR set to: 0
  1035  000AE6  BFAE               	btfsc	(lcdRuntime@i_343+1)& (0+255),7,b
  1036  000AE8  D006               	goto	l164
  1037  000AEA  51AE               	movf	(lcdRuntime@i_343+1)& (0+255),w,b
  1038  000AEC  E124               	bnz	l3075
  1039  000AEE  0E10               	movlw	16
  1040  000AF0  5DAD               	subwf	lcdRuntime@i_343& (0+255),w,b
  1041  000AF2  B0D8               	btfsc	status,0,c
  1042  000AF4  D020               	goto	u2230
  1043  000AF6                     l164:
  1044                           
  1045                           ; BSR set to: 0
  1046                           
  1047                           ; BSR set to: 0
  1048                           
  1049                           ; BSR set to: 0
  1050                           ;display.c: 92: while (BusyXLCD());
  1051  000AF6  ECD3  F008         	call	_BusyXLCD	;wreg free
  1052  000AFA  0900               	iorlw	0
  1053  000AFC  A4D8               	btfss	status,2,c
  1054  000AFE  D7FB               	goto	l164
  1055                           
  1056                           ;display.c: 93: WriteDataXLCD((char) lcd->Memory[1][i]);
  1057  000B00  0E11               	movlw	17
  1058  000B02  0100               	movlb	0	; () banked
  1059  000B04  25AD               	addwf	lcdRuntime@i_343& (0+255),w,b
  1060  000B06  6FA9               	movwf	??_lcdRuntime& (0+255),b
  1061  000B08  0E00               	movlw	0
  1062  000B0A  21AE               	addwfc	(lcdRuntime@i_343+1)& (0+255),w,b
  1063  000B0C  6FAA               	movwf	(??_lcdRuntime+1)& (0+255),b
  1064  000B0E  51A9               	movf	??_lcdRuntime& (0+255),w,b
  1065  000B10  25A7               	addwf	lcdRuntime@lcd& (0+255),w,b
  1066  000B12  6ED9               	movwf	fsr2l,c
  1067  000B14  51AA               	movf	(??_lcdRuntime+1)& (0+255),w,b
  1068  000B16  21A8               	addwfc	(lcdRuntime@lcd+1)& (0+255),w,b
  1069  000B18  6EDA               	movwf	fsr2h,c
  1070  000B1A  50DF               	movf	indf2,w,c
  1071  000B1C  EC95  F008         	call	_WriteDataXLCD
  1072  000B20  0100               	movlb	0	; () banked
  1073  000B22  4BAD               	infsnz	lcdRuntime@i_343& (0+255),f,b
  1074  000B24  2BAE               	incf	(lcdRuntime@i_343+1)& (0+255),f,b
  1075                           
  1076                           ; BSR set to: 0
  1077  000B26  BFAE               	btfsc	(lcdRuntime@i_343+1)& (0+255),7,b
  1078  000B28  D7E6               	goto	l164
  1079  000B2A  51AE               	movf	(lcdRuntime@i_343+1)& (0+255),w,b
  1080  000B2C  E104               	bnz	l3075
  1081  000B2E  0E10               	movlw	16
  1082  000B30  5DAD               	subwf	lcdRuntime@i_343& (0+255),w,b
  1083  000B32  A0D8               	btfss	status,0,c
  1084  000B34  D7E0               	goto	l164
  1085  000B36                     u2230:
  1086  000B36                     l3075:
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;display.c: 94: }
  1090                           ;display.c: 96: lcd->NeedsRedraw = 0;
  1091  000B36  C0A7  FFD9         	movff	lcdRuntime@lcd,fsr2l
  1092  000B3A  C0A8  FFDA         	movff	lcdRuntime@lcd+1,fsr2h
  1093  000B3E  0E00               	movlw	0
  1094  000B40  6EDF               	movwf	indf2,c
  1095  000B42  0012               	return	
  1096  000B44                     __end_of_lcdRuntime:
  1097                           	opt stack 0
  1098                           tosu	equ	0xFFF
  1099                           tosh	equ	0xFFE
  1100                           tosl	equ	0xFFD
  1101                           pclath	equ	0xFFA
  1102                           tblptru	equ	0xFF8
  1103                           tblptrh	equ	0xFF7
  1104                           tblptrl	equ	0xFF6
  1105                           tablat	equ	0xFF5
  1106                           prodh	equ	0xFF4
  1107                           prodl	equ	0xFF3
  1108                           intcon	equ	0xFF2
  1109                           postinc0	equ	0xFEE
  1110                           wreg	equ	0xFE8
  1111                           postdec1	equ	0xFE5
  1112                           fsr1l	equ	0xFE1
  1113                           indf2	equ	0xFDF
  1114                           postinc2	equ	0xFDE
  1115                           postdec2	equ	0xFDD
  1116                           fsr2h	equ	0xFDA
  1117                           fsr2l	equ	0xFD9
  1118                           status	equ	0xFD8
  1119                           
  1120 ;; *************** function _WriteDataXLCD *****************
  1121 ;; Defined at:
  1122 ;;		line 364 in file "xlcd_mod.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  data            1    wreg     unsigned char 
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  data            1   42[COMRAM] unsigned char 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  1    wreg      void 
  1129 ;; Registers used:
  1130 ;;		wreg, status,2, status,0, cstack
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1136 ;;      Params:         0       0       0       0       0       0       0       0       0
  1137 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1139 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1140 ;;Total ram usage:        1 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; Hardware stack levels required when called:    4
  1143 ;; This function calls:
  1144 ;;		_DelayFor18TCY
  1145 ;; This function is called by:
  1146 ;;		_lcdRuntime
  1147 ;;		_putrsXLCD
  1148 ;;		_putsXLCD
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text4
  1153  00112A                     __ptext4:
  1154                           	opt stack 0
  1155  00112A                     _WriteDataXLCD:
  1156                           	opt stack 24
  1157                           
  1158                           ;incstack = 0
  1159                           ;WriteDataXLCD@data stored from wreg
  1160  00112A  6E2B               	movwf	WriteDataXLCD@data,c
  1161                           
  1162                           ;xlcd_mod.c: 383: TRISD &= 0xf0;
  1163  00112C  0EF0               	movlw	240
  1164  00112E  1695               	andwf	3989,f,c	;volatile
  1165                           
  1166                           ;xlcd_mod.c: 384: PORTD &= 0xf0;
  1167  001130  0EF0               	movlw	240
  1168  001132  1683               	andwf	3971,f,c	;volatile
  1169                           
  1170                           ;xlcd_mod.c: 385: PORTD |= ((data >> 4)&0x0f);
  1171  001134  382B               	swapf	WriteDataXLCD@data,w,c
  1172  001136  0B0F               	andlw	15
  1173  001138  0B0F               	andlw	15
  1174  00113A  1283               	iorwf	3971,f,c	;volatile
  1175                           
  1176                           ;xlcd_mod.c: 387: LATDbits.LATD6 = 1;
  1177  00113C  8C8C               	bsf	3980,6,c	;volatile
  1178                           
  1179                           ;xlcd_mod.c: 388: LATDbits.LATD5 = 0;
  1180  00113E  9A8C               	bcf	3980,5,c	;volatile
  1181                           
  1182                           ;xlcd_mod.c: 389: DelayFor18TCY();
  1183  001140  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  1184                           
  1185                           ;xlcd_mod.c: 390: LATDbits.LATD4 = 1;
  1186  001144  888C               	bsf	3980,4,c	;volatile
  1187                           
  1188                           ;xlcd_mod.c: 391: DelayFor18TCY();
  1189  001146  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  1190                           
  1191                           ;xlcd_mod.c: 392: LATDbits.LATD4 = 0;
  1192  00114A  988C               	bcf	3980,4,c	;volatile
  1193                           
  1194                           ;xlcd_mod.c: 397: PORTD &= 0xf0;
  1195  00114C  0EF0               	movlw	240
  1196  00114E  1683               	andwf	3971,f,c	;volatile
  1197                           
  1198                           ;xlcd_mod.c: 398: PORTD |= (data & 0x0f);
  1199  001150  502B               	movf	WriteDataXLCD@data,w,c
  1200  001152  0B0F               	andlw	15
  1201  001154  1283               	iorwf	3971,f,c	;volatile
  1202                           
  1203                           ;xlcd_mod.c: 400: DelayFor18TCY();
  1204  001156  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  1205                           
  1206                           ;xlcd_mod.c: 401: LATDbits.LATD4 = 1;
  1207  00115A  888C               	bsf	3980,4,c	;volatile
  1208                           
  1209                           ;xlcd_mod.c: 402: DelayFor18TCY();
  1210  00115C  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  1211                           
  1212                           ;xlcd_mod.c: 403: LATDbits.LATD4 = 0;
  1213  001160  988C               	bcf	3980,4,c	;volatile
  1214                           
  1215                           ;xlcd_mod.c: 407: TRISD |= 0x0f;
  1216  001162  0E0F               	movlw	15
  1217  001164  1295               	iorwf	3989,f,c	;volatile
  1218  001166  0012               	return	
  1219  001168                     __end_of_WriteDataXLCD:
  1220                           	opt stack 0
  1221                           tosu	equ	0xFFF
  1222                           tosh	equ	0xFFE
  1223                           tosl	equ	0xFFD
  1224                           pclath	equ	0xFFA
  1225                           tblptru	equ	0xFF8
  1226                           tblptrh	equ	0xFF7
  1227                           tblptrl	equ	0xFF6
  1228                           tablat	equ	0xFF5
  1229                           prodh	equ	0xFF4
  1230                           prodl	equ	0xFF3
  1231                           intcon	equ	0xFF2
  1232                           postinc0	equ	0xFEE
  1233                           wreg	equ	0xFE8
  1234                           postdec1	equ	0xFE5
  1235                           fsr1l	equ	0xFE1
  1236                           indf2	equ	0xFDF
  1237                           postinc2	equ	0xFDE
  1238                           postdec2	equ	0xFDD
  1239                           fsr2h	equ	0xFDA
  1240                           fsr2l	equ	0xFD9
  1241                           status	equ	0xFD8
  1242                           
  1243 ;; *************** function _OnRenderMenu1 *****************
  1244 ;; Defined at:
  1245 ;;		line 23 in file "main.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;		None
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;		None
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      void 
  1252 ;; Registers used:
  1253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1259 ;;      Params:         0       0       0       0       0       0       0       0       0
  1260 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1262 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1263 ;;Total ram usage:        0 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; Hardware stack levels required when called:    5
  1266 ;; This function calls:
  1267 ;;		_lcdWrite
  1268 ;;		_sprintf
  1269 ;; This function is called by:
  1270 ;;		_menuRuntime
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	text5
  1275  000F8E                     __ptext5:
  1276                           	opt stack 0
  1277  000F8E                     _OnRenderMenu1:
  1278                           	opt stack 24
  1279                           
  1280                           ;main.c: 25: sprintf(buffer, "%4d %4d %4d\0", cord.x, cord.y, cord.z);
  1281                           
  1282                           ;incstack = 0
  1283  000F8E  0E81               	movlw	low _buffer
  1284  000F90  0100               	movlb	0	; () banked
  1285  000F92  6FAE               	movwf	sprintf@sp& (0+255),b
  1286  000F94  0E00               	movlw	high _buffer
  1287  000F96  6FAF               	movwf	(sprintf@sp+1)& (0+255),b
  1288  000F98  0E0B               	movlw	low STR_1
  1289  000F9A  6FB0               	movwf	sprintf@f& (0+255),b
  1290  000F9C  0E08               	movlw	high STR_1
  1291  000F9E  6FB1               	movwf	(sprintf@f+1)& (0+255),b
  1292  000FA0  C0A1  F0B2         	movff	_cord,?_sprintf+4
  1293  000FA4  C0A2  F0B3         	movff	_cord+1,?_sprintf+5
  1294  000FA8  C0A3  F0B4         	movff	_cord+2,?_sprintf+6
  1295  000FAC  C0A4  F0B5         	movff	_cord+3,?_sprintf+7
  1296  000FB0  C0A5  F0B6         	movff	_cord+4,?_sprintf+8
  1297  000FB4  C0A6  F0B7         	movff	_cord+5,?_sprintf+9
  1298  000FB8  EC0D  F004         	call	_sprintf	;wreg free
  1299                           
  1300                           ;main.c: 26: lcdWrite(&lcd, 2, 1, buffer);
  1301  000FBC  0E60               	movlw	low _lcd
  1302  000FBE  6E29               	movwf	lcdWrite@lcd,c
  1303  000FC0  0E00               	movlw	high _lcd
  1304  000FC2  6E2A               	movwf	lcdWrite@lcd+1,c
  1305  000FC4  0E02               	movlw	2
  1306  000FC6  6E2B               	movwf	lcdWrite@row,c
  1307  000FC8  0E01               	movlw	1
  1308  000FCA  6E2C               	movwf	lcdWrite@col,c
  1309  000FCC  0E81               	movlw	low _buffer
  1310  000FCE  6E2D               	movwf	lcdWrite@string,c
  1311  000FD0  0E00               	movlw	high _buffer
  1312  000FD2  6E2E               	movwf	lcdWrite@string+1,c
  1313  000FD4  ECA2  F005         	call	_lcdWrite	;wreg free
  1314  000FD8  0012               	return		;funcret
  1315  000FDA                     __end_of_OnRenderMenu1:
  1316                           	opt stack 0
  1317                           tosu	equ	0xFFF
  1318                           tosh	equ	0xFFE
  1319                           tosl	equ	0xFFD
  1320                           pclath	equ	0xFFA
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           prodh	equ	0xFF4
  1326                           prodl	equ	0xFF3
  1327                           intcon	equ	0xFF2
  1328                           postinc0	equ	0xFEE
  1329                           wreg	equ	0xFE8
  1330                           postdec1	equ	0xFE5
  1331                           fsr1l	equ	0xFE1
  1332                           indf2	equ	0xFDF
  1333                           postinc2	equ	0xFDE
  1334                           postdec2	equ	0xFDD
  1335                           fsr2h	equ	0xFDA
  1336                           fsr2l	equ	0xFD9
  1337                           status	equ	0xFD8
  1338                           
  1339 ;; *************** function _sprintf *****************
  1340 ;; Defined at:
  1341 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;  sp              2    7[BANK0 ] PTR unsigned char 
  1344 ;;		 -> buffer(32), 
  1345 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  1346 ;;		 -> STR_1(13), 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  tmpval          4    0        struct .
  1349 ;;  cp              3    0        PTR const unsigned char 
  1350 ;;  width           2   27[BANK0 ] int 
  1351 ;;  val             2   25[BANK0 ] unsigned int 
  1352 ;;  ap              2   21[BANK0 ] PTR void [1]
  1353 ;;		 -> ?_sprintf(2), 
  1354 ;;  len             2    0        unsigned int 
  1355 ;;  c               1   29[BANK0 ] char 
  1356 ;;  flag            1   24[BANK0 ] unsigned char 
  1357 ;;  prec            1   23[BANK0 ] char 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  2    7[BANK0 ] int 
  1360 ;; Registers used:
  1361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1367 ;;      Params:         0      10       0       0       0       0       0       0       0
  1368 ;;      Locals:         0       9       0       0       0       0       0       0       0
  1369 ;;      Temps:          0       4       0       0       0       0       0       0       0
  1370 ;;      Totals:         0      23       0       0       0       0       0       0       0
  1371 ;;Total ram usage:       23 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    4
  1374 ;; This function calls:
  1375 ;;		___lwdiv
  1376 ;;		___lwmod
  1377 ;;		___wmul
  1378 ;;		_isdigit
  1379 ;; This function is called by:
  1380 ;;		_OnRenderMenu1
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           	psect	text6
  1385  00081A                     __ptext6:
  1386                           	opt stack 0
  1387  00081A                     _sprintf:
  1388                           	opt stack 24
  1389                           
  1390                           ;doprnt.c: 494: va_list ap;
  1391                           ;doprnt.c: 499: signed char c;
  1392                           ;doprnt.c: 501: int width;
  1393                           ;doprnt.c: 506: signed char prec;
  1394                           ;doprnt.c: 508: unsigned char flag;
  1395                           ;doprnt.c: 523: union {
  1396                           ;doprnt.c: 524: unsigned long vd;
  1397                           ;doprnt.c: 525: double integ;
  1398                           ;doprnt.c: 526: } tmpval;
  1399                           ;doprnt.c: 528: unsigned int val;
  1400                           ;doprnt.c: 529: unsigned len;
  1401                           ;doprnt.c: 530: const char * cp;
  1402                           ;doprnt.c: 533: *ap = __va_start();
  1403                           
  1404                           ;incstack = 0
  1405  00081A  0EB2               	movlw	low (?_sprintf+4)
  1406  00081C  0100               	movlb	0	; () banked
  1407  00081E  6FBC               	movwf	sprintf@ap& (0+255),b
  1408  000820  0E00               	movlw	high (?_sprintf+4)
  1409  000822  6FBD               	movwf	(sprintf@ap+1)& (0+255),b
  1410                           
  1411                           ;doprnt.c: 536: while(c = *f++) {
  1412  000824  D108               	goto	u2050
  1413  000826                     
  1414                           ; BSR set to: 0
  1415                           ;doprnt.c: 538: if(c != '%')
  1416                           
  1417                           ; BSR set to: 0
  1418  000826  0E25               	movlw	37
  1419  000828  19C4               	xorwf	sprintf@c& (0+255),w,b
  1420  00082A  B4D8               	btfsc	status,2,c
  1421  00082C  D009               	goto	l489
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;doprnt.c: 540: {
  1425                           ;doprnt.c: 541: ((*sp++ = (c)));
  1426  00082E  C0AE  FFD9         	movff	sprintf@sp,fsr2l
  1427  000832  C0AF  FFDA         	movff	sprintf@sp+1,fsr2h
  1428  000836  C0C4  FFDF         	movff	sprintf@c,indf2
  1429                           
  1430                           ; BSR set to: 0
  1431  00083A  4BAE               	infsnz	sprintf@sp& (0+255),f,b
  1432  00083C  2BAF               	incf	(sprintf@sp+1)& (0+255),f,b
  1433                           
  1434                           ;doprnt.c: 542: continue;
  1435  00083E  D0FB               	goto	u2050
  1436  000840                     l489:
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;doprnt.c: 543: }
  1440                           ;doprnt.c: 546: width = 0;
  1441                           
  1442                           ; BSR set to: 0
  1443  000840  0E00               	movlw	0
  1444  000842  6FC3               	movwf	(sprintf@width+1)& (0+255),b
  1445  000844  0E00               	movlw	0
  1446  000846  6FC2               	movwf	sprintf@width& (0+255),b
  1447                           
  1448                           ;doprnt.c: 548: flag = 0;
  1449  000848  0E00               	movlw	0
  1450  00084A  6FBF               	movwf	sprintf@flag& (0+255),b
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1454  00084C  C0B0  FFF6         	movff	sprintf@f,tblptrl
  1455  000850  C0B1  FFF7         	movff	sprintf@f+1,tblptrh
  1456  000854                     	if	0	;tblptru may be non-zero
  1457  000854                     	endif
  1458  000854                     	if	0	;tblptru may be non-zero
  1459  000854                     	endif
  1460  000854  0008               	tblrd		*
  1461  000856  50F5               	movf	tablat,w,c
  1462  000858  EC3C  F009         	call	_isdigit
  1463  00085C  A0D8               	btfss	status,0,c
  1464  00085E  D034               	goto	l493
  1465                           
  1466                           ;doprnt.c: 598: width = 0;
  1467  000860  0E00               	movlw	0
  1468  000862  0100               	movlb	0	; () banked
  1469  000864  6FC3               	movwf	(sprintf@width+1)& (0+255),b
  1470  000866  0E00               	movlw	0
  1471  000868  6FC2               	movwf	sprintf@width& (0+255),b
  1472  00086A                     
  1473                           ;doprnt.c: 600: width *= 10;
  1474                           
  1475                           ; BSR set to: 0
  1476  00086A  C0C2  F029         	movff	sprintf@width,___wmul@multiplier
  1477  00086E  C0C3  F02A         	movff	sprintf@width+1,___wmul@multiplier+1
  1478  000872  0E00               	movlw	0
  1479  000874  6E2C               	movwf	___wmul@multiplicand+1,c
  1480  000876  0E0A               	movlw	10
  1481  000878  6E2B               	movwf	___wmul@multiplicand,c
  1482  00087A  EC07  F009         	call	___wmul	;wreg free
  1483  00087E  C029  F0C2         	movff	?___wmul,sprintf@width
  1484  000882  C02A  F0C3         	movff	?___wmul+1,sprintf@width+1
  1485                           
  1486                           ;doprnt.c: 601: width += *f++ - '0';
  1487  000886  0ED0               	movlw	208
  1488  000888  0100               	movlb	0	; () banked
  1489  00088A  6FB8               	movwf	??_sprintf& (0+255),b
  1490  00088C  0EFF               	movlw	255
  1491  00088E  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  1492  000890  C0B0  FFF6         	movff	sprintf@f,tblptrl
  1493  000894  C0B1  FFF7         	movff	sprintf@f+1,tblptrh
  1494  000898                     	if	0	;tblptru may be non-zero
  1495  000898                     	endif
  1496  000898                     	if	0	;tblptru may be non-zero
  1497  000898                     	endif
  1498  000898  0008               	tblrd		*
  1499  00089A  50F5               	movf	tablat,w,c
  1500  00089C  6FBA               	movwf	(??_sprintf+2)& (0+255),b
  1501  00089E  6BBB               	clrf	(??_sprintf+3)& (0+255),b
  1502  0008A0  51B8               	movf	??_sprintf& (0+255),w,b
  1503  0008A2  27BA               	addwf	(??_sprintf+2)& (0+255),f,b
  1504  0008A4  51B9               	movf	(??_sprintf+1)& (0+255),w,b
  1505  0008A6  23BB               	addwfc	(??_sprintf+3)& (0+255),f,b
  1506  0008A8  51BA               	movf	(??_sprintf+2)& (0+255),w,b
  1507  0008AA  27C2               	addwf	sprintf@width& (0+255),f,b
  1508  0008AC  51BB               	movf	(??_sprintf+3)& (0+255),w,b
  1509  0008AE  23C3               	addwfc	(sprintf@width+1)& (0+255),f,b
  1510                           
  1511                           ; BSR set to: 0
  1512  0008B0  4BB0               	infsnz	sprintf@f& (0+255),f,b
  1513  0008B2  2BB1               	incf	(sprintf@f+1)& (0+255),f,b
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1517  0008B4  C0B0  FFF6         	movff	sprintf@f,tblptrl
  1518  0008B8  C0B1  FFF7         	movff	sprintf@f+1,tblptrh
  1519  0008BC                     	if	0	;tblptru may be non-zero
  1520  0008BC                     	endif
  1521  0008BC                     	if	0	;tblptru may be non-zero
  1522  0008BC                     	endif
  1523  0008BC  0008               	tblrd		*
  1524  0008BE  50F5               	movf	tablat,w,c
  1525  0008C0  EC3C  F009         	call	_isdigit
  1526  0008C4  B0D8               	btfsc	status,0,c
  1527  0008C6  D7D1               	goto	l491
  1528  0008C8                     l493:
  1529  0008C8  C0B0  FFF6         	movff	sprintf@f,tblptrl
  1530  0008CC  C0B1  FFF7         	movff	sprintf@f+1,tblptrh
  1531  0008D0  0100               	movlb	0	; () banked
  1532  0008D2  4BB0               	infsnz	sprintf@f& (0+255),f,b
  1533  0008D4  2BB1               	incf	(sprintf@f+1)& (0+255),f,b
  1534  0008D6                     	if	0	;tblptru may be non-zero
  1535  0008D6                     	endif
  1536  0008D6                     	if	0	;tblptru may be non-zero
  1537  0008D6                     	endif
  1538  0008D6  0008               	tblrd		*
  1539  0008D8  CFF5 F0C4          	movff	tablat,sprintf@c
  1540  0008DC  51C4               	movf	sprintf@c& (0+255),w,b
  1541                           
  1542                           ; Switch size 1, requested type "space"
  1543                           ; Number of cases is 3, Range of values is 0 to 105
  1544                           ; switch strategies available:
  1545                           ; Name         Instructions Cycles
  1546                           ; simple_byte           10     6 (average)
  1547                           ;	Chosen strategy is simple_byte
  1548  0008DE  0A00               	xorlw	0	; case 0
  1549  0008E0  B4D8               	btfsc	status,2,c
  1550  0008E2  D0B6               	goto	u2060
  1551  0008E4  0A64               	xorlw	100	; case 100
  1552  0008E6  B4D8               	btfsc	status,2,c
  1553  0008E8  D003               	goto	l498
  1554  0008EA  0A0D               	xorlw	13	; case 105
  1555  0008EC  A4D8               	btfss	status,2,c
  1556  0008EE  D0A3               	goto	u2050
  1557  0008F0                     l498:
  1558                           
  1559                           ;doprnt.c: 1253: {
  1560                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1561                           
  1562                           ; BSR set to: 0
  1563  0008F0  C0BC  FFD9         	movff	sprintf@ap,fsr2l
  1564  0008F4  C0BD  FFDA         	movff	sprintf@ap+1,fsr2h
  1565  0008F8  CFDE F0C0          	movff	postinc2,sprintf@val
  1566  0008FC  CFDD F0C1          	movff	postdec2,sprintf@val+1
  1567  000900  0E02               	movlw	2
  1568  000902  0100               	movlb	0	; () banked
  1569  000904  27BC               	addwf	sprintf@ap& (0+255),f,b
  1570  000906  0E00               	movlw	0
  1571  000908  23BD               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;doprnt.c: 1261: if((int)val < 0) {
  1575  00090A  AFC1               	btfss	(sprintf@val+1)& (0+255),7,b
  1576  00090C  D006               	goto	l500
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;doprnt.c: 1262: flag |= 0x03;
  1580  00090E  0E03               	movlw	3
  1581  000910  13BF               	iorwf	sprintf@flag& (0+255),f,b
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;doprnt.c: 1263: val = -val;
  1585  000912  6DC0               	negf	sprintf@val& (0+255),b
  1586  000914  1FC1               	comf	(sprintf@val+1)& (0+255),f,b
  1587  000916  B0D8               	btfsc	status,0,c
  1588  000918  2BC1               	incf	(sprintf@val+1)& (0+255),f,b
  1589  00091A                     l500:
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;doprnt.c: 1264: }
  1593                           ;doprnt.c: 1266: }
  1594                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1595                           
  1596                           ; BSR set to: 0
  1597  00091A  0E01               	movlw	1
  1598  00091C  6FC4               	movwf	sprintf@c& (0+255),b
  1599  00091E                     l2861:
  1600                           
  1601                           ; BSR set to: 0
  1602  00091E  0E05               	movlw	5
  1603  000920  19C4               	xorwf	sprintf@c& (0+255),w,b
  1604  000922  B4D8               	btfsc	status,2,c
  1605  000924  D012               	goto	u1980
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;doprnt.c: 1306: if(val < dpowers[c])
  1609                           
  1610                           ; BSR set to: 0
  1611                           
  1612                           ; BSR set to: 0
  1613  000926  51C4               	movf	sprintf@c& (0+255),w,b
  1614  000928  0D02               	mullw	2
  1615  00092A  0E01               	movlw	low _dpowers
  1616  00092C  24F3               	addwf	prodl,w,c
  1617  00092E  6EF6               	movwf	tblptrl,c
  1618  000930  0E08               	movlw	high _dpowers
  1619  000932  20F4               	addwfc	prodh,w,c
  1620  000934  6EF7               	movwf	tblptrh,c
  1621  000936                     	if	0	;There are less than 3 active tblptr bytes
  1622  000936                     	endif
  1623  000936  0009               	tblrd		*+
  1624  000938  50F5               	movf	tablat,w,c
  1625  00093A  5DC0               	subwf	sprintf@val& (0+255),w,b
  1626  00093C  0009               	tblrd		*+
  1627  00093E  50F5               	movf	tablat,w,c
  1628  000940  59C1               	subwfb	(sprintf@val+1)& (0+255),w,b
  1629  000942  A0D8               	btfss	status,0,c
  1630  000944  D002               	goto	u1980
  1631                           
  1632                           ; BSR set to: 0
  1633                           
  1634                           ; BSR set to: 0
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;doprnt.c: 1307: break;
  1638  000946  2BC4               	incf	sprintf@c& (0+255),f,b
  1639  000948  D7EA               	goto	l2861
  1640  00094A                     u1980:
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1644                           
  1645                           ; BSR set to: 0
  1646  00094A  51C2               	movf	sprintf@width& (0+255),w,b
  1647  00094C  11C3               	iorwf	(sprintf@width+1)& (0+255),w,b
  1648  00094E  B4D8               	btfsc	status,2,c
  1649  000950  D009               	goto	l504
  1650                           
  1651                           ; BSR set to: 0
  1652  000952  C0BF  F0B8         	movff	sprintf@flag,??_sprintf
  1653  000956  0E03               	movlw	3
  1654  000958  17B8               	andwf	??_sprintf& (0+255),f,b
  1655  00095A  B4D8               	btfsc	status,2,c
  1656  00095C  D003               	goto	l504
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;doprnt.c: 1346: width--;
  1660  00095E  07C2               	decf	sprintf@width& (0+255),f,b
  1661  000960  A0D8               	btfss	status,0,c
  1662  000962  07C3               	decf	(sprintf@width+1)& (0+255),f,b
  1663  000964                     l504:
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;doprnt.c: 1381: if(width > c)
  1667                           
  1668                           ; BSR set to: 0
  1669  000964  0E80               	movlw	128
  1670  000966  BFC4               	btfsc	sprintf@c& (0+255),7,b
  1671  000968  0E7F               	movlw	127
  1672  00096A  6FB8               	movwf	??_sprintf& (0+255),b
  1673  00096C  51C2               	movf	sprintf@width& (0+255),w,b
  1674  00096E  5DC4               	subwf	sprintf@c& (0+255),w,b
  1675  000970  51C3               	movf	(sprintf@width+1)& (0+255),w,b
  1676  000972  0A80               	xorlw	128
  1677  000974  59B8               	subwfb	??_sprintf& (0+255),w,b
  1678  000976  B0D8               	btfsc	status,0,c
  1679  000978  D007               	goto	l505
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;doprnt.c: 1382: width -= c;
  1683  00097A  51C4               	movf	sprintf@c& (0+255),w,b
  1684  00097C  5FC2               	subwf	sprintf@width& (0+255),f,b
  1685  00097E  0E00               	movlw	0
  1686  000980  BFC4               	btfsc	sprintf@c& (0+255),7,b
  1687  000982  0EFF               	movlw	255
  1688  000984  5BC3               	subwfb	(sprintf@width+1)& (0+255),f,b
  1689  000986  D004               	goto	l506
  1690  000988                     l505:
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;doprnt.c: 1383: else
  1694                           ;doprnt.c: 1384: width = 0;
  1695                           
  1696                           ; BSR set to: 0
  1697  000988  0E00               	movlw	0
  1698  00098A  6FC3               	movwf	(sprintf@width+1)& (0+255),b
  1699  00098C  0E00               	movlw	0
  1700  00098E  6FC2               	movwf	sprintf@width& (0+255),b
  1701  000990                     l506:
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;doprnt.c: 1422: {
  1705                           ;doprnt.c: 1424: if(width
  1706                           ;doprnt.c: 1428: )
  1707                           
  1708                           ; BSR set to: 0
  1709  000990  51C2               	movf	sprintf@width& (0+255),w,b
  1710  000992  11C3               	iorwf	(sprintf@width+1)& (0+255),w,b
  1711  000994  B4D8               	btfsc	status,2,c
  1712  000996  D00F               	goto	u2030
  1713  000998                     u2020:
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1717                           
  1718                           ; BSR set to: 0
  1719                           
  1720                           ;doprnt.c: 1429: do
  1721  000998  C0AE  FFD9         	movff	sprintf@sp,fsr2l
  1722  00099C  C0AF  FFDA         	movff	sprintf@sp+1,fsr2h
  1723  0009A0  0E20               	movlw	32
  1724  0009A2  6EDF               	movwf	indf2,c
  1725                           
  1726                           ; BSR set to: 0
  1727  0009A4  4BAE               	infsnz	sprintf@sp& (0+255),f,b
  1728  0009A6  2BAF               	incf	(sprintf@sp+1)& (0+255),f,b
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;doprnt.c: 1431: while(--width);
  1732  0009A8  07C2               	decf	sprintf@width& (0+255),f,b
  1733  0009AA  A0D8               	btfss	status,0,c
  1734  0009AC  07C3               	decf	(sprintf@width+1)& (0+255),f,b
  1735  0009AE  51C2               	movf	sprintf@width& (0+255),w,b
  1736  0009B0  11C3               	iorwf	(sprintf@width+1)& (0+255),w,b
  1737  0009B2  A4D8               	btfss	status,2,c
  1738  0009B4  D7F1               	goto	u2020
  1739  0009B6                     u2030:
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;doprnt.c: 1438: if(flag & 0x03)
  1743                           
  1744                           ; BSR set to: 0
  1745                           
  1746                           ; BSR set to: 0
  1747  0009B6  C0BF  F0B8         	movff	sprintf@flag,??_sprintf
  1748  0009BA  0E03               	movlw	3
  1749  0009BC  17B8               	andwf	??_sprintf& (0+255),f,b
  1750  0009BE  B4D8               	btfsc	status,2,c
  1751  0009C0  D008               	goto	l510
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1755  0009C2  C0AE  FFD9         	movff	sprintf@sp,fsr2l
  1756  0009C6  C0AF  FFDA         	movff	sprintf@sp+1,fsr2h
  1757  0009CA  0E2D               	movlw	45
  1758  0009CC  6EDF               	movwf	indf2,c
  1759                           
  1760                           ; BSR set to: 0
  1761  0009CE  4BAE               	infsnz	sprintf@sp& (0+255),f,b
  1762  0009D0  2BAF               	incf	(sprintf@sp+1)& (0+255),f,b
  1763  0009D2                     l510:
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;doprnt.c: 1469: }
  1767                           ;doprnt.c: 1472: prec = c;
  1768                           
  1769                           ; BSR set to: 0
  1770  0009D2  C0C4  F0BE         	movff	sprintf@c,sprintf@prec
  1771                           
  1772                           ;doprnt.c: 1474: while(prec--) {
  1773  0009D6  D02B               	goto	l511
  1774  0009D8                     
  1775                           ; BSR set to: 0
  1776                           ;doprnt.c: 1478: {
  1777                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1778                           
  1779                           ; BSR set to: 0
  1780  0009D8  51BE               	movf	sprintf@prec& (0+255),w,b
  1781  0009DA  0D02               	mullw	2
  1782  0009DC  0E01               	movlw	low _dpowers
  1783  0009DE  24F3               	addwf	prodl,w,c
  1784  0009E0  6EF6               	movwf	tblptrl,c
  1785  0009E2  0E08               	movlw	high _dpowers
  1786  0009E4  20F4               	addwfc	prodh,w,c
  1787  0009E6  6EF7               	movwf	tblptrh,c
  1788  0009E8                     	if	0	;There are less than 3 active tblptr bytes
  1789  0009E8                     	endif
  1790  0009E8  0009               	tblrd		*+
  1791  0009EA  CFF5 F02B          	movff	tablat,___lwdiv@divisor
  1792  0009EE  000A               	tblrd		*-
  1793  0009F0  CFF5 F02C          	movff	tablat,___lwdiv@divisor+1
  1794  0009F4  C0C0  F029         	movff	sprintf@val,___lwdiv@dividend
  1795  0009F8  C0C1  F02A         	movff	sprintf@val+1,___lwdiv@dividend+1
  1796  0009FC  EC74  F007         	call	___lwdiv	;wreg free
  1797  000A00  C029  F0AA         	movff	?___lwdiv,___lwmod@dividend
  1798  000A04  C02A  F0AB         	movff	?___lwdiv+1,___lwmod@dividend+1
  1799  000A08  0E00               	movlw	0
  1800  000A0A  0100               	movlb	0	; () banked
  1801  000A0C  6FAD               	movwf	(___lwmod@divisor+1)& (0+255),b
  1802  000A0E  0E0A               	movlw	10
  1803  000A10  6FAC               	movwf	___lwmod@divisor& (0+255),b
  1804  000A12  EC32  F008         	call	___lwmod	;wreg free
  1805  000A16  0100               	movlb	0	; () banked
  1806  000A18  51AA               	movf	?___lwmod& (0+255),w,b
  1807  000A1A  0F30               	addlw	48
  1808  000A1C  6FC4               	movwf	sprintf@c& (0+255),b
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;doprnt.c: 1523: }
  1812                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1813  000A1E  C0AE  FFD9         	movff	sprintf@sp,fsr2l
  1814  000A22  C0AF  FFDA         	movff	sprintf@sp+1,fsr2h
  1815  000A26  C0C4  FFDF         	movff	sprintf@c,indf2
  1816                           
  1817                           ; BSR set to: 0
  1818  000A2A  4BAE               	infsnz	sprintf@sp& (0+255),f,b
  1819  000A2C  2BAF               	incf	(sprintf@sp+1)& (0+255),f,b
  1820  000A2E                     l511:
  1821                           
  1822                           ; BSR set to: 0
  1823                           
  1824                           ; BSR set to: 0
  1825  000A2E  07BE               	decf	sprintf@prec& (0+255),f,b
  1826  000A30  29BE               	incf	sprintf@prec& (0+255),w,b
  1827  000A32  A4D8               	btfss	status,2,c
  1828  000A34  D7D1               	goto	l512
  1829  000A36                     u2050:
  1830                           
  1831                           ; BSR set to: 0
  1832                           
  1833                           ; BSR set to: 0
  1834  000A36  C0B0  FFF6         	movff	sprintf@f,tblptrl
  1835  000A3A  C0B1  FFF7         	movff	sprintf@f+1,tblptrh
  1836  000A3E  0100               	movlb	0	; () banked
  1837  000A40  4BB0               	infsnz	sprintf@f& (0+255),f,b
  1838  000A42  2BB1               	incf	(sprintf@f+1)& (0+255),f,b
  1839  000A44                     	if	0	;tblptru may be non-zero
  1840  000A44                     	endif
  1841  000A44                     	if	0	;tblptru may be non-zero
  1842  000A44                     	endif
  1843  000A44  0008               	tblrd		*
  1844  000A46  CFF5 F0C4          	movff	tablat,sprintf@c
  1845  000A4A  51C4               	movf	sprintf@c& (0+255),w,b
  1846  000A4C  A4D8               	btfss	status,2,c
  1847  000A4E  D6EB               	goto	l488
  1848  000A50                     u2060:
  1849                           
  1850                           ;doprnt.c: 1538: *sp = 0;
  1851                           
  1852                           ; BSR set to: 0
  1853                           
  1854                           ;doprnt.c: 1525: }
  1855                           ;doprnt.c: 1533: }
  1856                           ;doprnt.c: 1535: alldone:
  1857                           
  1858                           ; BSR set to: 0
  1859  000A50  C0AE  FFD9         	movff	sprintf@sp,fsr2l
  1860  000A54  C0AF  FFDA         	movff	sprintf@sp+1,fsr2h
  1861  000A58  0E00               	movlw	0
  1862  000A5A  6EDF               	movwf	indf2,c
  1863  000A5C  0012               	return	
  1864  000A5E                     __end_of_sprintf:
  1865                           	opt stack 0
  1866                           tosu	equ	0xFFF
  1867                           tosh	equ	0xFFE
  1868                           tosl	equ	0xFFD
  1869                           pclath	equ	0xFFA
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           prodh	equ	0xFF4
  1875                           prodl	equ	0xFF3
  1876                           intcon	equ	0xFF2
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postdec1	equ	0xFE5
  1880                           fsr1l	equ	0xFE1
  1881                           indf2	equ	0xFDF
  1882                           postinc2	equ	0xFDE
  1883                           postdec2	equ	0xFDD
  1884                           fsr2h	equ	0xFDA
  1885                           fsr2l	equ	0xFD9
  1886                           status	equ	0xFD8
  1887                           
  1888 ;; *************** function _isdigit *****************
  1889 ;; Defined at:
  1890 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;  c               1    wreg     unsigned char 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  c               1   42[COMRAM] unsigned char 
  1895 ;; Return value:  Size  Location     Type
  1896 ;;		None               void
  1897 ;; Registers used:
  1898 ;;		wreg, status,2, status,0
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1904 ;;      Params:         0       0       0       0       0       0       0       0       0
  1905 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1906 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1907 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1908 ;;Total ram usage:        3 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    3
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_sprintf
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text7
  1919  001278                     __ptext7:
  1920                           	opt stack 0
  1921  001278                     _isdigit:
  1922                           	opt stack 24
  1923                           
  1924                           ;incstack = 0
  1925                           ;isdigit@c stored from wreg
  1926  001278  6E2B               	movwf	isdigit@c,c
  1927  00127A  0E00               	movlw	0
  1928  00127C  6E2A               	movwf	_isdigit$1150,c
  1929  00127E  0E3A               	movlw	58
  1930  001280  602B               	cpfslt	isdigit@c,c
  1931  001282  D005               	goto	l852
  1932  001284  0E2F               	movlw	47
  1933  001286  642B               	cpfsgt	isdigit@c,c
  1934  001288  D002               	goto	l852
  1935  00128A  0E01               	movlw	1
  1936  00128C  6E2A               	movwf	_isdigit$1150,c
  1937  00128E                     l852:
  1938  00128E  C02A  F029         	movff	_isdigit$1150,??_isdigit
  1939  001292  3029               	rrcf	??_isdigit,w,c
  1940  001294  0012               	return	
  1941  001296                     __end_of_isdigit:
  1942                           	opt stack 0
  1943                           tosu	equ	0xFFF
  1944                           tosh	equ	0xFFE
  1945                           tosl	equ	0xFFD
  1946                           pclath	equ	0xFFA
  1947                           tblptru	equ	0xFF8
  1948                           tblptrh	equ	0xFF7
  1949                           tblptrl	equ	0xFF6
  1950                           tablat	equ	0xFF5
  1951                           prodh	equ	0xFF4
  1952                           prodl	equ	0xFF3
  1953                           intcon	equ	0xFF2
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           indf2	equ	0xFDF
  1959                           postinc2	equ	0xFDE
  1960                           postdec2	equ	0xFDD
  1961                           fsr2h	equ	0xFDA
  1962                           fsr2l	equ	0xFD9
  1963                           status	equ	0xFD8
  1964                           
  1965 ;; *************** function ___wmul *****************
  1966 ;; Defined at:
  1967 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  multiplier      2   40[COMRAM] unsigned int 
  1970 ;;  multiplicand    2   42[COMRAM] unsigned int 
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;  product         2   44[COMRAM] unsigned int 
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  2   40[COMRAM] unsigned int 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0, prodl, prodh
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1982 ;;      Params:         4       0       0       0       0       0       0       0       0
  1983 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1984 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1985 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1986 ;;Total ram usage:        6 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    3
  1989 ;; This function calls:
  1990 ;;		Nothing
  1991 ;; This function is called by:
  1992 ;;		_sprintf
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text8
  1997  00120E                     __ptext8:
  1998                           	opt stack 0
  1999  00120E                     ___wmul:
  2000                           	opt stack 24
  2001                           
  2002                           ;incstack = 0
  2003  00120E  5029               	movf	___wmul@multiplier,w,c
  2004  001210  022B               	mulwf	___wmul@multiplicand,c
  2005  001212  CFF3 F02D          	movff	prodl,___wmul@product
  2006  001216  CFF4 F02E          	movff	prodh,___wmul@product+1
  2007  00121A  5029               	movf	___wmul@multiplier,w,c
  2008  00121C  022C               	mulwf	___wmul@multiplicand+1,c
  2009  00121E  50F3               	movf	prodl,w,c
  2010  001220  262E               	addwf	___wmul@product+1,f,c
  2011  001222  502A               	movf	___wmul@multiplier+1,w,c
  2012  001224  022B               	mulwf	___wmul@multiplicand,c
  2013  001226  50F3               	movf	prodl,w,c
  2014  001228  262E               	addwf	___wmul@product+1,f,c
  2015  00122A  C02D  F029         	movff	___wmul@product,?___wmul
  2016  00122E  C02E  F02A         	movff	___wmul@product+1,?___wmul+1
  2017  001232  0012               	return	
  2018  001234                     __end_of___wmul:
  2019                           	opt stack 0
  2020                           tosu	equ	0xFFF
  2021                           tosh	equ	0xFFE
  2022                           tosl	equ	0xFFD
  2023                           pclath	equ	0xFFA
  2024                           tblptru	equ	0xFF8
  2025                           tblptrh	equ	0xFF7
  2026                           tblptrl	equ	0xFF6
  2027                           tablat	equ	0xFF5
  2028                           prodh	equ	0xFF4
  2029                           prodl	equ	0xFF3
  2030                           intcon	equ	0xFF2
  2031                           postinc0	equ	0xFEE
  2032                           wreg	equ	0xFE8
  2033                           postdec1	equ	0xFE5
  2034                           fsr1l	equ	0xFE1
  2035                           indf2	equ	0xFDF
  2036                           postinc2	equ	0xFDE
  2037                           postdec2	equ	0xFDD
  2038                           fsr2h	equ	0xFDA
  2039                           fsr2l	equ	0xFD9
  2040                           status	equ	0xFD8
  2041                           
  2042 ;; *************** function ___lwmod *****************
  2043 ;; Defined at:
  2044 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;  dividend        2    3[BANK0 ] unsigned int 
  2047 ;;  divisor         2    5[BANK0 ] unsigned int 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  counter         1   44[COMRAM] unsigned char 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  2    3[BANK0 ] unsigned int 
  2052 ;; Registers used:
  2053 ;;		wreg, status,2, status,0
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2059 ;;      Params:         0       4       0       0       0       0       0       0       0
  2060 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2062 ;;      Totals:         1       4       0       0       0       0       0       0       0
  2063 ;;Total ram usage:        5 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    3
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_sprintf
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text9
  2074  001064                     __ptext9:
  2075                           	opt stack 0
  2076  001064                     ___lwmod:
  2077                           	opt stack 24
  2078                           
  2079                           ;incstack = 0
  2080  001064  0100               	movlb	0	; () banked
  2081  001066  51AC               	movf	___lwmod@divisor& (0+255),w,b
  2082  001068  11AD               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2083  00106A  B4D8               	btfsc	status,2,c
  2084  00106C  D018               	goto	l946
  2085                           
  2086                           ; BSR set to: 0
  2087  00106E  0E01               	movlw	1
  2088  001070  6E2D               	movwf	___lwmod@counter,c
  2089  001072  D004               	goto	l941
  2090  001074                     
  2091                           ; BSR set to: 0
  2092                           
  2093                           ; BSR set to: 0
  2094  001074  90D8               	bcf	status,0,c
  2095  001076  37AC               	rlcf	___lwmod@divisor& (0+255),f,b
  2096  001078  37AD               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2097  00107A  2A2D               	incf	___lwmod@counter,f,c
  2098  00107C                     l941:
  2099                           
  2100                           ; BSR set to: 0
  2101                           
  2102                           ; BSR set to: 0
  2103  00107C  AFAD               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2104  00107E  D7FA               	goto	l942
  2105  001080                     u1900:
  2106                           
  2107                           ; BSR set to: 0
  2108                           
  2109                           ; BSR set to: 0
  2110                           
  2111                           ; BSR set to: 0
  2112  001080  51AC               	movf	___lwmod@divisor& (0+255),w,b
  2113  001082  5DAA               	subwf	___lwmod@dividend& (0+255),w,b
  2114  001084  51AD               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2115  001086  59AB               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2116  001088  A0D8               	btfss	status,0,c
  2117  00108A  D004               	goto	l945
  2118                           
  2119                           ; BSR set to: 0
  2120  00108C  51AC               	movf	___lwmod@divisor& (0+255),w,b
  2121  00108E  5FAA               	subwf	___lwmod@dividend& (0+255),f,b
  2122  001090  51AD               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2123  001092  5BAB               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2124  001094                     l945:
  2125                           
  2126                           ; BSR set to: 0
  2127                           
  2128                           ; BSR set to: 0
  2129  001094  90D8               	bcf	status,0,c
  2130  001096  33AD               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2131  001098  33AC               	rrcf	___lwmod@divisor& (0+255),f,b
  2132                           
  2133                           ; BSR set to: 0
  2134  00109A  2E2D               	decfsz	___lwmod@counter,f,c
  2135  00109C  D7F1               	goto	u1900
  2136  00109E                     l946:
  2137                           
  2138                           ; BSR set to: 0
  2139                           
  2140                           ; BSR set to: 0
  2141  00109E  C0AA  F0AA         	movff	___lwmod@dividend,?___lwmod
  2142  0010A2  C0AB  F0AB         	movff	___lwmod@dividend+1,?___lwmod+1
  2143                           
  2144                           ; BSR set to: 0
  2145  0010A6  0012               	return		;funcret
  2146  0010A8                     __end_of___lwmod:
  2147                           	opt stack 0
  2148                           tosu	equ	0xFFF
  2149                           tosh	equ	0xFFE
  2150                           tosl	equ	0xFFD
  2151                           pclath	equ	0xFFA
  2152                           tblptru	equ	0xFF8
  2153                           tblptrh	equ	0xFF7
  2154                           tblptrl	equ	0xFF6
  2155                           tablat	equ	0xFF5
  2156                           prodh	equ	0xFF4
  2157                           prodl	equ	0xFF3
  2158                           intcon	equ	0xFF2
  2159                           postinc0	equ	0xFEE
  2160                           wreg	equ	0xFE8
  2161                           postdec1	equ	0xFE5
  2162                           fsr1l	equ	0xFE1
  2163                           indf2	equ	0xFDF
  2164                           postinc2	equ	0xFDE
  2165                           postdec2	equ	0xFDD
  2166                           fsr2h	equ	0xFDA
  2167                           fsr2l	equ	0xFD9
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function ___lwdiv *****************
  2171 ;; Defined at:
  2172 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  dividend        2   40[COMRAM] unsigned int 
  2175 ;;  divisor         2   42[COMRAM] unsigned int 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  quotient        2    1[BANK0 ] unsigned int 
  2178 ;;  counter         1    0[BANK0 ] unsigned char 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  2   40[COMRAM] unsigned int 
  2181 ;; Registers used:
  2182 ;;		wreg, status,2, status,0
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2188 ;;      Params:         4       0       0       0       0       0       0       0       0
  2189 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2191 ;;      Totals:         4       3       0       0       0       0       0       0       0
  2192 ;;Total ram usage:        7 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    3
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		_sprintf
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text10
  2203  000EE8                     __ptext10:
  2204                           	opt stack 0
  2205  000EE8                     ___lwdiv:
  2206                           	opt stack 24
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;incstack = 0
  2210  000EE8  0E00               	movlw	0
  2211  000EEA  0100               	movlb	0	; () banked
  2212  000EEC  6FA9               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2213  000EEE  0E00               	movlw	0
  2214  000EF0  6FA8               	movwf	___lwdiv@quotient& (0+255),b
  2215                           
  2216                           ; BSR set to: 0
  2217  000EF2  502B               	movf	___lwdiv@divisor,w,c
  2218  000EF4  102C               	iorwf	___lwdiv@divisor+1,w,c
  2219  000EF6  B4D8               	btfsc	status,2,c
  2220  000EF8  D01C               	goto	l936
  2221                           
  2222                           ; BSR set to: 0
  2223  000EFA  0E01               	movlw	1
  2224  000EFC  6FA7               	movwf	___lwdiv@counter& (0+255),b
  2225  000EFE  D004               	goto	l931
  2226  000F00                     
  2227                           ; BSR set to: 0
  2228                           
  2229                           ; BSR set to: 0
  2230  000F00  90D8               	bcf	status,0,c
  2231  000F02  362B               	rlcf	___lwdiv@divisor,f,c
  2232  000F04  362C               	rlcf	___lwdiv@divisor+1,f,c
  2233  000F06  2BA7               	incf	___lwdiv@counter& (0+255),f,b
  2234  000F08                     l931:
  2235                           
  2236                           ; BSR set to: 0
  2237                           
  2238                           ; BSR set to: 0
  2239  000F08  AE2C               	btfss	___lwdiv@divisor+1,7,c
  2240  000F0A  D7FA               	goto	l932
  2241  000F0C                     u1870:
  2242                           
  2243                           ; BSR set to: 0
  2244                           
  2245                           ; BSR set to: 0
  2246                           
  2247                           ; BSR set to: 0
  2248  000F0C  90D8               	bcf	status,0,c
  2249  000F0E  37A8               	rlcf	___lwdiv@quotient& (0+255),f,b
  2250  000F10  37A9               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2251                           
  2252                           ; BSR set to: 0
  2253  000F12  502B               	movf	___lwdiv@divisor,w,c
  2254  000F14  5C29               	subwf	___lwdiv@dividend,w,c
  2255  000F16  502C               	movf	___lwdiv@divisor+1,w,c
  2256  000F18  582A               	subwfb	___lwdiv@dividend+1,w,c
  2257  000F1A  A0D8               	btfss	status,0,c
  2258  000F1C  D005               	goto	l935
  2259                           
  2260                           ; BSR set to: 0
  2261  000F1E  502B               	movf	___lwdiv@divisor,w,c
  2262  000F20  5E29               	subwf	___lwdiv@dividend,f,c
  2263  000F22  502C               	movf	___lwdiv@divisor+1,w,c
  2264  000F24  5A2A               	subwfb	___lwdiv@dividend+1,f,c
  2265                           
  2266                           ; BSR set to: 0
  2267  000F26  81A8               	bsf	___lwdiv@quotient& (0+255),0,b
  2268  000F28                     l935:
  2269                           
  2270                           ; BSR set to: 0
  2271                           
  2272                           ; BSR set to: 0
  2273  000F28  90D8               	bcf	status,0,c
  2274  000F2A  322C               	rrcf	___lwdiv@divisor+1,f,c
  2275  000F2C  322B               	rrcf	___lwdiv@divisor,f,c
  2276                           
  2277                           ; BSR set to: 0
  2278  000F2E  2FA7               	decfsz	___lwdiv@counter& (0+255),f,b
  2279  000F30  D7ED               	goto	u1870
  2280  000F32                     l936:
  2281                           
  2282                           ; BSR set to: 0
  2283                           
  2284                           ; BSR set to: 0
  2285  000F32  C0A8  F029         	movff	___lwdiv@quotient,?___lwdiv
  2286  000F36  C0A9  F02A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2287                           
  2288                           ; BSR set to: 0
  2289  000F3A  0012               	return		;funcret
  2290  000F3C                     __end_of___lwdiv:
  2291                           	opt stack 0
  2292                           tosu	equ	0xFFF
  2293                           tosh	equ	0xFFE
  2294                           tosl	equ	0xFFD
  2295                           pclath	equ	0xFFA
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           prodh	equ	0xFF4
  2301                           prodl	equ	0xFF3
  2302                           intcon	equ	0xFF2
  2303                           postinc0	equ	0xFEE
  2304                           wreg	equ	0xFE8
  2305                           postdec1	equ	0xFE5
  2306                           fsr1l	equ	0xFE1
  2307                           indf2	equ	0xFDF
  2308                           postinc2	equ	0xFDE
  2309                           postdec2	equ	0xFDD
  2310                           fsr2h	equ	0xFDA
  2311                           fsr2l	equ	0xFD9
  2312                           status	equ	0xFD8
  2313                           
  2314 ;; *************** function _lcdWrite *****************
  2315 ;; Defined at:
  2316 ;;		line 52 in file "display.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  lcd             2   40[COMRAM] PTR struct .
  2319 ;;		 -> lcd(33), 
  2320 ;;  row             1   42[COMRAM] unsigned char 
  2321 ;;  col             1   43[COMRAM] unsigned char 
  2322 ;;  string          2   44[COMRAM] PTR unsigned char 
  2323 ;;		 -> buffer(32), 
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;		None
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  2   40[COMRAM] int 
  2328 ;; Registers used:
  2329 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2335 ;;      Params:         6       0       0       0       0       0       0       0       0
  2336 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2337 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2338 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2339 ;;Total ram usage:        6 bytes
  2340 ;; Hardware stack levels used:    1
  2341 ;; Hardware stack levels required when called:    3
  2342 ;; This function calls:
  2343 ;;		Nothing
  2344 ;; This function is called by:
  2345 ;;		_OnRenderMenu1
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	text11
  2350  000B44                     __ptext11:
  2351                           	opt stack 0
  2352  000B44                     _lcdWrite:
  2353                           	opt stack 25
  2354                           
  2355                           ;display.c: 54: if (row == 0 || row > 2 || col == 0 || col > 16) {
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;incstack = 0
  2359  000B44  502B               	movf	lcdWrite@row,w,c
  2360  000B46  B4D8               	btfsc	status,2,c
  2361  000B48  0012               	return	
  2362  000B4A  0E03               	movlw	3
  2363  000B4C  602B               	cpfslt	lcdWrite@row,c
  2364  000B4E  0012               	return	
  2365  000B50  502C               	movf	lcdWrite@col,w,c
  2366  000B52  B4D8               	btfsc	status,2,c
  2367  000B54  0012               	return	
  2368  000B56  0E10               	movlw	16
  2369  000B58  642C               	cpfsgt	lcdWrite@col,c
  2370  000B5A  D001               	goto	l138
  2371  000B5C  0012               	return	
  2372  000B5E                     l138:
  2373                           
  2374                           ;display.c: 56: }
  2375                           ;display.c: 58: row--;
  2376  000B5E  062B               	decf	lcdWrite@row,f,c
  2377                           
  2378                           ;display.c: 59: col--;
  2379  000B60  062C               	decf	lcdWrite@col,f,c
  2380                           
  2381                           ;display.c: 61: if (row == 0) {
  2382  000B62  502B               	movf	lcdWrite@row,w,c
  2383  000B64  B4D8               	btfsc	status,2,c
  2384  000B66  D016               	goto	l143
  2385  000B68  D039               	goto	l148
  2386  000B6A                     
  2387                           ;display.c: 63: lcd->Memory[0][col++] = *string;
  2388  000B6A  C02D  FFD9         	movff	lcdWrite@string,fsr2l
  2389  000B6E  C02E  FFDA         	movff	lcdWrite@string+1,fsr2h
  2390  000B72  502C               	movf	lcdWrite@col,w,c
  2391  000B74  0D01               	mullw	1
  2392  000B76  0E01               	movlw	1
  2393  000B78  26F3               	addwf	prodl,f,c
  2394  000B7A  0E00               	movlw	0
  2395  000B7C  22F4               	addwfc	prodh,f,c
  2396  000B7E  50F3               	movf	prodl,w,c
  2397  000B80  2429               	addwf	lcdWrite@lcd,w,c
  2398  000B82  6EE1               	movwf	fsr1l,c
  2399  000B84  50F4               	movf	prodh,w,c
  2400  000B86  202A               	addwfc	lcdWrite@lcd+1,w,c
  2401  000B88  6EE2               	movwf	fsr1h,c
  2402  000B8A  CFDF FFE7          	movff	indf2,indf1
  2403  000B8E  2A2C               	incf	lcdWrite@col,f,c
  2404                           
  2405                           ;display.c: 64: string++;
  2406  000B90  4A2D               	infsnz	lcdWrite@string,f,c
  2407  000B92  2A2E               	incf	lcdWrite@string+1,f,c
  2408  000B94                     l143:
  2409  000B94  C02D  FFD9         	movff	lcdWrite@string,fsr2l
  2410  000B98  C02E  FFDA         	movff	lcdWrite@string+1,fsr2h
  2411  000B9C  50DF               	movf	indf2,w,c
  2412  000B9E  B4D8               	btfsc	status,2,c
  2413  000BA0  D003               	goto	u1290
  2414  000BA2  0E0F               	movlw	15
  2415  000BA4  642C               	cpfsgt	lcdWrite@col,c
  2416  000BA6  D7E1               	goto	l144
  2417  000BA8                     u1290:
  2418                           
  2419                           ;display.c: 65: }
  2420                           ;display.c: 66: col = 0;
  2421  000BA8  0E00               	movlw	0
  2422  000BAA  6E2C               	movwf	lcdWrite@col,c
  2423                           
  2424                           ;display.c: 67: row = 1;
  2425  000BAC  0E01               	movlw	1
  2426  000BAE  6E2B               	movwf	lcdWrite@row,c
  2427                           
  2428                           ;display.c: 68: }
  2429                           ;display.c: 71: while (*string && col <= 0x0F) {
  2430  000BB0  D015               	goto	l148
  2431  000BB2                     
  2432                           ;display.c: 72: lcd->Memory[1][col++] = *string;
  2433  000BB2  C02D  FFD9         	movff	lcdWrite@string,fsr2l
  2434  000BB6  C02E  FFDA         	movff	lcdWrite@string+1,fsr2h
  2435  000BBA  502C               	movf	lcdWrite@col,w,c
  2436  000BBC  0D01               	mullw	1
  2437  000BBE  0E11               	movlw	17
  2438  000BC0  26F3               	addwf	prodl,f,c
  2439  000BC2  0E00               	movlw	0
  2440  000BC4  22F4               	addwfc	prodh,f,c
  2441  000BC6  50F3               	movf	prodl,w,c
  2442  000BC8  2429               	addwf	lcdWrite@lcd,w,c
  2443  000BCA  6EE1               	movwf	fsr1l,c
  2444  000BCC  50F4               	movf	prodh,w,c
  2445  000BCE  202A               	addwfc	lcdWrite@lcd+1,w,c
  2446  000BD0  6EE2               	movwf	fsr1h,c
  2447  000BD2  CFDF FFE7          	movff	indf2,indf1
  2448  000BD6  2A2C               	incf	lcdWrite@col,f,c
  2449                           
  2450                           ;display.c: 73: string++;
  2451  000BD8  4A2D               	infsnz	lcdWrite@string,f,c
  2452  000BDA  2A2E               	incf	lcdWrite@string+1,f,c
  2453  000BDC                     l148:
  2454  000BDC  C02D  FFD9         	movff	lcdWrite@string,fsr2l
  2455  000BE0  C02E  FFDA         	movff	lcdWrite@string+1,fsr2h
  2456  000BE4  50DF               	movf	indf2,w,c
  2457  000BE6  B4D8               	btfsc	status,2,c
  2458  000BE8  D003               	goto	u1310
  2459  000BEA  0E0F               	movlw	15
  2460  000BEC  642C               	cpfsgt	lcdWrite@col,c
  2461  000BEE  D7E1               	goto	l149
  2462  000BF0                     u1310:
  2463                           
  2464                           ;display.c: 74: }
  2465                           ;display.c: 76: lcd->NeedsRedraw = 1;
  2466  000BF0  C029  FFD9         	movff	lcdWrite@lcd,fsr2l
  2467  000BF4  C02A  FFDA         	movff	lcdWrite@lcd+1,fsr2h
  2468  000BF8  0E01               	movlw	1
  2469  000BFA  6EDF               	movwf	indf2,c
  2470  000BFC  0012               	return	
  2471  000BFE                     __end_of_lcdWrite:
  2472                           	opt stack 0
  2473                           tosu	equ	0xFFF
  2474                           tosh	equ	0xFFE
  2475                           tosl	equ	0xFFD
  2476                           pclath	equ	0xFFA
  2477                           tblptru	equ	0xFF8
  2478                           tblptrh	equ	0xFF7
  2479                           tblptrl	equ	0xFF6
  2480                           tablat	equ	0xFF5
  2481                           prodh	equ	0xFF4
  2482                           prodl	equ	0xFF3
  2483                           intcon	equ	0xFF2
  2484                           postinc0	equ	0xFEE
  2485                           wreg	equ	0xFE8
  2486                           indf1	equ	0xFE7
  2487                           postdec1	equ	0xFE5
  2488                           fsr1h	equ	0xFE2
  2489                           fsr1l	equ	0xFE1
  2490                           indf2	equ	0xFDF
  2491                           postinc2	equ	0xFDE
  2492                           postdec2	equ	0xFDD
  2493                           fsr2h	equ	0xFDA
  2494                           fsr2l	equ	0xFD9
  2495                           status	equ	0xFD8
  2496                           
  2497 ;; *************** function _menuInit *****************
  2498 ;; Defined at:
  2499 ;;		line 5 in file "menu.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  lcd             2   40[COMRAM] PTR struct .
  2502 ;;		 -> lcd(33), 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;		None
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2514 ;;      Params:         2       0       0       0       0       0       0       0       0
  2515 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2517 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2518 ;;Total ram usage:        2 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    3
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_main
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text12
  2529  001378                     __ptext12:
  2530                           	opt stack 0
  2531  001378                     _menuInit:
  2532                           	opt stack 27
  2533                           
  2534                           ;menu.c: 7: Menu.lcd = lcd;
  2535                           
  2536                           ;incstack = 0
  2537  001378  C029  F02F         	movff	menuInit@lcd,_Menu
  2538  00137C  C02A  F030         	movff	menuInit@lcd+1,_Menu+1
  2539  001380  0012               	return		;funcret
  2540  001382                     __end_of_menuInit:
  2541                           	opt stack 0
  2542                           tosu	equ	0xFFF
  2543                           tosh	equ	0xFFE
  2544                           tosl	equ	0xFFD
  2545                           pclath	equ	0xFFA
  2546                           tblptru	equ	0xFF8
  2547                           tblptrh	equ	0xFF7
  2548                           tblptrl	equ	0xFF6
  2549                           tablat	equ	0xFF5
  2550                           prodh	equ	0xFF4
  2551                           prodl	equ	0xFF3
  2552                           intcon	equ	0xFF2
  2553                           postinc0	equ	0xFEE
  2554                           wreg	equ	0xFE8
  2555                           indf1	equ	0xFE7
  2556                           postdec1	equ	0xFE5
  2557                           fsr1h	equ	0xFE2
  2558                           fsr1l	equ	0xFE1
  2559                           indf2	equ	0xFDF
  2560                           postinc2	equ	0xFDE
  2561                           postdec2	equ	0xFDD
  2562                           fsr2h	equ	0xFDA
  2563                           fsr2l	equ	0xFD9
  2564                           status	equ	0xFD8
  2565                           
  2566 ;; *************** function _menuGoto *****************
  2567 ;; Defined at:
  2568 ;;		line 10 in file "menu.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;  pos             1    wreg     unsigned char 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  pos             1   41[COMRAM] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2582 ;;      Params:         0       0       0       0       0       0       0       0       0
  2583 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2584 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2585 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2586 ;;Total ram usage:        1 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:    5
  2589 ;; This function calls:
  2590 ;;		__menuEnterPosition
  2591 ;; This function is called by:
  2592 ;;		_main
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text13
  2597  001382                     __ptext13:
  2598                           	opt stack 0
  2599  001382                     _menuGoto:
  2600                           	opt stack 25
  2601                           
  2602                           ;incstack = 0
  2603                           ;menuGoto@pos stored from wreg
  2604  001382  6E2A               	movwf	menuGoto@pos,c
  2605                           
  2606                           ;menu.c: 12: _menuEnterPosition(pos);
  2607  001384  502A               	movf	menuGoto@pos,w,c
  2608  001386  EC75  F008         	call	__menuEnterPosition
  2609  00138A  0012               	return		;funcret
  2610  00138C                     __end_of_menuGoto:
  2611                           	opt stack 0
  2612                           tosu	equ	0xFFF
  2613                           tosh	equ	0xFFE
  2614                           tosl	equ	0xFFD
  2615                           pclath	equ	0xFFA
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           intcon	equ	0xFF2
  2623                           postinc0	equ	0xFEE
  2624                           wreg	equ	0xFE8
  2625                           indf1	equ	0xFE7
  2626                           postdec1	equ	0xFE5
  2627                           fsr1h	equ	0xFE2
  2628                           fsr1l	equ	0xFE1
  2629                           indf2	equ	0xFDF
  2630                           postinc2	equ	0xFDE
  2631                           postdec2	equ	0xFDD
  2632                           fsr2h	equ	0xFDA
  2633                           fsr2l	equ	0xFD9
  2634                           status	equ	0xFD8
  2635                           
  2636 ;; *************** function __menuEnterPosition *****************
  2637 ;; Defined at:
  2638 ;;		line 20 in file "menu.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;  pos             1    wreg     unsigned char 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  pos             1   40[COMRAM] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2652 ;;      Params:         0       0       0       0       0       0       0       0       0
  2653 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2655 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2656 ;;Total ram usage:        1 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    4
  2659 ;; This function calls:
  2660 ;;		_OnEnterMenu1
  2661 ;;		_menuDraw
  2662 ;; This function is called by:
  2663 ;;		_menuGoto
  2664 ;;		_menuNext
  2665 ;;		_menuPrev
  2666 ;;		_menuReset
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text14
  2671  0010EA                     __ptext14:
  2672                           	opt stack 0
  2673  0010EA                     __menuEnterPosition:
  2674                           	opt stack 25
  2675                           
  2676                           ;incstack = 0
  2677                           ;__menuEnterPosition@pos stored from wreg
  2678  0010EA  6E29               	movwf	__menuEnterPosition@pos,c
  2679                           
  2680                           ;menu.c: 22: Menu.Current = Menu.Items[pos];
  2681  0010EC  5029               	movf	__menuEnterPosition@pos,w,c
  2682  0010EE  0D02               	mullw	2
  2683  0010F0  0E35               	movlw	low (_Menu+6)
  2684  0010F2  24F3               	addwf	prodl,w,c
  2685  0010F4  6ED9               	movwf	fsr2l,c
  2686  0010F6  0E00               	movlw	high (_Menu+6)
  2687  0010F8  20F4               	addwfc	prodh,w,c
  2688  0010FA  6EDA               	movwf	fsr2h,c
  2689  0010FC  CFDE F033          	movff	postinc2,_Menu+4
  2690  001100  CFDD F034          	movff	postdec2,_Menu+5
  2691                           
  2692                           ;menu.c: 23: Menu.Current->Enter();
  2693  001104  C033  FFD9         	movff	_Menu+4,fsr2l
  2694  001108  C034  FFDA         	movff	_Menu+5,fsr2h
  2695  00110C  D801               	call	u1558
  2696  00110E  D00A               	goto	u1559
  2697  001110                     u1558:
  2698  001110  0005               	push	
  2699  001112  6EFA               	movwf	pclath,c
  2700  001114  50DE               	movf	postinc2,w,c
  2701  001116  6EFD               	movwf	tosl,c
  2702  001118  50DE               	movf	postinc2,w,c
  2703  00111A  6EFE               	movwf	tosh,c
  2704  00111C  50F8               	movf	tblptru,w,c
  2705  00111E  6EFF               	movwf	tosu,c
  2706  001120  50FA               	movf	pclath,w,c
  2707  001122  0012               	return		;indir
  2708  001124                     u1559:
  2709                           
  2710                           ;menu.c: 24: menuDraw();
  2711  001124  ECD7  F009         	call	_menuDraw	;wreg free
  2712  001128  0012               	return		;funcret
  2713  00112A                     __end_of__menuEnterPosition:
  2714                           	opt stack 0
  2715                           tosu	equ	0xFFF
  2716                           tosh	equ	0xFFE
  2717                           tosl	equ	0xFFD
  2718                           pclath	equ	0xFFA
  2719                           tblptru	equ	0xFF8
  2720                           tblptrh	equ	0xFF7
  2721                           tblptrl	equ	0xFF6
  2722                           tablat	equ	0xFF5
  2723                           prodh	equ	0xFF4
  2724                           prodl	equ	0xFF3
  2725                           intcon	equ	0xFF2
  2726                           postinc0	equ	0xFEE
  2727                           wreg	equ	0xFE8
  2728                           indf1	equ	0xFE7
  2729                           postdec1	equ	0xFE5
  2730                           fsr1h	equ	0xFE2
  2731                           fsr1l	equ	0xFE1
  2732                           indf2	equ	0xFDF
  2733                           postinc2	equ	0xFDE
  2734                           postdec2	equ	0xFDD
  2735                           fsr2h	equ	0xFDA
  2736                           fsr2l	equ	0xFD9
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function _menuDraw *****************
  2740 ;; Defined at:
  2741 ;;		line 47 in file "menu.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;		None
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;		None
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  1    wreg      void 
  2748 ;; Registers used:
  2749 ;;		wreg, status,2
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2755 ;;      Params:         0       0       0       0       0       0       0       0       0
  2756 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2757 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2758 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2759 ;;Total ram usage:        0 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    3
  2762 ;; This function calls:
  2763 ;;		Nothing
  2764 ;; This function is called by:
  2765 ;;		__menuEnterPosition
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text15
  2770  0013AE                     __ptext15:
  2771                           	opt stack 0
  2772  0013AE                     _menuDraw:
  2773                           	opt stack 25
  2774                           
  2775                           ;menu.c: 49: Menu.NeedsRedraw = 1;
  2776                           
  2777                           ;incstack = 0
  2778  0013AE  0E01               	movlw	1
  2779  0013B0  6E31               	movwf	_Menu+2,c
  2780  0013B2  0012               	return		;funcret
  2781  0013B4                     __end_of_menuDraw:
  2782                           	opt stack 0
  2783                           tosu	equ	0xFFF
  2784                           tosh	equ	0xFFE
  2785                           tosl	equ	0xFFD
  2786                           pclath	equ	0xFFA
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           intcon	equ	0xFF2
  2794                           postinc0	equ	0xFEE
  2795                           wreg	equ	0xFE8
  2796                           indf1	equ	0xFE7
  2797                           postdec1	equ	0xFE5
  2798                           fsr1h	equ	0xFE2
  2799                           fsr1l	equ	0xFE1
  2800                           indf2	equ	0xFDF
  2801                           postinc2	equ	0xFDE
  2802                           postdec2	equ	0xFDD
  2803                           fsr2h	equ	0xFDA
  2804                           fsr2l	equ	0xFD9
  2805                           status	equ	0xFD8
  2806                           
  2807 ;; *************** function _OnEnterMenu1 *****************
  2808 ;; Defined at:
  2809 ;;		line 18 in file "main.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		None
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2823 ;;      Params:         0       0       0       0       0       0       0       0       0
  2824 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2826 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2827 ;;Total ram usage:        0 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    3
  2830 ;; This function calls:
  2831 ;;		Nothing
  2832 ;; This function is called by:
  2833 ;;		__menuEnterPosition
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text16
  2838  0013BA                     __ptext16:
  2839                           	opt stack 0
  2840  0013BA                     _OnEnterMenu1:
  2841                           	opt stack 25
  2842                           
  2843                           ;incstack = 0
  2844  0013BA  0012               	return		;funcret
  2845  0013BC                     __end_of_OnEnterMenu1:
  2846                           	opt stack 0
  2847                           tosu	equ	0xFFF
  2848                           tosh	equ	0xFFE
  2849                           tosl	equ	0xFFD
  2850                           pclath	equ	0xFFA
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           prodh	equ	0xFF4
  2856                           prodl	equ	0xFF3
  2857                           intcon	equ	0xFF2
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           indf1	equ	0xFE7
  2861                           postdec1	equ	0xFE5
  2862                           fsr1h	equ	0xFE2
  2863                           fsr1l	equ	0xFE1
  2864                           indf2	equ	0xFDF
  2865                           postinc2	equ	0xFDE
  2866                           postdec2	equ	0xFDD
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function _memset *****************
  2872 ;; Defined at:
  2873 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  p1              2   40[COMRAM] PTR void 
  2876 ;;		 -> buffer(32), 
  2877 ;;  c               2   42[COMRAM] int 
  2878 ;;  n               2   44[COMRAM] unsigned int 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  p               2    0[BANK0 ] PTR unsigned char 
  2881 ;;		 -> buffer(32), 
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  2   40[COMRAM] PTR void 
  2884 ;; Registers used:
  2885 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2891 ;;      Params:         6       0       0       0       0       0       0       0       0
  2892 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2894 ;;      Totals:         6       2       0       0       0       0       0       0       0
  2895 ;;Total ram usage:        8 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    3
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_main
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text17
  2906  0011E0                     __ptext17:
  2907                           	opt stack 0
  2908  0011E0                     _memset:
  2909                           	opt stack 27
  2910                           
  2911                           ;incstack = 0
  2912  0011E0  C029  F0A7         	movff	memset@p1,memset@p
  2913  0011E4  C02A  F0A8         	movff	memset@p1+1,memset@p+1
  2914  0011E8  D009               	goto	l955
  2915  0011EA                     l3079:
  2916  0011EA  C0A7  FFD9         	movff	memset@p,fsr2l
  2917  0011EE  C0A8  FFDA         	movff	memset@p+1,fsr2h
  2918  0011F2  C02B  FFDF         	movff	memset@c,indf2
  2919  0011F6  0100               	movlb	0	; () banked
  2920  0011F8  4BA7               	infsnz	memset@p& (0+255),f,b
  2921  0011FA  2BA8               	incf	(memset@p+1)& (0+255),f,b
  2922  0011FC                     l955:
  2923                           
  2924                           ; BSR set to: 0
  2925  0011FC  062D               	decf	memset@n,f,c
  2926  0011FE  A0D8               	btfss	status,0,c
  2927  001200  062E               	decf	memset@n+1,f,c
  2928  001202  282D               	incf	memset@n,w,c
  2929  001204  E1F2               	bnz	l3079
  2930  001206  282E               	incf	memset@n+1,w,c
  2931  001208  B4D8               	btfsc	status,2,c
  2932  00120A  0012               	return	
  2933  00120C  D7EE               	goto	l956
  2934  00120E                     __end_of_memset:
  2935                           	opt stack 0
  2936                           tosu	equ	0xFFF
  2937                           tosh	equ	0xFFE
  2938                           tosl	equ	0xFFD
  2939                           pclath	equ	0xFFA
  2940                           tblptru	equ	0xFF8
  2941                           tblptrh	equ	0xFF7
  2942                           tblptrl	equ	0xFF6
  2943                           tablat	equ	0xFF5
  2944                           prodh	equ	0xFF4
  2945                           prodl	equ	0xFF3
  2946                           intcon	equ	0xFF2
  2947                           postinc0	equ	0xFEE
  2948                           wreg	equ	0xFE8
  2949                           indf1	equ	0xFE7
  2950                           postdec1	equ	0xFE5
  2951                           fsr1h	equ	0xFE2
  2952                           fsr1l	equ	0xFE1
  2953                           indf2	equ	0xFDF
  2954                           postinc2	equ	0xFDE
  2955                           postdec2	equ	0xFDD
  2956                           fsr2h	equ	0xFDA
  2957                           fsr2l	equ	0xFD9
  2958                           status	equ	0xFD8
  2959                           
  2960 ;; *************** function _magnetoGetCord *****************
  2961 ;; Defined at:
  2962 ;;		line 18 in file "magnetometro.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;  coord           2   42[COMRAM] PTR struct .
  2965 ;;		 -> cord(6), 
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;		None
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      void 
  2970 ;; Registers used:
  2971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2977 ;;      Params:         2       0       0       0       0       0       0       0       0
  2978 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2979 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2980 ;;      Totals:         2       4       0       0       0       0       0       0       0
  2981 ;;Total ram usage:        6 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    6
  2984 ;; This function calls:
  2985 ;;		_I2C_Read
  2986 ;;		_I2C_Repeated_Start
  2987 ;;		_I2C_Start_Wait
  2988 ;;		_I2C_Stop
  2989 ;;		_I2C_Write
  2990 ;; This function is called by:
  2991 ;;		_main
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           	psect	text18
  2996  000BFE                     __ptext18:
  2997                           	opt stack 0
  2998  000BFE                     _magnetoGetCord:
  2999                           	opt stack 24
  3000                           
  3001                           ;magnetometro.c: 20: I2C_Start_Wait(0x3C);
  3002                           
  3003                           ;incstack = 0
  3004  000BFE  0E3C               	movlw	60
  3005  000C00  EC4B  F009         	call	_I2C_Start_Wait
  3006                           
  3007                           ;magnetometro.c: 21: I2C_Write(0x03);
  3008  000C04  0E03               	movlw	3
  3009  000C06  EC90  F009         	call	_I2C_Write
  3010                           
  3011                           ;magnetometro.c: 22: I2C_Repeated_Start(0x3D);
  3012  000C0A  0E3D               	movlw	61
  3013  000C0C  EC85  F009         	call	_I2C_Repeated_Start
  3014                           
  3015                           ;magnetometro.c: 24: coord->x = (((int) I2C_Read(0) << 8) | (int) I2C_Read(0));
  3016  000C10  0E00               	movlw	0
  3017  000C12  EC1A  F009         	call	_I2C_Read
  3018  000C16  0100               	movlb	0	; () banked
  3019  000C18  6FA7               	movwf	??_magnetoGetCord& (0+255),b
  3020  000C1A  51A7               	movf	??_magnetoGetCord& (0+255),w,b
  3021  000C1C  6FA9               	movwf	(??_magnetoGetCord+2)& (0+255),b
  3022  000C1E  6BA8               	clrf	(??_magnetoGetCord+1)& (0+255),b
  3023  000C20  0E00               	movlw	0
  3024  000C22  EC1A  F009         	call	_I2C_Read
  3025  000C26  0100               	movlb	0	; () banked
  3026  000C28  6FAA               	movwf	(??_magnetoGetCord+3)& (0+255),b
  3027  000C2A  51AA               	movf	(??_magnetoGetCord+3)& (0+255),w,b
  3028  000C2C  13A8               	iorwf	(??_magnetoGetCord+1)& (0+255),f,b
  3029  000C2E  0E00               	movlw	0
  3030  000C30  13A9               	iorwf	(??_magnetoGetCord+2)& (0+255),f,b
  3031  000C32  C02B  FFD9         	movff	magnetoGetCord@coord,fsr2l
  3032  000C36  C02C  FFDA         	movff	magnetoGetCord@coord+1,fsr2h
  3033  000C3A  C0A8  FFDE         	movff	??_magnetoGetCord+1,postinc2
  3034  000C3E  C0A9  FFDD         	movff	??_magnetoGetCord+2,postdec2
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;magnetometro.c: 25: coord->z = (((int) I2C_Read(0) << 8) | (int) I2C_Read(0));
  3038  000C42  0E00               	movlw	0
  3039  000C44  EC1A  F009         	call	_I2C_Read
  3040  000C48  0100               	movlb	0	; () banked
  3041  000C4A  6FA7               	movwf	??_magnetoGetCord& (0+255),b
  3042  000C4C  51A7               	movf	??_magnetoGetCord& (0+255),w,b
  3043  000C4E  6FA9               	movwf	(??_magnetoGetCord+2)& (0+255),b
  3044  000C50  6BA8               	clrf	(??_magnetoGetCord+1)& (0+255),b
  3045  000C52  0E00               	movlw	0
  3046  000C54  EC1A  F009         	call	_I2C_Read
  3047  000C58  0100               	movlb	0	; () banked
  3048  000C5A  6FAA               	movwf	(??_magnetoGetCord+3)& (0+255),b
  3049  000C5C  51AA               	movf	(??_magnetoGetCord+3)& (0+255),w,b
  3050  000C5E  13A8               	iorwf	(??_magnetoGetCord+1)& (0+255),f,b
  3051  000C60  0E00               	movlw	0
  3052  000C62  13A9               	iorwf	(??_magnetoGetCord+2)& (0+255),f,b
  3053  000C64  EE20 F004          	lfsr	2,4
  3054  000C68  502B               	movf	magnetoGetCord@coord,w,c
  3055  000C6A  26D9               	addwf	fsr2l,f,c
  3056  000C6C  502C               	movf	magnetoGetCord@coord+1,w,c
  3057  000C6E  22DA               	addwfc	fsr2h,f,c
  3058  000C70  C0A8  FFDE         	movff	??_magnetoGetCord+1,postinc2
  3059  000C74  C0A9  FFDD         	movff	??_magnetoGetCord+2,postdec2
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;magnetometro.c: 26: coord->y = (((int) I2C_Read(0) << 8) | (int) I2C_Read(1));
  3063  000C78  0E00               	movlw	0
  3064  000C7A  EC1A  F009         	call	_I2C_Read
  3065  000C7E  0100               	movlb	0	; () banked
  3066  000C80  6FA7               	movwf	??_magnetoGetCord& (0+255),b
  3067  000C82  51A7               	movf	??_magnetoGetCord& (0+255),w,b
  3068  000C84  6FA9               	movwf	(??_magnetoGetCord+2)& (0+255),b
  3069  000C86  6BA8               	clrf	(??_magnetoGetCord+1)& (0+255),b
  3070  000C88  0E01               	movlw	1
  3071  000C8A  EC1A  F009         	call	_I2C_Read
  3072  000C8E  0100               	movlb	0	; () banked
  3073  000C90  6FAA               	movwf	(??_magnetoGetCord+3)& (0+255),b
  3074  000C92  51AA               	movf	(??_magnetoGetCord+3)& (0+255),w,b
  3075  000C94  13A8               	iorwf	(??_magnetoGetCord+1)& (0+255),f,b
  3076  000C96  0E00               	movlw	0
  3077  000C98  13A9               	iorwf	(??_magnetoGetCord+2)& (0+255),f,b
  3078  000C9A  EE20 F002          	lfsr	2,2
  3079  000C9E  502B               	movf	magnetoGetCord@coord,w,c
  3080  000CA0  26D9               	addwf	fsr2l,f,c
  3081  000CA2  502C               	movf	magnetoGetCord@coord+1,w,c
  3082  000CA4  22DA               	addwfc	fsr2h,f,c
  3083  000CA6  C0A8  FFDE         	movff	??_magnetoGetCord+1,postinc2
  3084  000CAA  C0A9  FFDD         	movff	??_magnetoGetCord+2,postdec2
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;magnetometro.c: 27: I2C_Stop();
  3088  000CAE  ECB6  F009         	call	_I2C_Stop	;wreg free
  3089  000CB2  0012               	return		;funcret
  3090  000CB4                     __end_of_magnetoGetCord:
  3091                           	opt stack 0
  3092                           tosu	equ	0xFFF
  3093                           tosh	equ	0xFFE
  3094                           tosl	equ	0xFFD
  3095                           pclath	equ	0xFFA
  3096                           tblptru	equ	0xFF8
  3097                           tblptrh	equ	0xFF7
  3098                           tblptrl	equ	0xFF6
  3099                           tablat	equ	0xFF5
  3100                           prodh	equ	0xFF4
  3101                           prodl	equ	0xFF3
  3102                           intcon	equ	0xFF2
  3103                           postinc0	equ	0xFEE
  3104                           wreg	equ	0xFE8
  3105                           indf1	equ	0xFE7
  3106                           postdec1	equ	0xFE5
  3107                           fsr1h	equ	0xFE2
  3108                           fsr1l	equ	0xFE1
  3109                           indf2	equ	0xFDF
  3110                           postinc2	equ	0xFDE
  3111                           postdec2	equ	0xFDD
  3112                           fsr2h	equ	0xFDA
  3113                           fsr2l	equ	0xFD9
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _I2C_Start_Wait *****************
  3117 ;; Defined at:
  3118 ;;		line 26 in file "i2c.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  slave_write_    1    wreg     unsigned char 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  slave_write_    1   41[COMRAM] unsigned char 
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3132 ;;      Params:         0       0       0       0       0       0       0       0       0
  3133 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3135 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3136 ;;Total ram usage:        1 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    5
  3139 ;; This function calls:
  3140 ;;		_I2C_Stop
  3141 ;;		_I2C_Write
  3142 ;; This function is called by:
  3143 ;;		_magnetoGetCord
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           	psect	text19
  3148  001296                     __ptext19:
  3149                           	opt stack 0
  3150  001296                     _I2C_Start_Wait:
  3151                           	opt stack 24
  3152                           
  3153                           ;incstack = 0
  3154                           ;I2C_Start_Wait@slave_write_address stored from wreg
  3155  001296  6E2A               	movwf	I2C_Start_Wait@slave_write_address,c
  3156  001298                     l358:
  3157                           
  3158                           ;i2c.c: 29: {
  3159                           ;i2c.c: 30: SSPCON2bits.SEN = 1;
  3160  001298  80C5               	bsf	4037,0,c	;volatile
  3161  00129A  B0C5               	btfsc	4037,0,c	;volatile
  3162  00129C  D7FE               	goto	l360
  3163                           
  3164                           ;i2c.c: 32: SSPIF = 0;
  3165  00129E  969E               	bcf	3998,3,c	;volatile
  3166                           
  3167                           ;i2c.c: 33: if(!SSPSTATbits.S)
  3168  0012A0  A6C7               	btfss	4039,3,c	;volatile
  3169  0012A2  D7FA               	goto	l358
  3170                           
  3171                           ;i2c.c: 35: I2C_Write(slave_write_address);
  3172                           
  3173                           ;i2c.c: 34: continue;
  3174  0012A4  502A               	movf	I2C_Start_Wait@slave_write_address,w,c
  3175  0012A6  EC90  F009         	call	_I2C_Write
  3176                           
  3177                           ;i2c.c: 36: if(ACKSTAT)
  3178  0012AA  ACC5               	btfss	4037,6,c	;volatile
  3179  0012AC  0012               	return	
  3180                           
  3181                           ;i2c.c: 37: {
  3182                           ;i2c.c: 38: I2C_Stop();
  3183  0012AE  ECB6  F009         	call	_I2C_Stop	;wreg free
  3184                           
  3185                           ;i2c.c: 39: continue;
  3186  0012B2  D7F2               	goto	l358
  3187  0012B4                     __end_of_I2C_Start_Wait:
  3188                           	opt stack 0
  3189                           tosu	equ	0xFFF
  3190                           tosh	equ	0xFFE
  3191                           tosl	equ	0xFFD
  3192                           pclath	equ	0xFFA
  3193                           tblptru	equ	0xFF8
  3194                           tblptrh	equ	0xFF7
  3195                           tblptrl	equ	0xFF6
  3196                           tablat	equ	0xFF5
  3197                           prodh	equ	0xFF4
  3198                           prodl	equ	0xFF3
  3199                           intcon	equ	0xFF2
  3200                           postinc0	equ	0xFEE
  3201                           wreg	equ	0xFE8
  3202                           indf1	equ	0xFE7
  3203                           postdec1	equ	0xFE5
  3204                           fsr1h	equ	0xFE2
  3205                           fsr1l	equ	0xFE1
  3206                           indf2	equ	0xFDF
  3207                           postinc2	equ	0xFDE
  3208                           postdec2	equ	0xFDD
  3209                           fsr2h	equ	0xFDA
  3210                           fsr2l	equ	0xFD9
  3211                           status	equ	0xFD8
  3212                           
  3213 ;; *************** function _I2C_Stop *****************
  3214 ;; Defined at:
  3215 ;;		line 96 in file "i2c.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;		None
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;		None
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      unsigned char 
  3222 ;; Registers used:
  3223 ;;		wreg
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3229 ;;      Params:         0       0       0       0       0       0       0       0       0
  3230 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3232 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3233 ;;Total ram usage:        0 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    3
  3236 ;; This function calls:
  3237 ;;		Nothing
  3238 ;; This function is called by:
  3239 ;;		_I2C_Start_Wait
  3240 ;;		_magnetoGetCord
  3241 ;;		_magnetoInit
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text20
  3246  00136C                     __ptext20:
  3247                           	opt stack 0
  3248  00136C                     _I2C_Stop:
  3249                           	opt stack 26
  3250                           
  3251                           ;i2c.c: 98: PEN = 1;
  3252                           
  3253                           ;incstack = 0
  3254  00136C  84C5               	bsf	4037,2,c	;volatile
  3255  00136E  B4C5               	btfsc	4037,2,c	;volatile
  3256  001370  D7FE               	goto	l404
  3257                           
  3258                           ;i2c.c: 100: SSPIF = 0;
  3259  001372  969E               	bcf	3998,3,c	;volatile
  3260                           
  3261                           ;i2c.c: 101: if(!SSPSTATbits.P);
  3262  001374  50C7               	movf	4039,w,c	;volatile
  3263  001376  0012               	return	
  3264  001378                     __end_of_I2C_Stop:
  3265                           	opt stack 0
  3266                           tosu	equ	0xFFF
  3267                           tosh	equ	0xFFE
  3268                           tosl	equ	0xFFD
  3269                           pclath	equ	0xFFA
  3270                           tblptru	equ	0xFF8
  3271                           tblptrh	equ	0xFF7
  3272                           tblptrl	equ	0xFF6
  3273                           tablat	equ	0xFF5
  3274                           prodh	equ	0xFF4
  3275                           prodl	equ	0xFF3
  3276                           intcon	equ	0xFF2
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           indf1	equ	0xFE7
  3280                           postdec1	equ	0xFE5
  3281                           fsr1h	equ	0xFE2
  3282                           fsr1l	equ	0xFE1
  3283                           indf2	equ	0xFDF
  3284                           postinc2	equ	0xFDE
  3285                           postdec2	equ	0xFDD
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function _I2C_Repeated_Start *****************
  3291 ;; Defined at:
  3292 ;;		line 45 in file "i2c.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  slave_read_a    1    wreg     unsigned char 
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  slave_read_a    1   41[COMRAM] unsigned char 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      unsigned char 
  3299 ;; Registers used:
  3300 ;;		wreg, status,2, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3306 ;;      Params:         0       0       0       0       0       0       0       0       0
  3307 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3308 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3309 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3310 ;;Total ram usage:        1 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    5
  3313 ;; This function calls:
  3314 ;;		_I2C_Write
  3315 ;; This function is called by:
  3316 ;;		_magnetoGetCord
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text21
  3321  00130A                     __ptext21:
  3322                           	opt stack 0
  3323  00130A                     _I2C_Repeated_Start:
  3324                           	opt stack 24
  3325                           
  3326                           ;incstack = 0
  3327                           ;I2C_Repeated_Start@slave_read_address stored from wreg
  3328  00130A  6E2A               	movwf	I2C_Repeated_Start@slave_read_address,c
  3329                           
  3330                           ;i2c.c: 47: RSEN = 1;
  3331  00130C  82C5               	bsf	4037,1,c	;volatile
  3332  00130E  B2C5               	btfsc	4037,1,c	;volatile
  3333  001310  D7FE               	goto	l370
  3334                           
  3335                           ;i2c.c: 49: SSPIF = 0;
  3336  001312  969E               	bcf	3998,3,c	;volatile
  3337                           
  3338                           ;i2c.c: 50: if(!SSPSTATbits.S)
  3339  001314  A6C7               	btfss	4039,3,c	;volatile
  3340  001316  0012               	return	
  3341                           
  3342                           ;i2c.c: 52: I2C_Write(slave_read_address);
  3343                           
  3344                           ;i2c.c: 51: return 0;
  3345                           ;	Return value of _I2C_Repeated_Start is never used
  3346  001318  502A               	movf	I2C_Repeated_Start@slave_read_address,w,c
  3347  00131A  EC90  F009         	call	_I2C_Write
  3348                           
  3349                           ;i2c.c: 55: else
  3350                           ;i2c.c: 56: return 2;
  3351                           ;	Return value of _I2C_Repeated_Start is never used
  3352                           
  3353                           ;i2c.c: 54: return 1;
  3354                           ;	Return value of _I2C_Repeated_Start is never used
  3355                           
  3356                           ;i2c.c: 53: if (ACKSTAT)
  3357  00131E  0012               	return	
  3358  001320                     __end_of_I2C_Repeated_Start:
  3359                           	opt stack 0
  3360                           tosu	equ	0xFFF
  3361                           tosh	equ	0xFFE
  3362                           tosl	equ	0xFFD
  3363                           pclath	equ	0xFFA
  3364                           tblptru	equ	0xFF8
  3365                           tblptrh	equ	0xFF7
  3366                           tblptrl	equ	0xFF6
  3367                           tablat	equ	0xFF5
  3368                           prodh	equ	0xFF4
  3369                           prodl	equ	0xFF3
  3370                           intcon	equ	0xFF2
  3371                           postinc0	equ	0xFEE
  3372                           wreg	equ	0xFE8
  3373                           indf1	equ	0xFE7
  3374                           postdec1	equ	0xFE5
  3375                           fsr1h	equ	0xFE2
  3376                           fsr1l	equ	0xFE1
  3377                           indf2	equ	0xFDF
  3378                           postinc2	equ	0xFDE
  3379                           postdec2	equ	0xFDD
  3380                           fsr2h	equ	0xFDA
  3381                           fsr2l	equ	0xFD9
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function _I2C_Write *****************
  3385 ;; Defined at:
  3386 ;;		line 59 in file "i2c.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  data            1    wreg     unsigned char 
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;  data            1   40[COMRAM] unsigned char 
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      unsigned char 
  3393 ;; Registers used:
  3394 ;;		wreg, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3400 ;;      Params:         0       0       0       0       0       0       0       0       0
  3401 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3402 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3403 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3404 ;;Total ram usage:        1 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    4
  3407 ;; This function calls:
  3408 ;;		_I2C_Ready
  3409 ;; This function is called by:
  3410 ;;		_I2C_Start_Wait
  3411 ;;		_I2C_Repeated_Start
  3412 ;;		_magnetoGetCord
  3413 ;;		_I2C_Start
  3414 ;;		_magnetoInit
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text22
  3419  001320                     __ptext22:
  3420                           	opt stack 0
  3421  001320                     _I2C_Write:
  3422                           	opt stack 25
  3423                           
  3424                           ;incstack = 0
  3425                           ;I2C_Write@data stored from wreg
  3426  001320  6E29               	movwf	I2C_Write@data,c
  3427                           
  3428                           ;i2c.c: 61: SSPBUF = data;
  3429  001322  C029  FFC9         	movff	I2C_Write@data,4041	;volatile
  3430                           
  3431                           ;i2c.c: 62: I2C_Ready();
  3432  001326  ECD0  F009         	call	_I2C_Ready	;wreg free
  3433                           
  3434                           ;i2c.c: 63: if (ACKSTAT)
  3435  00132A  ACC5               	btfss	4037,6,c	;volatile
  3436  00132C  D002               	goto	l378
  3437                           
  3438                           ;i2c.c: 64: return 1;
  3439  00132E  0E01               	movlw	1
  3440  001330  0012               	return	
  3441  001332                     l378:
  3442                           
  3443                           ;i2c.c: 65: else
  3444                           ;i2c.c: 66: return 2;
  3445  001332  0E02               	movlw	2
  3446  001334  0012               	return	
  3447  001336                     __end_of_I2C_Write:
  3448                           	opt stack 0
  3449                           tosu	equ	0xFFF
  3450                           tosh	equ	0xFFE
  3451                           tosl	equ	0xFFD
  3452                           pclath	equ	0xFFA
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           prodh	equ	0xFF4
  3458                           prodl	equ	0xFF3
  3459                           intcon	equ	0xFF2
  3460                           postinc0	equ	0xFEE
  3461                           wreg	equ	0xFE8
  3462                           indf1	equ	0xFE7
  3463                           postdec1	equ	0xFE5
  3464                           fsr1h	equ	0xFE2
  3465                           fsr1l	equ	0xFE1
  3466                           indf2	equ	0xFDF
  3467                           postinc2	equ	0xFDE
  3468                           postdec2	equ	0xFDD
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function _I2C_Read *****************
  3474 ;; Defined at:
  3475 ;;		line 82 in file "i2c.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  flag            1    wreg     unsigned char 
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  flag            1   40[COMRAM] unsigned char 
  3480 ;;  buffer          1   41[COMRAM] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  1    wreg      unsigned char 
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3490 ;;      Params:         0       0       0       0       0       0       0       0       0
  3491 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3493 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3494 ;;Total ram usage:        2 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    4
  3497 ;; This function calls:
  3498 ;;		_I2C_Ack
  3499 ;;		_I2C_Nack
  3500 ;;		_I2C_Ready
  3501 ;; This function is called by:
  3502 ;;		_magnetoGetCord
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text23
  3507  001234                     __ptext23:
  3508                           	opt stack 0
  3509  001234                     _I2C_Read:
  3510                           	opt stack 25
  3511                           
  3512                           ;incstack = 0
  3513                           ;I2C_Read@flag stored from wreg
  3514  001234  6E29               	movwf	I2C_Read@flag,c
  3515                           
  3516                           ;i2c.c: 84: char buffer;
  3517                           ;i2c.c: 85: RCEN = 1;
  3518  001236  86C5               	bsf	4037,3,c	;volatile
  3519  001238  A0C7               	btfss	4039,0,c	;volatile
  3520  00123A  D7FE               	goto	l396
  3521                           
  3522                           ;i2c.c: 87: buffer = SSPBUF;
  3523  00123C  CFC9 F02A          	movff	4041,I2C_Read@buffer	;volatile
  3524                           
  3525                           ;i2c.c: 88: if(flag==0)
  3526  001240  5029               	movf	I2C_Read@flag,w,c
  3527  001242  A4D8               	btfss	status,2,c
  3528  001244  D003               	goto	l398
  3529                           
  3530                           ;i2c.c: 89: I2C_Ack();
  3531  001246  ECCB  F009         	call	_I2C_Ack	;wreg free
  3532  00124A  D002               	goto	l399
  3533  00124C                     l398:
  3534                           
  3535                           ;i2c.c: 90: else
  3536                           ;i2c.c: 91: I2C_Nack();
  3537  00124C  ECC6  F009         	call	_I2C_Nack	;wreg free
  3538  001250                     l399:
  3539                           
  3540                           ;i2c.c: 92: I2C_Ready();
  3541  001250  ECD0  F009         	call	_I2C_Ready	;wreg free
  3542                           
  3543                           ;i2c.c: 93: return(buffer);
  3544  001254  502A               	movf	I2C_Read@buffer,w,c
  3545  001256  0012               	return	
  3546  001258                     __end_of_I2C_Read:
  3547                           	opt stack 0
  3548                           tosu	equ	0xFFF
  3549                           tosh	equ	0xFFE
  3550                           tosl	equ	0xFFD
  3551                           pclath	equ	0xFFA
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           intcon	equ	0xFF2
  3559                           postinc0	equ	0xFEE
  3560                           wreg	equ	0xFE8
  3561                           indf1	equ	0xFE7
  3562                           postdec1	equ	0xFE5
  3563                           fsr1h	equ	0xFE2
  3564                           fsr1l	equ	0xFE1
  3565                           indf2	equ	0xFDF
  3566                           postinc2	equ	0xFDE
  3567                           postdec2	equ	0xFDD
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           status	equ	0xFD8
  3571                           
  3572 ;; *************** function _I2C_Ready *****************
  3573 ;; Defined at:
  3574 ;;		line 105 in file "i2c.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		None
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3588 ;;      Params:         0       0       0       0       0       0       0       0       0
  3589 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3590 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3591 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3592 ;;Total ram usage:        0 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    3
  3595 ;; This function calls:
  3596 ;;		Nothing
  3597 ;; This function is called by:
  3598 ;;		_I2C_Write
  3599 ;;		_I2C_Read
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           	psect	text24
  3604  0013A0                     __ptext24:
  3605                           	opt stack 0
  3606  0013A0                     _I2C_Ready:
  3607                           	opt stack 25
  3608                           
  3609                           ;i2c.c: 107: while(!SSPIF);
  3610                           
  3611                           ;incstack = 0
  3612  0013A0  A69E               	btfss	3998,3,c	;volatile
  3613  0013A2  D7FE               	goto	_I2C_Ready
  3614                           
  3615                           ;i2c.c: 108: SSPIF=0;
  3616  0013A4  969E               	bcf	3998,3,c	;volatile
  3617  0013A6  0012               	return		;funcret
  3618  0013A8                     __end_of_I2C_Ready:
  3619                           	opt stack 0
  3620                           tosu	equ	0xFFF
  3621                           tosh	equ	0xFFE
  3622                           tosl	equ	0xFFD
  3623                           pclath	equ	0xFFA
  3624                           tblptru	equ	0xFF8
  3625                           tblptrh	equ	0xFF7
  3626                           tblptrl	equ	0xFF6
  3627                           tablat	equ	0xFF5
  3628                           prodh	equ	0xFF4
  3629                           prodl	equ	0xFF3
  3630                           intcon	equ	0xFF2
  3631                           postinc0	equ	0xFEE
  3632                           wreg	equ	0xFE8
  3633                           indf1	equ	0xFE7
  3634                           postdec1	equ	0xFE5
  3635                           fsr1h	equ	0xFE2
  3636                           fsr1l	equ	0xFE1
  3637                           indf2	equ	0xFDF
  3638                           postinc2	equ	0xFDE
  3639                           postdec2	equ	0xFDD
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8
  3643                           
  3644 ;; *************** function _I2C_Nack *****************
  3645 ;; Defined at:
  3646 ;;		line 76 in file "i2c.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;		None
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;		None
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  1    wreg      void 
  3653 ;; Registers used:
  3654 ;;		None
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3660 ;;      Params:         0       0       0       0       0       0       0       0       0
  3661 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3662 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3663 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3664 ;;Total ram usage:        0 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    3
  3667 ;; This function calls:
  3668 ;;		Nothing
  3669 ;; This function is called by:
  3670 ;;		_I2C_Read
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text25
  3675  00138C                     __ptext25:
  3676                           	opt stack 0
  3677  00138C                     _I2C_Nack:
  3678                           	opt stack 25
  3679                           
  3680                           ;i2c.c: 78: ACKDT = 1;
  3681                           
  3682                           ;incstack = 0
  3683  00138C  8AC5               	bsf	4037,5,c	;volatile
  3684                           
  3685                           ;i2c.c: 79: ACKEN = 1;
  3686  00138E  88C5               	bsf	4037,4,c	;volatile
  3687  001390  A8C5               	btfss	4037,4,c	;volatile
  3688  001392  0012               	return	
  3689  001394  D7FD               	goto	l390
  3690  001396                     __end_of_I2C_Nack:
  3691                           	opt stack 0
  3692                           tosu	equ	0xFFF
  3693                           tosh	equ	0xFFE
  3694                           tosl	equ	0xFFD
  3695                           pclath	equ	0xFFA
  3696                           tblptru	equ	0xFF8
  3697                           tblptrh	equ	0xFF7
  3698                           tblptrl	equ	0xFF6
  3699                           tablat	equ	0xFF5
  3700                           prodh	equ	0xFF4
  3701                           prodl	equ	0xFF3
  3702                           intcon	equ	0xFF2
  3703                           postinc0	equ	0xFEE
  3704                           wreg	equ	0xFE8
  3705                           indf1	equ	0xFE7
  3706                           postdec1	equ	0xFE5
  3707                           fsr1h	equ	0xFE2
  3708                           fsr1l	equ	0xFE1
  3709                           indf2	equ	0xFDF
  3710                           postinc2	equ	0xFDE
  3711                           postdec2	equ	0xFDD
  3712                           fsr2h	equ	0xFDA
  3713                           fsr2l	equ	0xFD9
  3714                           status	equ	0xFD8
  3715                           
  3716 ;; *************** function _I2C_Ack *****************
  3717 ;; Defined at:
  3718 ;;		line 69 in file "i2c.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;		None
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		None
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3732 ;;      Params:         0       0       0       0       0       0       0       0       0
  3733 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3734 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3735 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3736 ;;Total ram usage:        0 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    3
  3739 ;; This function calls:
  3740 ;;		Nothing
  3741 ;; This function is called by:
  3742 ;;		_I2C_Read
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text26
  3747  001396                     __ptext26:
  3748                           	opt stack 0
  3749  001396                     _I2C_Ack:
  3750                           	opt stack 25
  3751                           
  3752                           ;i2c.c: 71: ACKDT = 0;
  3753                           
  3754                           ;incstack = 0
  3755  001396  9AC5               	bcf	4037,5,c	;volatile
  3756                           
  3757                           ;i2c.c: 72: ACKEN = 1;
  3758  001398  88C5               	bsf	4037,4,c	;volatile
  3759  00139A  A8C5               	btfss	4037,4,c	;volatile
  3760  00139C  0012               	return	
  3761  00139E  D7FD               	goto	l384
  3762  0013A0                     __end_of_I2C_Ack:
  3763                           	opt stack 0
  3764                           tosu	equ	0xFFF
  3765                           tosh	equ	0xFFE
  3766                           tosl	equ	0xFFD
  3767                           pclath	equ	0xFFA
  3768                           tblptru	equ	0xFF8
  3769                           tblptrh	equ	0xFF7
  3770                           tblptrl	equ	0xFF6
  3771                           tablat	equ	0xFF5
  3772                           prodh	equ	0xFF4
  3773                           prodl	equ	0xFF3
  3774                           intcon	equ	0xFF2
  3775                           postinc0	equ	0xFEE
  3776                           wreg	equ	0xFE8
  3777                           indf1	equ	0xFE7
  3778                           postdec1	equ	0xFE5
  3779                           fsr1h	equ	0xFE2
  3780                           fsr1l	equ	0xFE1
  3781                           indf2	equ	0xFDF
  3782                           postinc2	equ	0xFDE
  3783                           postdec2	equ	0xFDD
  3784                           fsr2h	equ	0xFDA
  3785                           fsr2l	equ	0xFD9
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _lcdInit *****************
  3789 ;; Defined at:
  3790 ;;		line 16 in file "display.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  lcd             2    2[BANK0 ] PTR struct .
  3793 ;;		 -> lcd(33), 
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  1    wreg      void 
  3798 ;; Registers used:
  3799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3805 ;;      Params:         0       2       0       0       0       0       0       0       0
  3806 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3807 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3808 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3809 ;;Total ram usage:        2 bytes
  3810 ;; Hardware stack levels used:    1
  3811 ;; Hardware stack levels required when called:    7
  3812 ;; This function calls:
  3813 ;;		_BusyXLCD
  3814 ;;		_OpenXLCD
  3815 ;;		_WriteCmdXLCD
  3816 ;;		_lcdCleanAll
  3817 ;; This function is called by:
  3818 ;;		_main
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           	psect	text27
  3823  0010A8                     __ptext27:
  3824                           	opt stack 0
  3825  0010A8                     _lcdInit:
  3826                           	opt stack 23
  3827                           
  3828                           ;display.c: 17: TRISD = 0;
  3829                           
  3830                           ;incstack = 0
  3831  0010A8  0E00               	movlw	0
  3832  0010AA  6E95               	movwf	3989,c	;volatile
  3833                           
  3834                           ;display.c: 19: OpenXLCD(0b00101100 & 0b00111000);
  3835  0010AC  0E28               	movlw	40
  3836  0010AE  EC5A  F006         	call	_OpenXLCD
  3837  0010B2  ECD3  F008         	call	_BusyXLCD	;wreg free
  3838  0010B6  0900               	iorlw	0
  3839  0010B8  A4D8               	btfss	status,2,c
  3840  0010BA  D7FB               	goto	l113
  3841                           
  3842                           ;display.c: 21: WriteCmdXLCD(0x06);
  3843  0010BC  0E06               	movlw	6
  3844  0010BE  ECB4  F008         	call	_WriteCmdXLCD
  3845  0010C2  ECD3  F008         	call	_BusyXLCD	;wreg free
  3846  0010C6  0900               	iorlw	0
  3847  0010C8  A4D8               	btfss	status,2,c
  3848  0010CA  D7FB               	goto	l116
  3849                           
  3850                           ;display.c: 23: WriteCmdXLCD(0x0C);
  3851  0010CC  0E0C               	movlw	12
  3852  0010CE  ECB4  F008         	call	_WriteCmdXLCD
  3853  0010D2  ECD3  F008         	call	_BusyXLCD	;wreg free
  3854  0010D6  0900               	iorlw	0
  3855  0010D8  A4D8               	btfss	status,2,c
  3856  0010DA  D7FB               	goto	l119
  3857                           
  3858                           ;display.c: 26: lcdCleanAll(lcd);
  3859  0010DC  C0A9  F0A7         	movff	lcdInit@lcd,lcdCleanAll@lcd
  3860  0010E0  C0AA  F0A8         	movff	lcdInit@lcd+1,lcdCleanAll@lcd+1
  3861  0010E4  ECA6  F009         	call	_lcdCleanAll	;wreg free
  3862  0010E8  0012               	return		;funcret
  3863  0010EA                     __end_of_lcdInit:
  3864                           	opt stack 0
  3865                           tosu	equ	0xFFF
  3866                           tosh	equ	0xFFE
  3867                           tosl	equ	0xFFD
  3868                           pclath	equ	0xFFA
  3869                           tblptru	equ	0xFF8
  3870                           tblptrh	equ	0xFF7
  3871                           tblptrl	equ	0xFF6
  3872                           tablat	equ	0xFF5
  3873                           prodh	equ	0xFF4
  3874                           prodl	equ	0xFF3
  3875                           intcon	equ	0xFF2
  3876                           postinc0	equ	0xFEE
  3877                           wreg	equ	0xFE8
  3878                           indf1	equ	0xFE7
  3879                           postdec1	equ	0xFE5
  3880                           fsr1h	equ	0xFE2
  3881                           fsr1l	equ	0xFE1
  3882                           indf2	equ	0xFDF
  3883                           postinc2	equ	0xFDE
  3884                           postdec2	equ	0xFDD
  3885                           fsr2h	equ	0xFDA
  3886                           fsr2l	equ	0xFD9
  3887                           status	equ	0xFD8
  3888                           
  3889 ;; *************** function _lcdCleanAll *****************
  3890 ;; Defined at:
  3891 ;;		line 46 in file "display.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;  lcd             2    0[BANK0 ] PTR struct .
  3894 ;;		 -> lcd(33), 
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;		None
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      void 
  3899 ;; Registers used:
  3900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3906 ;;      Params:         0       2       0       0       0       0       0       0       0
  3907 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3908 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3909 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3910 ;;Total ram usage:        2 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    6
  3913 ;; This function calls:
  3914 ;;		_lcdClean
  3915 ;;		_lcdMemClean
  3916 ;; This function is called by:
  3917 ;;		_lcdInit
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           	psect	text28
  3922  00134C                     __ptext28:
  3923                           	opt stack 0
  3924  00134C                     _lcdCleanAll:
  3925                           	opt stack 23
  3926                           
  3927                           ;display.c: 47: lcdClean();
  3928                           
  3929                           ;incstack = 0
  3930  00134C  EC5A  F009         	call	_lcdClean	;wreg free
  3931                           
  3932                           ;display.c: 48: lcdMemClean(lcd);
  3933  001350  C0A7  F029         	movff	lcdCleanAll@lcd,lcdMemClean@lcd
  3934  001354  C0A8  F02A         	movff	lcdCleanAll@lcd+1,lcdMemClean@lcd+1
  3935  001358  EC49  F007         	call	_lcdMemClean	;wreg free
  3936  00135C  0012               	return		;funcret
  3937  00135E                     __end_of_lcdCleanAll:
  3938                           	opt stack 0
  3939                           tosu	equ	0xFFF
  3940                           tosh	equ	0xFFE
  3941                           tosl	equ	0xFFD
  3942                           pclath	equ	0xFFA
  3943                           tblptru	equ	0xFF8
  3944                           tblptrh	equ	0xFF7
  3945                           tblptrl	equ	0xFF6
  3946                           tablat	equ	0xFF5
  3947                           prodh	equ	0xFF4
  3948                           prodl	equ	0xFF3
  3949                           intcon	equ	0xFF2
  3950                           postinc0	equ	0xFEE
  3951                           wreg	equ	0xFE8
  3952                           indf1	equ	0xFE7
  3953                           postdec1	equ	0xFE5
  3954                           fsr1h	equ	0xFE2
  3955                           fsr1l	equ	0xFE1
  3956                           indf2	equ	0xFDF
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function _lcdMemClean *****************
  3964 ;; Defined at:
  3965 ;;		line 38 in file "display.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  lcd             2   40[COMRAM] PTR struct .
  3968 ;;		 -> lcd(33), 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  i               1   42[COMRAM] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3980 ;;      Params:         2       0       0       0       0       0       0       0       0
  3981 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3983 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3984 ;;Total ram usage:        3 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    3
  3987 ;; This function calls:
  3988 ;;		Nothing
  3989 ;; This function is called by:
  3990 ;;		_lcdCleanAll
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text29
  3995  000E92                     __ptext29:
  3996                           	opt stack 0
  3997  000E92                     _lcdMemClean:
  3998                           	opt stack 25
  3999                           
  4000                           ;display.c: 39: for (uint8_t i = 0; i < 16; i++) {
  4001                           
  4002                           ;incstack = 0
  4003  000E92  0E00               	movlw	0
  4004  000E94  6E2B               	movwf	lcdMemClean@i,c
  4005  000E96                     l2229:
  4006  000E96  0E0F               	movlw	15
  4007  000E98  642B               	cpfsgt	lcdMemClean@i,c
  4008  000E9A  D001               	goto	l130
  4009  000E9C  D01E               	goto	u1340
  4010  000E9E                     l130:
  4011                           
  4012                           ;display.c: 40: lcd->Memory[0][i] = 0x20;
  4013  000E9E  502B               	movf	lcdMemClean@i,w,c
  4014  000EA0  0D01               	mullw	1
  4015  000EA2  0E01               	movlw	1
  4016  000EA4  26F3               	addwf	prodl,f,c
  4017  000EA6  0E00               	movlw	0
  4018  000EA8  22F4               	addwfc	prodh,f,c
  4019  000EAA  50F3               	movf	prodl,w,c
  4020  000EAC  2429               	addwf	lcdMemClean@lcd,w,c
  4021  000EAE  6ED9               	movwf	fsr2l,c
  4022  000EB0  50F4               	movf	prodh,w,c
  4023  000EB2  202A               	addwfc	lcdMemClean@lcd+1,w,c
  4024  000EB4  6EDA               	movwf	fsr2h,c
  4025  000EB6  0E20               	movlw	32
  4026  000EB8  6EDF               	movwf	indf2,c
  4027                           
  4028                           ;display.c: 41: lcd->Memory[1][i] = 0x20;
  4029  000EBA  502B               	movf	lcdMemClean@i,w,c
  4030  000EBC  0D01               	mullw	1
  4031  000EBE  0E11               	movlw	17
  4032  000EC0  26F3               	addwf	prodl,f,c
  4033  000EC2  0E00               	movlw	0
  4034  000EC4  22F4               	addwfc	prodh,f,c
  4035  000EC6  50F3               	movf	prodl,w,c
  4036  000EC8  2429               	addwf	lcdMemClean@lcd,w,c
  4037  000ECA  6ED9               	movwf	fsr2l,c
  4038  000ECC  50F4               	movf	prodh,w,c
  4039  000ECE  202A               	addwfc	lcdMemClean@lcd+1,w,c
  4040  000ED0  6EDA               	movwf	fsr2h,c
  4041  000ED2  0E20               	movlw	32
  4042  000ED4  6EDF               	movwf	indf2,c
  4043  000ED6  2A2B               	incf	lcdMemClean@i,f,c
  4044  000ED8  D7DE               	goto	l2229
  4045  000EDA                     u1340:
  4046                           
  4047                           ;display.c: 42: }
  4048                           ;display.c: 43: lcd->NeedsRedraw = 1;
  4049  000EDA  C029  FFD9         	movff	lcdMemClean@lcd,fsr2l
  4050  000EDE  C02A  FFDA         	movff	lcdMemClean@lcd+1,fsr2h
  4051  000EE2  0E01               	movlw	1
  4052  000EE4  6EDF               	movwf	indf2,c
  4053  000EE6  0012               	return		;funcret
  4054  000EE8                     __end_of_lcdMemClean:
  4055                           	opt stack 0
  4056                           tosu	equ	0xFFF
  4057                           tosh	equ	0xFFE
  4058                           tosl	equ	0xFFD
  4059                           pclath	equ	0xFFA
  4060                           tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           intcon	equ	0xFF2
  4067                           postinc0	equ	0xFEE
  4068                           wreg	equ	0xFE8
  4069                           indf1	equ	0xFE7
  4070                           postdec1	equ	0xFE5
  4071                           fsr1h	equ	0xFE2
  4072                           fsr1l	equ	0xFE1
  4073                           indf2	equ	0xFDF
  4074                           postinc2	equ	0xFDE
  4075                           postdec2	equ	0xFDD
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _lcdClean *****************
  4081 ;; Defined at:
  4082 ;;		line 30 in file "display.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;		None
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;		None
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4096 ;;      Params:         0       0       0       0       0       0       0       0       0
  4097 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4099 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4100 ;;Total ram usage:        0 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    5
  4103 ;; This function calls:
  4104 ;;		_BusyXLCD
  4105 ;;		_WriteCmdXLCD
  4106 ;;		_delay_ms
  4107 ;; This function is called by:
  4108 ;;		_lcdCleanAll
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           	psect	text30
  4113  0012B4                     __ptext30:
  4114                           	opt stack 0
  4115  0012B4                     _lcdClean:
  4116                           	opt stack 23
  4117                           
  4118                           ;display.c: 31: while (BusyXLCD());
  4119                           
  4120                           ;incstack = 0
  4121  0012B4  ECD3  F008         	call	_BusyXLCD	;wreg free
  4122  0012B8  0900               	iorlw	0
  4123  0012BA  A4D8               	btfss	status,2,c
  4124  0012BC  D7FB               	goto	_lcdClean
  4125                           
  4126                           ;display.c: 32: WriteCmdXLCD(0x01);
  4127  0012BE  0E01               	movlw	1
  4128  0012C0  ECB4  F008         	call	_WriteCmdXLCD
  4129                           
  4130                           ;display.c: 34: delay_ms(80);
  4131  0012C4  0E00               	movlw	0
  4132  0012C6  6E2A               	movwf	delay_ms@milis+1,c
  4133  0012C8  0E50               	movlw	80
  4134  0012CA  6E29               	movwf	delay_ms@milis,c
  4135  0012CC  EC77  F009         	call	_delay_ms	;wreg free
  4136  0012D0  0012               	return		;funcret
  4137  0012D2                     __end_of_lcdClean:
  4138                           	opt stack 0
  4139                           tosu	equ	0xFFF
  4140                           tosh	equ	0xFFE
  4141                           tosl	equ	0xFFD
  4142                           pclath	equ	0xFFA
  4143                           tblptru	equ	0xFF8
  4144                           tblptrh	equ	0xFF7
  4145                           tblptrl	equ	0xFF6
  4146                           tablat	equ	0xFF5
  4147                           prodh	equ	0xFF4
  4148                           prodl	equ	0xFF3
  4149                           intcon	equ	0xFF2
  4150                           postinc0	equ	0xFEE
  4151                           wreg	equ	0xFE8
  4152                           indf1	equ	0xFE7
  4153                           postdec1	equ	0xFE5
  4154                           fsr1h	equ	0xFE2
  4155                           fsr1l	equ	0xFE1
  4156                           indf2	equ	0xFDF
  4157                           postinc2	equ	0xFDE
  4158                           postdec2	equ	0xFDD
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           
  4163 ;; *************** function _OpenXLCD *****************
  4164 ;; Defined at:
  4165 ;;		line 63 in file "xlcd_mod.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;  lcdtype         1    wreg     unsigned char 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  lcdtype         1    0[BANK0 ] unsigned char 
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  1    wreg      void 
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4179 ;;      Params:         0       0       0       0       0       0       0       0       0
  4180 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4182 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4183 ;;Total ram usage:        1 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    5
  4186 ;; This function calls:
  4187 ;;		_BusyXLCD
  4188 ;;		_Delay10KTCYx
  4189 ;;		_DelayPORXLCD
  4190 ;;		_SetDDRamAddr
  4191 ;;		_WriteCmdXLCD
  4192 ;; This function is called by:
  4193 ;;		_lcdInit
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text31
  4198  000CB4                     __ptext31:
  4199                           	opt stack 0
  4200  000CB4                     _OpenXLCD:
  4201                           	opt stack 24
  4202                           
  4203                           ;incstack = 0
  4204                           ;OpenXLCD@lcdtype stored from wreg
  4205  000CB4  0100               	movlb	0	; () banked
  4206  000CB6  6FA7               	movwf	OpenXLCD@lcdtype& (0+255),b
  4207                           
  4208                           ;xlcd_mod.c: 75: PORTD &= 0xf0;
  4209  000CB8  0EF0               	movlw	240
  4210  000CBA  1683               	andwf	3971,f,c	;volatile
  4211                           
  4212                           ;xlcd_mod.c: 76: TRISD &= 0xF0;
  4213  000CBC  0EF0               	movlw	240
  4214  000CBE  1695               	andwf	3989,f,c	;volatile
  4215                           
  4216                           ;xlcd_mod.c: 79: TRISDbits.TRISD5 = 0;
  4217  000CC0  9A95               	bcf	3989,5,c	;volatile
  4218                           
  4219                           ;xlcd_mod.c: 80: TRISDbits.TRISD6 = 0;
  4220  000CC2  9C95               	bcf	3989,6,c	;volatile
  4221                           
  4222                           ;xlcd_mod.c: 81: TRISDbits.TRISD4 = 0;
  4223  000CC4  9895               	bcf	3989,4,c	;volatile
  4224                           
  4225                           ;xlcd_mod.c: 82: LATDbits.LATD5 = 0;
  4226  000CC6  9A8C               	bcf	3980,5,c	;volatile
  4227                           
  4228                           ;xlcd_mod.c: 83: LATDbits.LATD6 = 0;
  4229  000CC8  9C8C               	bcf	3980,6,c	;volatile
  4230                           
  4231                           ;xlcd_mod.c: 84: LATDbits.LATD4 = 0;
  4232  000CCA  988C               	bcf	3980,4,c	;volatile
  4233                           
  4234                           ;xlcd_mod.c: 87: DelayPORXLCD();
  4235  000CCC  ECAF  F009         	call	_DelayPORXLCD	;wreg free
  4236                           
  4237                           ;xlcd_mod.c: 89: WriteCmdXLCD(0x30);
  4238  000CD0  0E30               	movlw	48
  4239  000CD2  ECB4  F008         	call	_WriteCmdXLCD
  4240                           
  4241                           ;xlcd_mod.c: 90: Delay10KTCYx(0x05);
  4242  000CD6  0E05               	movlw	5
  4243  000CD8  EC9B  F009         	call	_Delay10KTCYx
  4244                           
  4245                           ;xlcd_mod.c: 92: WriteCmdXLCD(0x30);
  4246  000CDC  0E30               	movlw	48
  4247  000CDE  ECB4  F008         	call	_WriteCmdXLCD
  4248                           
  4249                           ;xlcd_mod.c: 93: Delay10KTCYx(0x01);
  4250  000CE2  0E01               	movlw	1
  4251  000CE4  EC9B  F009         	call	_Delay10KTCYx
  4252                           
  4253                           ;xlcd_mod.c: 96: WriteCmdXLCD(0x32);
  4254  000CE8  0E32               	movlw	50
  4255  000CEA  ECB4  F008         	call	_WriteCmdXLCD
  4256  000CEE  ECD3  F008         	call	_BusyXLCD	;wreg free
  4257  000CF2  0900               	iorlw	0
  4258  000CF4  A4D8               	btfss	status,2,c
  4259  000CF6  D7FB               	goto	l219
  4260  000CF8                     u2090:
  4261                           
  4262                           ;xlcd_mod.c: 102: while (BusyXLCD());
  4263  000CF8  ECD3  F008         	call	_BusyXLCD	;wreg free
  4264  000CFC  0900               	iorlw	0
  4265  000CFE  A4D8               	btfss	status,2,c
  4266  000D00  D7FB               	goto	u2090
  4267                           
  4268                           ;xlcd_mod.c: 103: WriteCmdXLCD(lcdtype);
  4269  000D02  0100               	movlb	0	; () banked
  4270  000D04  51A7               	movf	OpenXLCD@lcdtype& (0+255),w,b
  4271  000D06  ECB4  F008         	call	_WriteCmdXLCD
  4272  000D0A  ECD3  F008         	call	_BusyXLCD	;wreg free
  4273  000D0E  0900               	iorlw	0
  4274  000D10  A4D8               	btfss	status,2,c
  4275  000D12  D7FB               	goto	l225
  4276                           
  4277                           ;xlcd_mod.c: 107: WriteCmdXLCD(0b00001011 & 0b00001101 & 0b00001110);
  4278  000D14  0E08               	movlw	8
  4279  000D16  ECB4  F008         	call	_WriteCmdXLCD
  4280  000D1A  ECD3  F008         	call	_BusyXLCD	;wreg free
  4281  000D1E  0900               	iorlw	0
  4282  000D20  A4D8               	btfss	status,2,c
  4283  000D22  D7FB               	goto	l228
  4284                           
  4285                           ;xlcd_mod.c: 109: WriteCmdXLCD(0b00001111 & 0b00001111 & 0b00001111);
  4286  000D24  0E0F               	movlw	15
  4287  000D26  ECB4  F008         	call	_WriteCmdXLCD
  4288  000D2A  ECD3  F008         	call	_BusyXLCD	;wreg free
  4289  000D2E  0900               	iorlw	0
  4290  000D30  A4D8               	btfss	status,2,c
  4291  000D32  D7FB               	goto	l231
  4292                           
  4293                           ;xlcd_mod.c: 113: WriteCmdXLCD(0x01);
  4294  000D34  0E01               	movlw	1
  4295  000D36  ECB4  F008         	call	_WriteCmdXLCD
  4296  000D3A  ECD3  F008         	call	_BusyXLCD	;wreg free
  4297  000D3E  0900               	iorlw	0
  4298  000D40  A4D8               	btfss	status,2,c
  4299  000D42  D7FB               	goto	l234
  4300                           
  4301                           ;xlcd_mod.c: 117: WriteCmdXLCD(0b00000100);
  4302  000D44  0E04               	movlw	4
  4303  000D46  ECB4  F008         	call	_WriteCmdXLCD
  4304  000D4A  ECD3  F008         	call	_BusyXLCD	;wreg free
  4305  000D4E  0900               	iorlw	0
  4306  000D50  A4D8               	btfss	status,2,c
  4307  000D52  D7FB               	goto	l237
  4308                           
  4309                           ;xlcd_mod.c: 121: SetDDRamAddr(0x80);
  4310  000D54  0E80               	movlw	128
  4311  000D56  EC9E  F007         	call	_SetDDRamAddr
  4312  000D5A  0012               	return	
  4313  000D5C                     __end_of_OpenXLCD:
  4314                           	opt stack 0
  4315                           tosu	equ	0xFFF
  4316                           tosh	equ	0xFFE
  4317                           tosl	equ	0xFFD
  4318                           pclath	equ	0xFFA
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           postinc0	equ	0xFEE
  4327                           wreg	equ	0xFE8
  4328                           indf1	equ	0xFE7
  4329                           postdec1	equ	0xFE5
  4330                           fsr1h	equ	0xFE2
  4331                           fsr1l	equ	0xFE1
  4332                           indf2	equ	0xFDF
  4333                           postinc2	equ	0xFDE
  4334                           postdec2	equ	0xFDD
  4335                           fsr2h	equ	0xFDA
  4336                           fsr2l	equ	0xFD9
  4337                           status	equ	0xFD8
  4338                           
  4339 ;; *************** function _WriteCmdXLCD *****************
  4340 ;; Defined at:
  4341 ;;		line 315 in file "xlcd_mod.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;  cmd             1    wreg     unsigned char 
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;  cmd             1   42[COMRAM] unsigned char 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      void 
  4348 ;; Registers used:
  4349 ;;		wreg, status,2, status,0, cstack
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4355 ;;      Params:         0       0       0       0       0       0       0       0       0
  4356 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4358 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4359 ;;Total ram usage:        1 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    4
  4362 ;; This function calls:
  4363 ;;		_DelayFor18TCY
  4364 ;; This function is called by:
  4365 ;;		_lcdInit
  4366 ;;		_lcdClean
  4367 ;;		_OpenXLCD
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text32
  4372  001168                     __ptext32:
  4373                           	opt stack 0
  4374  001168                     _WriteCmdXLCD:
  4375                           	opt stack 23
  4376                           
  4377                           ;incstack = 0
  4378                           ;WriteCmdXLCD@cmd stored from wreg
  4379  001168  6E2B               	movwf	WriteCmdXLCD@cmd,c
  4380                           
  4381                           ;xlcd_mod.c: 334: TRISD &= 0xf0;
  4382  00116A  0EF0               	movlw	240
  4383  00116C  1695               	andwf	3989,f,c	;volatile
  4384                           
  4385                           ;xlcd_mod.c: 335: PORTD &= 0xf0;
  4386  00116E  0EF0               	movlw	240
  4387  001170  1683               	andwf	3971,f,c	;volatile
  4388                           
  4389                           ;xlcd_mod.c: 336: PORTD |= (cmd >> 4)&0x0f;
  4390  001172  382B               	swapf	WriteCmdXLCD@cmd,w,c
  4391  001174  0B0F               	andlw	15
  4392  001176  0B0F               	andlw	15
  4393  001178  1283               	iorwf	3971,f,c	;volatile
  4394                           
  4395                           ;xlcd_mod.c: 338: LATDbits.LATD5 = 0;
  4396  00117A  9A8C               	bcf	3980,5,c	;volatile
  4397                           
  4398                           ;xlcd_mod.c: 339: LATDbits.LATD6 = 0;
  4399  00117C  9C8C               	bcf	3980,6,c	;volatile
  4400                           
  4401                           ;xlcd_mod.c: 340: DelayFor18TCY();
  4402  00117E  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4403                           
  4404                           ;xlcd_mod.c: 341: LATDbits.LATD4 = 1;
  4405  001182  888C               	bsf	3980,4,c	;volatile
  4406                           
  4407                           ;xlcd_mod.c: 342: DelayFor18TCY();
  4408  001184  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4409                           
  4410                           ;xlcd_mod.c: 343: LATDbits.LATD4 = 0;
  4411  001188  988C               	bcf	3980,4,c	;volatile
  4412                           
  4413                           ;xlcd_mod.c: 348: PORTD &= 0xf0;
  4414  00118A  0EF0               	movlw	240
  4415  00118C  1683               	andwf	3971,f,c	;volatile
  4416                           
  4417                           ;xlcd_mod.c: 349: PORTD |= cmd & 0x0f;
  4418  00118E  502B               	movf	WriteCmdXLCD@cmd,w,c
  4419  001190  0B0F               	andlw	15
  4420  001192  1283               	iorwf	3971,f,c	;volatile
  4421                           
  4422                           ;xlcd_mod.c: 351: DelayFor18TCY();
  4423  001194  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4424                           
  4425                           ;xlcd_mod.c: 352: LATDbits.LATD4 = 1;
  4426  001198  888C               	bsf	3980,4,c	;volatile
  4427                           
  4428                           ;xlcd_mod.c: 353: DelayFor18TCY();
  4429  00119A  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4430                           
  4431                           ;xlcd_mod.c: 354: LATDbits.LATD4 = 0;
  4432  00119E  988C               	bcf	3980,4,c	;volatile
  4433                           
  4434                           ;xlcd_mod.c: 358: TRISD |= 0x0f;
  4435  0011A0  0E0F               	movlw	15
  4436  0011A2  1295               	iorwf	3989,f,c	;volatile
  4437  0011A4  0012               	return	
  4438  0011A6                     __end_of_WriteCmdXLCD:
  4439                           	opt stack 0
  4440                           tosu	equ	0xFFF
  4441                           tosh	equ	0xFFE
  4442                           tosl	equ	0xFFD
  4443                           pclath	equ	0xFFA
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           prodh	equ	0xFF4
  4449                           prodl	equ	0xFF3
  4450                           intcon	equ	0xFF2
  4451                           postinc0	equ	0xFEE
  4452                           wreg	equ	0xFE8
  4453                           indf1	equ	0xFE7
  4454                           postdec1	equ	0xFE5
  4455                           fsr1h	equ	0xFE2
  4456                           fsr1l	equ	0xFE1
  4457                           indf2	equ	0xFDF
  4458                           postinc2	equ	0xFDE
  4459                           postdec2	equ	0xFDD
  4460                           fsr2h	equ	0xFDA
  4461                           fsr2l	equ	0xFD9
  4462                           status	equ	0xFD8
  4463                           
  4464 ;; *************** function _SetDDRamAddr *****************
  4465 ;; Defined at:
  4466 ;;		line 266 in file "xlcd_mod.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;  DDaddr          1    wreg     unsigned char 
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  DDaddr          1   45[COMRAM] unsigned char 
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      void 
  4473 ;; Registers used:
  4474 ;;		wreg, status,2, status,0, cstack
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4480 ;;      Params:         0       0       0       0       0       0       0       0       0
  4481 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4482 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4483 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4484 ;;Total ram usage:        4 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    4
  4487 ;; This function calls:
  4488 ;;		_DelayFor18TCY
  4489 ;; This function is called by:
  4490 ;;		_lcdRuntime
  4491 ;;		_OpenXLCD
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text33
  4496  000F3C                     __ptext33:
  4497                           	opt stack 0
  4498  000F3C                     _SetDDRamAddr:
  4499                           	opt stack 24
  4500                           
  4501                           ;incstack = 0
  4502                           ;SetDDRamAddr@DDaddr stored from wreg
  4503  000F3C  6E2E               	movwf	SetDDRamAddr@DDaddr,c
  4504                           
  4505                           ;xlcd_mod.c: 285: TRISD &= 0xf0;
  4506  000F3E  0EF0               	movlw	240
  4507  000F40  1695               	andwf	3989,f,c	;volatile
  4508                           
  4509                           ;xlcd_mod.c: 286: PORTD &= 0xf0;
  4510  000F42  0EF0               	movlw	240
  4511  000F44  1683               	andwf	3971,f,c	;volatile
  4512                           
  4513                           ;xlcd_mod.c: 287: PORTD |= (((DDaddr | 0b10000000) >> 4) & 0x0f);
  4514  000F46  502E               	movf	SetDDRamAddr@DDaddr,w,c
  4515  000F48  6E2B               	movwf	??_SetDDRamAddr& (0+255),c
  4516  000F4A  6A2C               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  4517  000F4C  8E2B               	bsf	??_SetDDRamAddr,7,c
  4518  000F4E  0E04               	movlw	4
  4519  000F50  6E2D               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  4520  000F52                     u2085:
  4521  000F52  342C               	rlcf	??_SetDDRamAddr+1,w,c
  4522  000F54  322C               	rrcf	??_SetDDRamAddr+1,f,c
  4523  000F56  322B               	rrcf	??_SetDDRamAddr,f,c
  4524  000F58  2E2D               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  4525  000F5A  D7FB               	goto	u2085
  4526  000F5C  502B               	movf	??_SetDDRamAddr,w,c
  4527  000F5E  0B0F               	andlw	15
  4528  000F60  1283               	iorwf	3971,f,c	;volatile
  4529                           
  4530                           ;xlcd_mod.c: 289: LATDbits.LATD5 = 0;
  4531  000F62  9A8C               	bcf	3980,5,c	;volatile
  4532                           
  4533                           ;xlcd_mod.c: 290: LATDbits.LATD6 = 0;
  4534  000F64  9C8C               	bcf	3980,6,c	;volatile
  4535                           
  4536                           ;xlcd_mod.c: 291: DelayFor18TCY();
  4537  000F66  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4538                           
  4539                           ;xlcd_mod.c: 292: LATDbits.LATD4 = 1;
  4540  000F6A  888C               	bsf	3980,4,c	;volatile
  4541                           
  4542                           ;xlcd_mod.c: 293: DelayFor18TCY();
  4543  000F6C  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4544                           
  4545                           ;xlcd_mod.c: 294: LATDbits.LATD4 = 0;
  4546  000F70  988C               	bcf	3980,4,c	;volatile
  4547                           
  4548                           ;xlcd_mod.c: 299: PORTD &= 0xf0;
  4549  000F72  0EF0               	movlw	240
  4550  000F74  1683               	andwf	3971,f,c	;volatile
  4551                           
  4552                           ;xlcd_mod.c: 300: PORTD |= (DDaddr & 0x0f);
  4553  000F76  502E               	movf	SetDDRamAddr@DDaddr,w,c
  4554  000F78  0B0F               	andlw	15
  4555  000F7A  1283               	iorwf	3971,f,c	;volatile
  4556                           
  4557                           ;xlcd_mod.c: 302: DelayFor18TCY();
  4558  000F7C  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4559                           
  4560                           ;xlcd_mod.c: 303: LATDbits.LATD4 = 1;
  4561  000F80  888C               	bsf	3980,4,c	;volatile
  4562                           
  4563                           ;xlcd_mod.c: 304: DelayFor18TCY();
  4564  000F82  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4565                           
  4566                           ;xlcd_mod.c: 305: LATDbits.LATD4 = 0;
  4567  000F86  988C               	bcf	3980,4,c	;volatile
  4568                           
  4569                           ;xlcd_mod.c: 309: TRISD |= 0x0f;
  4570  000F88  0E0F               	movlw	15
  4571  000F8A  1295               	iorwf	3989,f,c	;volatile
  4572  000F8C  0012               	return	
  4573  000F8E                     __end_of_SetDDRamAddr:
  4574                           	opt stack 0
  4575                           tosu	equ	0xFFF
  4576                           tosh	equ	0xFFE
  4577                           tosl	equ	0xFFD
  4578                           pclath	equ	0xFFA
  4579                           tblptru	equ	0xFF8
  4580                           tblptrh	equ	0xFF7
  4581                           tblptrl	equ	0xFF6
  4582                           tablat	equ	0xFF5
  4583                           prodh	equ	0xFF4
  4584                           prodl	equ	0xFF3
  4585                           intcon	equ	0xFF2
  4586                           postinc0	equ	0xFEE
  4587                           wreg	equ	0xFE8
  4588                           indf1	equ	0xFE7
  4589                           postdec1	equ	0xFE5
  4590                           fsr1h	equ	0xFE2
  4591                           fsr1l	equ	0xFE1
  4592                           indf2	equ	0xFDF
  4593                           postinc2	equ	0xFDE
  4594                           postdec2	equ	0xFDD
  4595                           fsr2h	equ	0xFDA
  4596                           fsr2l	equ	0xFD9
  4597                           status	equ	0xFD8
  4598                           
  4599 ;; *************** function _DelayPORXLCD *****************
  4600 ;; Defined at:
  4601 ;;		line 108 in file "display.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      void 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2, status,0, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4615 ;;      Params:         0       0       0       0       0       0       0       0       0
  4616 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4617 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4618 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4619 ;;Total ram usage:        0 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    4
  4622 ;; This function calls:
  4623 ;;		_delay_ms
  4624 ;; This function is called by:
  4625 ;;		_OpenXLCD
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text34
  4630  00135E                     __ptext34:
  4631                           	opt stack 0
  4632  00135E                     _DelayPORXLCD:
  4633                           	opt stack 24
  4634                           
  4635                           ;display.c: 109: delay_ms(60);
  4636                           
  4637                           ;incstack = 0
  4638  00135E  0E00               	movlw	0
  4639  001360  6E2A               	movwf	delay_ms@milis+1,c
  4640  001362  0E3C               	movlw	60
  4641  001364  6E29               	movwf	delay_ms@milis,c
  4642  001366  EC77  F009         	call	_delay_ms	;wreg free
  4643  00136A  0012               	return		;funcret
  4644  00136C                     __end_of_DelayPORXLCD:
  4645                           	opt stack 0
  4646                           tosu	equ	0xFFF
  4647                           tosh	equ	0xFFE
  4648                           tosl	equ	0xFFD
  4649                           pclath	equ	0xFFA
  4650                           tblptru	equ	0xFF8
  4651                           tblptrh	equ	0xFF7
  4652                           tblptrl	equ	0xFF6
  4653                           tablat	equ	0xFF5
  4654                           prodh	equ	0xFF4
  4655                           prodl	equ	0xFF3
  4656                           intcon	equ	0xFF2
  4657                           postinc0	equ	0xFEE
  4658                           wreg	equ	0xFE8
  4659                           indf1	equ	0xFE7
  4660                           postdec1	equ	0xFE5
  4661                           fsr1h	equ	0xFE2
  4662                           fsr1l	equ	0xFE1
  4663                           indf2	equ	0xFDF
  4664                           postinc2	equ	0xFDE
  4665                           postdec2	equ	0xFDD
  4666                           fsr2h	equ	0xFDA
  4667                           fsr2l	equ	0xFD9
  4668                           status	equ	0xFD8
  4669                           
  4670 ;; *************** function _delay_ms *****************
  4671 ;; Defined at:
  4672 ;;		line 114 in file "main.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;  milis           2   40[COMRAM] unsigned int 
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;  t               1   44[COMRAM] unsigned char 
  4677 ;; Return value:  Size  Location     Type
  4678 ;;                  1    wreg      void 
  4679 ;; Registers used:
  4680 ;;		wreg, status,2, status,0
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4686 ;;      Params:         2       0       0       0       0       0       0       0       0
  4687 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4688 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4689 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4690 ;;Total ram usage:        5 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:    3
  4693 ;; This function calls:
  4694 ;;		Nothing
  4695 ;; This function is called by:
  4696 ;;		_lcdClean
  4697 ;;		_DelayPORXLCD
  4698 ;;		_DelayXLCD
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text35
  4703  0012EE                     __ptext35:
  4704                           	opt stack 0
  4705  0012EE                     _delay_ms:
  4706                           	opt stack 24
  4707                           
  4708                           ;main.c: 116: uint8_t t;
  4709                           ;main.c: 117: for (t = 0; t < milis; t++) {
  4710                           
  4711                           ;incstack = 0
  4712  0012EE  0E00               	movlw	0
  4713  0012F0  6E2D               	movwf	delay_ms@t,c
  4714  0012F2  D001               	goto	l90
  4715  0012F4                     
  4716                           ;main.c: 118: ;
  4717  0012F4  2A2D               	incf	delay_ms@t,f,c
  4718  0012F6                     l90:
  4719  0012F6  502D               	movf	delay_ms@t,w,c
  4720  0012F8  6E2B               	movwf	??_delay_ms& (0+255),c
  4721  0012FA  6A2C               	clrf	(??_delay_ms+1)& (0+255),c
  4722  0012FC  5029               	movf	delay_ms@milis,w,c
  4723  0012FE  5C2B               	subwf	??_delay_ms,w,c
  4724  001300  502A               	movf	delay_ms@milis+1,w,c
  4725  001302  582C               	subwfb	??_delay_ms+1,w,c
  4726  001304  B0D8               	btfsc	status,0,c
  4727  001306  0012               	return	
  4728  001308  D7F5               	goto	l91
  4729  00130A                     __end_of_delay_ms:
  4730                           	opt stack 0
  4731                           tosu	equ	0xFFF
  4732                           tosh	equ	0xFFE
  4733                           tosl	equ	0xFFD
  4734                           pclath	equ	0xFFA
  4735                           tblptru	equ	0xFF8
  4736                           tblptrh	equ	0xFF7
  4737                           tblptrl	equ	0xFF6
  4738                           tablat	equ	0xFF5
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           intcon	equ	0xFF2
  4742                           postinc0	equ	0xFEE
  4743                           wreg	equ	0xFE8
  4744                           indf1	equ	0xFE7
  4745                           postdec1	equ	0xFE5
  4746                           fsr1h	equ	0xFE2
  4747                           fsr1l	equ	0xFE1
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function _Delay10KTCYx *****************
  4756 ;; Defined at:
  4757 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\d10ktcyx.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;  unit            1    wreg     unsigned char 
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;  unit            1   41[COMRAM] unsigned char 
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		wreg
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4771 ;;      Params:         0       0       0       0       0       0       0       0       0
  4772 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4773 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4774 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4775 ;;Total ram usage:        2 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    3
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		_OpenXLCD
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text36
  4786  001336                     __ptext36:
  4787                           	opt stack 0
  4788  001336                     _Delay10KTCYx:
  4789                           	opt stack 25
  4790                           
  4791                           ;incstack = 0
  4792                           ;Delay10KTCYx@unit stored from wreg
  4793  001336  6E2A               	movwf	Delay10KTCYx@unit,c
  4794  001338                     l717:
  4795  001338  0E0D               	movlw	13
  4796  00133A  6E29               	movwf	??_Delay10KTCYx& (0+255),c
  4797  00133C  0EFC               	movlw	252
  4798  00133E                     u2367:
  4799  00133E  2EE8               	decfsz	wreg,f,c
  4800  001340  D7FE               	bra	u2367
  4801  001342  2E29               	decfsz	??_Delay10KTCYx& (0+255),f,c
  4802  001344  D7FC               	bra	u2367
  4803  001346  2E2A               	decfsz	Delay10KTCYx@unit,f,c
  4804  001348  D7F7               	goto	l717
  4805  00134A  0012               	return	
  4806  00134C                     __end_of_Delay10KTCYx:
  4807                           	opt stack 0
  4808                           tosu	equ	0xFFF
  4809                           tosh	equ	0xFFE
  4810                           tosl	equ	0xFFD
  4811                           pclath	equ	0xFFA
  4812                           tblptru	equ	0xFF8
  4813                           tblptrh	equ	0xFF7
  4814                           tblptrl	equ	0xFF6
  4815                           tablat	equ	0xFF5
  4816                           prodh	equ	0xFF4
  4817                           prodl	equ	0xFF3
  4818                           intcon	equ	0xFF2
  4819                           postinc0	equ	0xFEE
  4820                           wreg	equ	0xFE8
  4821                           indf1	equ	0xFE7
  4822                           postdec1	equ	0xFE5
  4823                           fsr1h	equ	0xFE2
  4824                           fsr1l	equ	0xFE1
  4825                           indf2	equ	0xFDF
  4826                           postinc2	equ	0xFDE
  4827                           postdec2	equ	0xFDD
  4828                           fsr2h	equ	0xFDA
  4829                           fsr2l	equ	0xFD9
  4830                           status	equ	0xFD8
  4831                           
  4832 ;; *************** function _BusyXLCD *****************
  4833 ;; Defined at:
  4834 ;;		line 6 in file "xlcd_mod.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;		None
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;		None
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  1    wreg      unsigned char 
  4841 ;; Registers used:
  4842 ;;		wreg, status,2, status,0, cstack
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4848 ;;      Params:         0       0       0       0       0       0       0       0       0
  4849 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4851 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4852 ;;Total ram usage:        0 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    4
  4855 ;; This function calls:
  4856 ;;		_DelayFor18TCY
  4857 ;; This function is called by:
  4858 ;;		_lcdInit
  4859 ;;		_lcdClean
  4860 ;;		_lcdRuntime
  4861 ;;		_OpenXLCD
  4862 ;;		_putrsXLCD
  4863 ;;		_putsXLCD
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           	psect	text37
  4868  0011A6                     __ptext37:
  4869                           	opt stack 0
  4870  0011A6                     _BusyXLCD:
  4871                           	opt stack 24
  4872                           
  4873                           ;xlcd_mod.c: 8: LATDbits.LATD5 = 1;
  4874                           
  4875                           ;incstack = 0
  4876  0011A6  8A8C               	bsf	3980,5,c	;volatile
  4877                           
  4878                           ;xlcd_mod.c: 9: LATDbits.LATD6 = 0;
  4879  0011A8  9C8C               	bcf	3980,6,c	;volatile
  4880                           
  4881                           ;xlcd_mod.c: 10: DelayFor18TCY();
  4882  0011AA  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4883                           
  4884                           ;xlcd_mod.c: 11: LATDbits.LATD4 = 1;
  4885  0011AE  888C               	bsf	3980,4,c	;volatile
  4886                           
  4887                           ;xlcd_mod.c: 12: DelayFor18TCY();
  4888  0011B0  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4889                           
  4890                           ;xlcd_mod.c: 29: if (PORTD & 0x08)
  4891  0011B4  A683               	btfss	3971,3,c	;volatile
  4892  0011B6  D00A               	goto	l204
  4893                           
  4894                           ;xlcd_mod.c: 31: {
  4895                           ;xlcd_mod.c: 32: LATDbits.LATD4 = 0;
  4896  0011B8  988C               	bcf	3980,4,c	;volatile
  4897                           
  4898                           ;xlcd_mod.c: 33: DelayFor18TCY();
  4899  0011BA  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4900                           
  4901                           ;xlcd_mod.c: 34: LATDbits.LATD4 = 1;
  4902  0011BE  888C               	bsf	3980,4,c	;volatile
  4903                           
  4904                           ;xlcd_mod.c: 35: DelayFor18TCY();
  4905  0011C0  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4906                           
  4907                           ;xlcd_mod.c: 36: LATDbits.LATD4 = 0;
  4908  0011C4  988C               	bcf	3980,4,c	;volatile
  4909                           
  4910                           ;xlcd_mod.c: 37: LATDbits.LATD5 = 0;
  4911  0011C6  9A8C               	bcf	3980,5,c	;volatile
  4912                           
  4913                           ;xlcd_mod.c: 38: return 1;
  4914  0011C8  0E01               	movlw	1
  4915                           
  4916                           ;xlcd_mod.c: 39: } else
  4917  0011CA  0012               	return	
  4918  0011CC                     l204:
  4919                           
  4920                           ;xlcd_mod.c: 40: {
  4921                           ;xlcd_mod.c: 41: LATDbits.LATD4 = 0;
  4922  0011CC  988C               	bcf	3980,4,c	;volatile
  4923                           
  4924                           ;xlcd_mod.c: 42: DelayFor18TCY();
  4925  0011CE  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4926                           
  4927                           ;xlcd_mod.c: 43: LATDbits.LATD4 = 1;
  4928  0011D2  888C               	bsf	3980,4,c	;volatile
  4929                           
  4930                           ;xlcd_mod.c: 44: DelayFor18TCY();
  4931  0011D4  EC2C  F009         	call	_DelayFor18TCY	;wreg free
  4932                           
  4933                           ;xlcd_mod.c: 45: LATDbits.LATD4 = 0;
  4934  0011D8  988C               	bcf	3980,4,c	;volatile
  4935                           
  4936                           ;xlcd_mod.c: 46: LATDbits.LATD5 = 0;
  4937  0011DA  9A8C               	bcf	3980,5,c	;volatile
  4938                           
  4939                           ;xlcd_mod.c: 47: return 0;
  4940  0011DC  0E00               	movlw	0
  4941  0011DE  0012               	return	
  4942  0011E0                     __end_of_BusyXLCD:
  4943                           	opt stack 0
  4944                           tosu	equ	0xFFF
  4945                           tosh	equ	0xFFE
  4946                           tosl	equ	0xFFD
  4947                           pclath	equ	0xFFA
  4948                           tblptru	equ	0xFF8
  4949                           tblptrh	equ	0xFF7
  4950                           tblptrl	equ	0xFF6
  4951                           tablat	equ	0xFF5
  4952                           prodh	equ	0xFF4
  4953                           prodl	equ	0xFF3
  4954                           intcon	equ	0xFF2
  4955                           postinc0	equ	0xFEE
  4956                           wreg	equ	0xFE8
  4957                           indf1	equ	0xFE7
  4958                           postdec1	equ	0xFE5
  4959                           fsr1h	equ	0xFE2
  4960                           fsr1l	equ	0xFE1
  4961                           indf2	equ	0xFDF
  4962                           postinc2	equ	0xFDE
  4963                           postdec2	equ	0xFDD
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968 ;; *************** function _DelayFor18TCY *****************
  4969 ;; Defined at:
  4970 ;;		line 102 in file "display.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;		None
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  i               2   40[COMRAM] int 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  1    wreg      void 
  4977 ;; Registers used:
  4978 ;;		wreg, status,2, status,0
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4984 ;;      Params:         0       0       0       0       0       0       0       0       0
  4985 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4987 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4988 ;;Total ram usage:        2 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    3
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_BusyXLCD
  4995 ;;		_SetDDRamAddr
  4996 ;;		_WriteCmdXLCD
  4997 ;;		_WriteDataXLCD
  4998 ;;		_ReadAddrXLCD
  4999 ;;		_ReadDataXLCD
  5000 ;;		_SetCGRamAddr
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           	psect	text38
  5005  001258                     __ptext38:
  5006                           	opt stack 0
  5007  001258                     _DelayFor18TCY:
  5008                           	opt stack 24
  5009                           
  5010                           ;display.c: 103: for (int i = 0; i < 18; i++) {
  5011                           
  5012                           ;incstack = 0
  5013  001258  0E00               	movlw	0
  5014  00125A  6E2A               	movwf	DelayFor18TCY@i+1,c
  5015  00125C  0E00               	movlw	0
  5016  00125E  6E29               	movwf	DelayFor18TCY@i,c
  5017  001260                     l2711:
  5018  001260  BE2A               	btfsc	DelayFor18TCY@i+1,7,c
  5019  001262  D006               	goto	l172
  5020  001264  502A               	movf	DelayFor18TCY@i+1,w,c
  5021  001266  E107               	bnz	l175
  5022  001268  0E12               	movlw	18
  5023  00126A  5C29               	subwf	DelayFor18TCY@i,w,c
  5024  00126C  B0D8               	btfsc	status,0,c
  5025  00126E  0012               	return	
  5026  001270                     l172:
  5027                           
  5028                           ;display.c: 104: continue;
  5029  001270  4A29               	infsnz	DelayFor18TCY@i,f,c
  5030  001272  2A2A               	incf	DelayFor18TCY@i+1,f,c
  5031  001274  D7F5               	goto	l2711
  5032  001276                     l175:
  5033  001276  0012               	return		;funcret
  5034  001278                     __end_of_DelayFor18TCY:
  5035                           	opt stack 0
  5036                           tosu	equ	0xFFF
  5037                           tosh	equ	0xFFE
  5038                           tosl	equ	0xFFD
  5039                           pclath	equ	0xFFA
  5040                           tblptru	equ	0xFF8
  5041                           tblptrh	equ	0xFF7
  5042                           tblptrl	equ	0xFF6
  5043                           tablat	equ	0xFF5
  5044                           prodh	equ	0xFF4
  5045                           prodl	equ	0xFF3
  5046                           intcon	equ	0xFF2
  5047                           postinc0	equ	0xFEE
  5048                           wreg	equ	0xFE8
  5049                           indf1	equ	0xFE7
  5050                           postdec1	equ	0xFE5
  5051                           fsr1h	equ	0xFE2
  5052                           fsr1l	equ	0xFE1
  5053                           indf2	equ	0xFDF
  5054                           postinc2	equ	0xFDE
  5055                           postdec2	equ	0xFDD
  5056                           fsr2h	equ	0xFDA
  5057                           fsr2l	equ	0xFD9
  5058                           status	equ	0xFD8
  5059                           
  5060 ;; *************** function _ISR_LP *****************
  5061 ;; Defined at:
  5062 ;;		line 45 in file "main.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;		None
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;		None
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      void 
  5069 ;; Registers used:
  5070 ;;		wreg, status,2, status,0, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5076 ;;      Params:         0       0       0       0       0       0       0       0       0
  5077 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5078 ;;      Temps:         22       0       0       0       0       0       0       0       0
  5079 ;;      Totals:        22       0       0       0       0       0       0       0       0
  5080 ;;Total ram usage:       22 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    2
  5083 ;; This function calls:
  5084 ;;		i1_menuDraw
  5085 ;; This function is called by:
  5086 ;;		Interrupt level 1
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	intcodelo
  5091  000018                     __pintcodelo:
  5092                           	opt stack 0
  5093  000018                     _ISR_LP:
  5094                           	opt stack 23
  5095                           
  5096                           ;incstack = 0
  5097  000018  8037               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5098  00001A  CFD8 F014          	movff	status,??_ISR_LP+1
  5099  00001E  CFE8 F015          	movff	wreg,??_ISR_LP+2
  5100  000022  CFE0 F016          	movff	bsr,??_ISR_LP+3
  5101  000026  CFFA F017          	movff	pclath,??_ISR_LP+4
  5102  00002A  CFFB F018          	movff	pclatu,??_ISR_LP+5
  5103  00002E  CFE9 F019          	movff	fsr0l,??_ISR_LP+6
  5104  000032  CFEA F01A          	movff	fsr0h,??_ISR_LP+7
  5105  000036  CFE1 F01B          	movff	fsr1l,??_ISR_LP+8
  5106  00003A  CFE2 F01C          	movff	fsr1h,??_ISR_LP+9
  5107  00003E  CFD9 F01D          	movff	fsr2l,??_ISR_LP+10
  5108  000042  CFDA F01E          	movff	fsr2h,??_ISR_LP+11
  5109  000046  CFF3 F01F          	movff	prodl,??_ISR_LP+12
  5110  00004A  CFF4 F020          	movff	prodh,??_ISR_LP+13
  5111  00004E  CFF6 F021          	movff	tblptrl,??_ISR_LP+14
  5112  000052  CFF7 F022          	movff	tblptrh,??_ISR_LP+15
  5113  000056  CFF8 F023          	movff	tblptru,??_ISR_LP+16
  5114  00005A  CFF5 F024          	movff	tablat,??_ISR_LP+17
  5115  00005E  C037  F025         	movff	btemp,??_ISR_LP+18
  5116  000062  C038  F026         	movff	btemp+1,??_ISR_LP+19
  5117  000066  C039  F027         	movff	btemp+2,??_ISR_LP+20
  5118  00006A  C03A  F028         	movff	btemp+3,??_ISR_LP+21
  5119                           
  5120                           ;main.c: 47: if (TMR1IF) {
  5121  00006E  A09E               	btfss	3998,0,c	;volatile
  5122  000070  D012               	goto	i1l75
  5123                           
  5124                           ;main.c: 48: TMR1IF = 0;
  5125  000072  909E               	bcf	3998,0,c	;volatile
  5126                           
  5127                           ;main.c: 49: TMR1H = 0x63;
  5128  000074  0E63               	movlw	99
  5129  000076  6ECF               	movwf	4047,c	;volatile
  5130                           
  5131                           ;main.c: 50: TMR1L = 0xC0;
  5132  000078  0EC0               	movlw	192
  5133  00007A  6ECE               	movwf	4046,c	;volatile
  5134                           
  5135                           ;main.c: 53: PORTCbits.RC0 = !PORTCbits.RC0;
  5136  00007C  B082               	btfsc	3970,0,c	;volatile
  5137  00007E  D003               	goto	i1u79_20
  5138  000080  6A13               	clrf	??_ISR_LP& (0+255),c
  5139  000082  2A13               	incf	??_ISR_LP& (0+255),f,c
  5140  000084  D001               	goto	i1u80_28
  5141  000086                     i1u79_20:
  5142  000086  6A13               	clrf	??_ISR_LP& (0+255),c
  5143  000088                     i1u80_28:
  5144  000088  5082               	movf	3970,w,c	;volatile
  5145  00008A  1813               	xorwf	??_ISR_LP,w,c
  5146  00008C  0BFE               	andlw	-2
  5147  00008E  1813               	xorwf	??_ISR_LP,w,c
  5148  000090  6E82               	movwf	3970,c	;volatile
  5149                           
  5150                           ;main.c: 54: menuDraw();
  5151  000092  ECDA  F009         	call	i1_menuDraw	;wreg free
  5152  000096                     i1l75:
  5153  000096  C028  F03A         	movff	??_ISR_LP+21,btemp+3
  5154  00009A  C027  F039         	movff	??_ISR_LP+20,btemp+2
  5155  00009E  C026  F038         	movff	??_ISR_LP+19,btemp+1
  5156  0000A2  C025  F037         	movff	??_ISR_LP+18,btemp
  5157  0000A6  C024  FFF5         	movff	??_ISR_LP+17,tablat
  5158  0000AA  C023  FFF8         	movff	??_ISR_LP+16,tblptru
  5159  0000AE  C022  FFF7         	movff	??_ISR_LP+15,tblptrh
  5160  0000B2  C021  FFF6         	movff	??_ISR_LP+14,tblptrl
  5161  0000B6  C020  FFF4         	movff	??_ISR_LP+13,prodh
  5162  0000BA  C01F  FFF3         	movff	??_ISR_LP+12,prodl
  5163  0000BE  C01E  FFDA         	movff	??_ISR_LP+11,fsr2h
  5164  0000C2  C01D  FFD9         	movff	??_ISR_LP+10,fsr2l
  5165  0000C6  C01C  FFE2         	movff	??_ISR_LP+9,fsr1h
  5166  0000CA  C01B  FFE1         	movff	??_ISR_LP+8,fsr1l
  5167  0000CE  C01A  FFEA         	movff	??_ISR_LP+7,fsr0h
  5168  0000D2  C019  FFE9         	movff	??_ISR_LP+6,fsr0l
  5169  0000D6  C018  FFFB         	movff	??_ISR_LP+5,pclatu
  5170  0000DA  C017  FFFA         	movff	??_ISR_LP+4,pclath
  5171  0000DE  C016  FFE0         	movff	??_ISR_LP+3,bsr
  5172  0000E2  C015  FFE8         	movff	??_ISR_LP+2,wreg
  5173  0000E6  C014  FFD8         	movff	??_ISR_LP+1,status
  5174  0000EA  9037               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5175  0000EC  0010               	retfie	
  5176  0000EE                     __end_of_ISR_LP:
  5177                           	opt stack 0
  5178                           tosu	equ	0xFFF
  5179                           tosh	equ	0xFFE
  5180                           tosl	equ	0xFFD
  5181                           pclatu	equ	0xFFB
  5182                           pclath	equ	0xFFA
  5183                           tblptru	equ	0xFF8
  5184                           tblptrh	equ	0xFF7
  5185                           tblptrl	equ	0xFF6
  5186                           tablat	equ	0xFF5
  5187                           prodh	equ	0xFF4
  5188                           prodl	equ	0xFF3
  5189                           intcon	equ	0xFF2
  5190                           postinc0	equ	0xFEE
  5191                           fsr0h	equ	0xFEA
  5192                           fsr0l	equ	0xFE9
  5193                           wreg	equ	0xFE8
  5194                           indf1	equ	0xFE7
  5195                           postdec1	equ	0xFE5
  5196                           fsr1h	equ	0xFE2
  5197                           fsr1l	equ	0xFE1
  5198                           bsr	equ	0xFE0
  5199                           indf2	equ	0xFDF
  5200                           postinc2	equ	0xFDE
  5201                           postdec2	equ	0xFDD
  5202                           fsr2h	equ	0xFDA
  5203                           fsr2l	equ	0xFD9
  5204                           status	equ	0xFD8
  5205                           
  5206 ;; *************** function i1_menuDraw *****************
  5207 ;; Defined at:
  5208 ;;		line 47 in file "menu.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;		None
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;		None
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      void 
  5215 ;; Registers used:
  5216 ;;		wreg, status,2
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5222 ;;      Params:         0       0       0       0       0       0       0       0       0
  5223 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5224 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5225 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5226 ;;Total ram usage:        0 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    1
  5229 ;; This function calls:
  5230 ;;		Nothing
  5231 ;; This function is called by:
  5232 ;;		_ISR_LP
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text40
  5237  0013B4                     __ptext40:
  5238                           	opt stack 0
  5239  0013B4                     i1_menuDraw:
  5240                           	opt stack 23
  5241                           
  5242                           ;menu.c: 49: Menu.NeedsRedraw = 1;
  5243                           
  5244                           ;incstack = 0
  5245  0013B4  0E01               	movlw	1
  5246  0013B6  6E31               	movwf	_Menu+2,c
  5247  0013B8  0012               	return		;funcret
  5248  0013BA                     __end_ofi1_menuDraw:
  5249                           	opt stack 0
  5250                           tosu	equ	0xFFF
  5251                           tosh	equ	0xFFE
  5252                           tosl	equ	0xFFD
  5253                           pclatu	equ	0xFFB
  5254                           pclath	equ	0xFFA
  5255                           tblptru	equ	0xFF8
  5256                           tblptrh	equ	0xFF7
  5257                           tblptrl	equ	0xFF6
  5258                           tablat	equ	0xFF5
  5259                           prodh	equ	0xFF4
  5260                           prodl	equ	0xFF3
  5261                           intcon	equ	0xFF2
  5262                           postinc0	equ	0xFEE
  5263                           fsr0h	equ	0xFEA
  5264                           fsr0l	equ	0xFE9
  5265                           wreg	equ	0xFE8
  5266                           indf1	equ	0xFE7
  5267                           postdec1	equ	0xFE5
  5268                           fsr1h	equ	0xFE2
  5269                           fsr1l	equ	0xFE1
  5270                           bsr	equ	0xFE0
  5271                           indf2	equ	0xFDF
  5272                           postinc2	equ	0xFDE
  5273                           postdec2	equ	0xFDD
  5274                           fsr2h	equ	0xFDA
  5275                           fsr2l	equ	0xFD9
  5276                           status	equ	0xFD8
  5277                           
  5278 ;; *************** function _ISR *****************
  5279 ;; Defined at:
  5280 ;;		line 40 in file "main.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;		None
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;		None
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      void 
  5287 ;; Registers used:
  5288 ;;		None
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5294 ;;      Params:         0       0       0       0       0       0       0       0       0
  5295 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5296 ;;      Temps:         18       0       0       0       0       0       0       0       0
  5297 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5298 ;;Total ram usage:       18 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		Interrupt level 2
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	intcode
  5308  000008                     __pintcode:
  5309                           	opt stack 0
  5310  000008                     _ISR:
  5311                           	opt stack 23
  5312                           
  5313                           ;incstack = 0
  5314  000008  8237               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5315  00000A  EDFE  F006         	call	int_func,f	;refresh shadow registers
  5316                           tosu	equ	0xFFF
  5317                           tosh	equ	0xFFE
  5318                           tosl	equ	0xFFD
  5319                           pclatu	equ	0xFFB
  5320                           pclath	equ	0xFFA
  5321                           tblptru	equ	0xFF8
  5322                           tblptrh	equ	0xFF7
  5323                           tblptrl	equ	0xFF6
  5324                           tablat	equ	0xFF5
  5325                           prodh	equ	0xFF4
  5326                           prodl	equ	0xFF3
  5327                           intcon	equ	0xFF2
  5328                           postinc0	equ	0xFEE
  5329                           fsr0h	equ	0xFEA
  5330                           fsr0l	equ	0xFE9
  5331                           wreg	equ	0xFE8
  5332                           indf1	equ	0xFE7
  5333                           postdec1	equ	0xFE5
  5334                           fsr1h	equ	0xFE2
  5335                           fsr1l	equ	0xFE1
  5336                           bsr	equ	0xFE0
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344                           	psect	intcode_body
  5345  000DFC                     __pintcode_body:
  5346                           	opt stack 23
  5347  000DFC                     int_func:
  5348                           	opt stack 23
  5349  000DFC  0006               	pop		; remove dummy address from shadow register refresh
  5350  000DFE  CFFA F001          	movff	pclath,??_ISR
  5351  000E02  CFFB F002          	movff	pclatu,??_ISR+1
  5352  000E06  CFE9 F003          	movff	fsr0l,??_ISR+2
  5353  000E0A  CFEA F004          	movff	fsr0h,??_ISR+3
  5354  000E0E  CFE1 F005          	movff	fsr1l,??_ISR+4
  5355  000E12  CFE2 F006          	movff	fsr1h,??_ISR+5
  5356  000E16  CFD9 F007          	movff	fsr2l,??_ISR+6
  5357  000E1A  CFDA F008          	movff	fsr2h,??_ISR+7
  5358  000E1E  CFF3 F009          	movff	prodl,??_ISR+8
  5359  000E22  CFF4 F00A          	movff	prodh,??_ISR+9
  5360  000E26  CFF6 F00B          	movff	tblptrl,??_ISR+10
  5361  000E2A  CFF7 F00C          	movff	tblptrh,??_ISR+11
  5362  000E2E  CFF8 F00D          	movff	tblptru,??_ISR+12
  5363  000E32  CFF5 F00E          	movff	tablat,??_ISR+13
  5364  000E36  C037  F00F         	movff	btemp,??_ISR+14
  5365  000E3A  C038  F010         	movff	btemp+1,??_ISR+15
  5366  000E3E  C039  F011         	movff	btemp+2,??_ISR+16
  5367  000E42  C03A  F012         	movff	btemp+3,??_ISR+17
  5368  000E46  C012  F03A         	movff	??_ISR+17,btemp+3
  5369  000E4A  C011  F039         	movff	??_ISR+16,btemp+2
  5370  000E4E  C010  F038         	movff	??_ISR+15,btemp+1
  5371  000E52  C00F  F037         	movff	??_ISR+14,btemp
  5372  000E56  C00E  FFF5         	movff	??_ISR+13,tablat
  5373  000E5A  C00D  FFF8         	movff	??_ISR+12,tblptru
  5374  000E5E  C00C  FFF7         	movff	??_ISR+11,tblptrh
  5375  000E62  C00B  FFF6         	movff	??_ISR+10,tblptrl
  5376  000E66  C00A  FFF4         	movff	??_ISR+9,prodh
  5377  000E6A  C009  FFF3         	movff	??_ISR+8,prodl
  5378  000E6E  C008  FFDA         	movff	??_ISR+7,fsr2h
  5379  000E72  C007  FFD9         	movff	??_ISR+6,fsr2l
  5380  000E76  C006  FFE2         	movff	??_ISR+5,fsr1h
  5381  000E7A  C005  FFE1         	movff	??_ISR+4,fsr1l
  5382  000E7E  C004  FFEA         	movff	??_ISR+3,fsr0h
  5383  000E82  C003  FFE9         	movff	??_ISR+2,fsr0l
  5384  000E86  C002  FFFB         	movff	??_ISR+1,pclatu
  5385  000E8A  C001  FFFA         	movff	??_ISR,pclath
  5386  000E8E  9237               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5387  000E90  0011               	retfie		f
  5388  000E92                     __end_of_ISR:
  5389                           	opt stack 0
  5390                           tosu	equ	0xFFF
  5391                           tosh	equ	0xFFE
  5392                           tosl	equ	0xFFD
  5393                           pclatu	equ	0xFFB
  5394                           pclath	equ	0xFFA
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           intcon	equ	0xFF2
  5402                           postinc0	equ	0xFEE
  5403                           fsr0h	equ	0xFEA
  5404                           fsr0l	equ	0xFE9
  5405                           wreg	equ	0xFE8
  5406                           indf1	equ	0xFE7
  5407                           postdec1	equ	0xFE5
  5408                           fsr1h	equ	0xFE2
  5409                           fsr1l	equ	0xFE1
  5410                           bsr	equ	0xFE0
  5411                           indf2	equ	0xFDF
  5412                           postinc2	equ	0xFDE
  5413                           postdec2	equ	0xFDD
  5414                           fsr2h	equ	0xFDA
  5415                           fsr2l	equ	0xFD9
  5416                           status	equ	0xFD8
  5417                           tosu	equ	0xFFF
  5418                           tosh	equ	0xFFE
  5419                           tosl	equ	0xFFD
  5420                           pclatu	equ	0xFFB
  5421                           pclath	equ	0xFFA
  5422                           tblptru	equ	0xFF8
  5423                           tblptrh	equ	0xFF7
  5424                           tblptrl	equ	0xFF6
  5425                           tablat	equ	0xFF5
  5426                           prodh	equ	0xFF4
  5427                           prodl	equ	0xFF3
  5428                           intcon	equ	0xFF2
  5429                           postinc0	equ	0xFEE
  5430                           fsr0h	equ	0xFEA
  5431                           fsr0l	equ	0xFE9
  5432                           wreg	equ	0xFE8
  5433                           indf1	equ	0xFE7
  5434                           postdec1	equ	0xFE5
  5435                           fsr1h	equ	0xFE2
  5436                           fsr1l	equ	0xFE1
  5437                           bsr	equ	0xFE0
  5438                           indf2	equ	0xFDF
  5439                           postinc2	equ	0xFDE
  5440                           postdec2	equ	0xFDD
  5441                           fsr2h	equ	0xFDA
  5442                           fsr2l	equ	0xFD9
  5443                           status	equ	0xFD8
  5444                           
  5445                           	psect	rparam
  5446  0000                     tosu	equ	0xFFF
  5447                           tosh	equ	0xFFE
  5448                           tosl	equ	0xFFD
  5449                           pclatu	equ	0xFFB
  5450                           pclath	equ	0xFFA
  5451                           tblptru	equ	0xFF8
  5452                           tblptrh	equ	0xFF7
  5453                           tblptrl	equ	0xFF6
  5454                           tablat	equ	0xFF5
  5455                           prodh	equ	0xFF4
  5456                           prodl	equ	0xFF3
  5457                           intcon	equ	0xFF2
  5458                           postinc0	equ	0xFEE
  5459                           fsr0h	equ	0xFEA
  5460                           fsr0l	equ	0xFE9
  5461                           wreg	equ	0xFE8
  5462                           indf1	equ	0xFE7
  5463                           postdec1	equ	0xFE5
  5464                           fsr1h	equ	0xFE2
  5465                           fsr1l	equ	0xFE1
  5466                           bsr	equ	0xFE0
  5467                           indf2	equ	0xFDF
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474                           	psect	temp
  5475  000037                     btemp:
  5476                           	opt stack 0
  5477  000037                     	ds	1
  5478  0000                     int$flags	set	btemp
  5479  0000                     wtemp6	set	btemp+1
  5480                           tosu	equ	0xFFF
  5481                           tosh	equ	0xFFE
  5482                           tosl	equ	0xFFD
  5483                           pclatu	equ	0xFFB
  5484                           pclath	equ	0xFFA
  5485                           tblptru	equ	0xFF8
  5486                           tblptrh	equ	0xFF7
  5487                           tblptrl	equ	0xFF6
  5488                           tablat	equ	0xFF5
  5489                           prodh	equ	0xFF4
  5490                           prodl	equ	0xFF3
  5491                           intcon	equ	0xFF2
  5492                           postinc0	equ	0xFEE
  5493                           fsr0h	equ	0xFEA
  5494                           fsr0l	equ	0xFE9
  5495                           wreg	equ	0xFE8
  5496                           indf1	equ	0xFE7
  5497                           postdec1	equ	0xFE5
  5498                           fsr1h	equ	0xFE2
  5499                           fsr1l	equ	0xFE1
  5500                           bsr	equ	0xFE0
  5501                           indf2	equ	0xFDF
  5502                           postinc2	equ	0xFDE
  5503                           postdec2	equ	0xFDD
  5504                           fsr2h	equ	0xFDA
  5505                           fsr2l	equ	0xFD9
  5506                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    10
    Data        6
    BSS         79
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      54
    BANK0           160     31     108
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    magnetoGetCord@coord	PTR struct . size(2) Largest target is 6
		 -> cord(BANK0[6]), 

    Menu.Current.Exit	PTR FTN()void  size(2) Largest target is 1
		 -> OnExitMenu1(), 

    Menu.Current.Render	PTR FTN()void  size(2) Largest target is 1
		 -> OnRenderMenu1(), 

    Menu.Current.Enter	PTR FTN()void  size(2) Largest target is 1
		 -> OnEnterMenu1(), 

    Menu.Items.Exit	PTR FTN()void  size(2) Largest target is 1
		 -> OnExitMenu1(), 

    Menu.Items.Render	PTR FTN()void  size(2) Largest target is 1
		 -> OnRenderMenu1(), 

    Menu.Items.Enter	PTR FTN()void  size(2) Largest target is 1
		 -> OnEnterMenu1(), 

    menuSetPosition@item	PTR struct . size(2) Largest target is 6
		 -> menu1(BANK0[6]), 

    menuInit@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    lcdRuntime@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    lcdWrite@string	PTR unsigned char  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    lcdWrite@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    lcdCleanAll@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    lcdMemClean@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    lcdInit@lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    S28$Exit	PTR FTN()void  size(2) Largest target is 1
		 -> OnExitMenu1(), 

    menu1.Exit	PTR FTN()void  size(2) Largest target is 1
		 -> OnExitMenu1(), 

    S28$Render	PTR FTN()void  size(2) Largest target is 1
		 -> OnRenderMenu1(), 

    menu1.Render	PTR FTN()void  size(2) Largest target is 1
		 -> OnRenderMenu1(), 

    S28$Enter	PTR FTN()void  size(2) Largest target is 1
		 -> OnEnterMenu1(), 

    menu1.Enter	PTR FTN()void  size(2) Largest target is 1
		 -> OnEnterMenu1(), 

    S32$Items	PTR struct .[1] size(2) Largest target is 6
		 -> menu1(BANK0[6]), 

    Menu.Items	PTR struct .[1] size(2) Largest target is 6
		 -> menu1(BANK0[6]), 

    S32$Current	PTR struct . size(2) Largest target is 6
		 -> menu1(BANK0[6]), 

    Menu.Current	PTR struct . size(2) Largest target is 6
		 -> menu1(BANK0[6]), 

    S32$lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 

    Menu.lcd	PTR struct . size(2) Largest target is 33
		 -> lcd(BANK0[33]), 


Critical Paths under _main in COMRAM

    _main->_memset
    _lcdRuntime->_SetDDRamAddr
    _WriteDataXLCD->_DelayFor18TCY
    _OnRenderMenu1->_lcdWrite
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _menuGoto->__menuEnterPosition
    _magnetoGetCord->_I2C_Read
    _magnetoGetCord->_I2C_Repeated_Start
    _magnetoGetCord->_I2C_Start_Wait
    _I2C_Start_Wait->_I2C_Write
    _I2C_Repeated_Start->_I2C_Write
    _lcdClean->_delay_ms
    _OpenXLCD->_SetDDRamAddr
    _WriteCmdXLCD->_DelayFor18TCY
    _SetDDRamAddr->_DelayFor18TCY
    _DelayPORXLCD->_delay_ms
    _BusyXLCD->_DelayFor18TCY

Critical Paths under _ISR_LP in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _OnRenderMenu1->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdInit->_lcdCleanAll

Critical Paths under _ISR_LP in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_LP in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_LP in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_LP in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_LP in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_LP in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_LP in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_LP in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    7068
                                             30 BANK0      1     1      0
                            _lcdInit
                     _magnetoGetCord
                             _memset
                           _menuGoto
                           _menuInit
                        _menuRuntime
                    _menuSetPosition
 ---------------------------------------------------------------------------------
 (1) _menuSetPosition                                      3     1      2     120
                                             40 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _menuRuntime                                          0     0      0    4091
                      _OnRenderMenu1 *
                         _lcdRuntime
 ---------------------------------------------------------------------------------
 (2) _lcdRuntime                                           8     6      2     740
                                              0 BANK0      8     6      2
                           _BusyXLCD
                       _SetDDRamAddr
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (3) _WriteDataXLCD                                        1     1      0     130
                                             42 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _OnRenderMenu1                                        0     0      0    3351
                           _lcdWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    2687
                                              7 BANK0     23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                             40 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     511
                                             40 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                             44 COMRAM     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     421
                                             40 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _lcdWrite                                             6     0      6     664
                                             40 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _menuInit                                             2     0      2      98
                                             40 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _menuGoto                                             1     1      0      44
                                             41 COMRAM     1     1      0
                 __menuEnterPosition
 ---------------------------------------------------------------------------------
 (2) __menuEnterPosition                                   1     1      0      22
                                             40 COMRAM     1     1      0
                       _OnEnterMenu1 *
                           _menuDraw
 ---------------------------------------------------------------------------------
 (3) _menuDraw                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OnEnterMenu1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     407
                                             40 COMRAM     6     0      6
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _magnetoGetCord                                       6     4      2     338
                                             42 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                           _I2C_Read
                 _I2C_Repeated_Start
                     _I2C_Start_Wait
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Start_Wait                                       1     1      0      44
                                             41 COMRAM     1     1      0
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Repeated_Start                                   1     1      0      44
                                             41 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      22
                                             40 COMRAM     1     1      0
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             2     2      0      45
                                             40 COMRAM     2     2      0
                            _I2C_Ack
                           _I2C_Nack
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (3) _I2C_Ready                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Nack                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              2     0      2    1936
                                              2 BANK0      2     0      2
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
                        _lcdCleanAll
 ---------------------------------------------------------------------------------
 (2) _lcdCleanAll                                          2     0      2     889
                                              0 BANK0      2     0      2
                           _lcdClean
                        _lcdMemClean
 ---------------------------------------------------------------------------------
 (3) _lcdMemClean                                          3     1      2     232
                                             40 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _lcdClean                                             0     0      0     536
                           _BusyXLCD
                       _WriteCmdXLCD
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     728
                                              0 BANK0      1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (4) _WriteCmdXLCD                                         1     1      0     130
                                             42 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0     130
                                             42 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0     338
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             5     3      2     338
                                             40 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      31
                                             40 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0      68
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (4) _DelayFor18TCY                                        2     2      0      68
                                             40 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR_LP                                              22    22      0       0
                                             18 COMRAM    22    22      0
                         i1_menuDraw
 ---------------------------------------------------------------------------------
 (7) i1_menuDraw                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcdInit
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _Delay10KTCYx
       _DelayPORXLCD
         _delay_ms
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
     _lcdCleanAll
       _lcdClean
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _delay_ms
       _lcdMemClean
   _magnetoGetCord
     _I2C_Read
       _I2C_Ack
       _I2C_Nack
       _I2C_Ready
     _I2C_Repeated_Start
       _I2C_Write
         _I2C_Ready
     _I2C_Start_Wait
       _I2C_Stop
       _I2C_Write
         _I2C_Ready
     _I2C_Stop
     _I2C_Write
       _I2C_Ready
   _memset
   _menuGoto
     __menuEnterPosition
       _OnEnterMenu1 *
       _menuDraw *
   _menuInit
   _menuRuntime
     _OnRenderMenu1 *
       _lcdWrite
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _lcdRuntime *
       _BusyXLCD
         _DelayFor18TCY
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteDataXLCD
         _DelayFor18TCY
   _menuSetPosition

 _ISR_LP (ROOT)
   i1_menuDraw

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1F      6C       5       67.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      36       1       57.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A2      20        0.0%
DATA                 0      0      A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jul 02 01:40:50 2018

                         lcdRuntime@i 00AB                    __size_of_I2C_Ready 0008  
                         lcdWrite@col 002C                           lcdWrite@lcd 0029  
                       ?_OnEnterMenu1 0001                           lcdWrite@row 002B  
                         _SSPSTATbits 000FC7                    __size_of_I2C_Write 0016  
                                  l90 12F6                                    l82 0DEC  
                                  l91 12F4                                    l83 0DDE  
                                  l84 0DF6                           __CFG_BOR$ON 000000  
                                  bsr 000FE0                   ___wmul@multiplicand 002B  
                         __CFG_BORV$2 000000                          __CFG_CP0$OFF 000000  
                        __CFG_CP1$OFF 000000                          __CFG_CP2$OFF 000000  
                        __CFG_CP3$OFF 000000                           __CFG_LVP$ON 000000  
                       lcdRuntime@lcd 00A7                                   l113 10B2  
                                 l130 0E9E                                   l204 11CC  
                                 l116 10C2                                   l231 0D2A  
                                 l119 10D2                                   l143 0B94  
                                 l144 0B6A                                   l225 0D0A  
                                 l234 0D3A                                   l138 0B5E  
                                 l219 0CEE                                   l172 1270  
                                 l228 0D1A                                   l404 136E  
                                 l148 0BDC                                   l500 091A  
                                 l164 0AF6                                   l237 0D4A  
                                 l149 0BB2                                   l510 09D2  
                                 l175 1276                                   l511 0A2E  
                                 l159 0A96                                   l360 129A  
                                 l512 09D8                                   l504 0964  
                                 l505 0988                                   l370 130E  
                                 l506 0990                                   l390 1390  
                                 l358 1298                                   l384 139A  
                                 l378 1332                                   l491 086A  
                                 l396 1238                                   l717 1338  
                                 l493 08C8                                   l398 124C  
                                 l399 1250                                   l488 0826  
                                 l489 0840                                   l498 08F0  
                                 l931 0F08                                   l932 0F00  
                                 l852 128E                                   l941 107C  
                                 l942 1074                                   l935 0F28  
                                 l936 0F32                                   l945 1094  
                                 l946 109E                                   l955 11FC  
                                 l956 11EA                          __CFG_CPB$OFF 000000  
                                 _PEN 007E2A                          __CFG_CPD$OFF 000000  
                                 _ISR 0008                       __end_of_I2C_Ack 13A0  
                                 _lcd 0060                 __size_of_WriteCmdXLCD 003E  
                                 prod 000FF3                                   tosl 000FFD  
                                 wreg 000FE8                                  ?_ISR 0001  
                        __CFG_WDT$OFF 000000                                  l2229 0E96  
                                l3075 0B36                                  l3059 0AD6  
                                l2711 1260                                  l3079 11EA  
                                l2861 091E                                  STR_1 080B  
                          i1_menuDraw 13B4                                  _GIEH 007F97  
                                u2020 0998                                  u1310 0BF0  
                                u2030 09B6                                  u2200 0AD6  
                                u2050 0A36                                  u1340 0EDA  
                                u2060 0A50                                  u2230 0B36  
                                u2090 0CF8                                  u1290 0BA8  
                                u2308 1042                                  u2085 0F52  
                                u2309 1056                                  u1900 1080  
                                u1558 1110                                  u2367 133E  
                                u1559 1124                                  _IPEN 007E87  
                                u1870 0F0C                                  _PEIE 007F96  
                                u1980 094A                                  _RCEN 007E2B  
                                _RCIF 007CF5                                  i1l75 0096  
                                _RSEN 007E29                                  _TRMT 007D61  
                                _TXIF 007CF4                                  _Menu 002F  
                                _cord 00A1                                  _main 0D5C  
                  __menuEnterPosition 10EA                      __end_of_I2C_Nack 1396  
                    __end_of_I2C_Read 1258                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 0037  
                    __end_of_I2C_Stop 1378                __size_of_WriteDataXLCD 003E  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00EE                         __CFG_IESO$OFF 000000  
                       __CFG_MCLRE$ON 000000                          ___param_bank 000000  
                 ?__menuEnterPosition 0001                         _OnRenderMenu1 0F8E  
                      ??_OnEnterMenu1 0029                                 ??_ISR 0001  
                        _WriteCmdXLCD 1168                       lcdRuntime@i_343 00AD  
                       __CFG_PLLDIV$1 000000                        __CFG_CCP2MX$ON 000000  
                      lcdWrite@string 002D                         ?_SetDDRamAddr 0001  
                               ?_main 0001                                 _ACKEN 007E2C  
                               _ACKDT 007E2D                       __end_of___lwdiv 0F3C  
                     __end_of___lwmod 10A8                                 _RCREG 000FAE  
                               _RCSTA 000FAB                                 _TMR1H 000FCF  
                               _TMR1L 000FCE                                 _SPBRG 000FAF  
                               _PORTD 000F83                         __CFG_USBDIV$1 000000  
                               _TRISC 000F94                                 _TRISD 000F95  
                               _SSPIE 007CEB                                 _SSPIF 007CF3  
                               _TXREG 000FAD                 __size_of_Delay10KTCYx 0016  
                               _TXSTA 000FAC                         __CFG_PWRT$OFF 000000  
                       __CFG_WRT0$OFF 000000                         __CFG_WRT1$OFF 000000  
                       __CFG_WRT2$OFF 000000                         __CFG_WRT3$OFF 000000  
                     __end_of_lcdInit 10EA                        __CFG_EBTR0$OFF 000000  
                      __CFG_FCMEN$OFF 000000                        __CFG_EBTR1$OFF 000000  
                      __CFG_EBTR2$OFF 000000                        __CFG_EBTR3$OFF 000000  
                ??__menuEnterPosition 0029                         __CFG_WRTB$OFF 000000  
                       __CFG_WRTC$OFF 000000                          ?_menuRuntime 0001  
                       __CFG_WRTD$OFF 000000                        __CFG_EBTRB$OFF 000000  
                     __end_of_dpowers 080B                                 _menu1 00C6  
                     __end_of_isdigit 1296                     __end_of_I2C_Ready 13A8  
                   __end_of_I2C_Write 1336                                 pclath 000FFA  
                               tablat 000FF5                                 status 000FD8  
                               wtemp6 0038                       __end_of_sprintf 0A5E  
                      __CFG_ICPRT$OFF 000000                       __initialization 0FDA  
                      ?_OnRenderMenu1 0001                          __end_of_main 0DFC  
                    __end_of_BusyXLCD 11E0                  __size_of_lcdCleanAll 0012  
                        _Delay10KTCYx 1336                 __size_of_DelayPORXLCD 000E  
                           ??_I2C_Ack 0029                        ??_SetDDRamAddr 002B  
                    __end_of_OpenXLCD 0D5C                                ??_main 002F  
                __size_of_lcdMemClean 0056                         __activetblptr 000002  
                       _WriteDataXLCD 112A                        DelayFor18TCY@i 0029  
                      _magnetoGetCord 0BFE                                _ADCON1 000FC1  
                         ?i1_menuDraw 0001                                _OSCCON 000FD3  
                              _ISR_LP 0018                                _TMR1IE 007CE8  
                              _TMR1IF 007CF0                                _TMR1IP 007CF8  
                              _SSPADD 000FC8                                _TRISB0 007C98  
                              _TRISB1 007C99                                _SSPBUF 000FC9  
                    __end_of_delay_ms 130A                      __end_of_lcdClean 12D2  
                        _DelayPORXLCD 135E                        __CFG_XINST$OFF 000000  
                      lcdCleanAll@lcd 00A7                      __end_of_lcdWrite 0BFE  
                         menuInit@lcd 0029                   magnetoGetCord@coord 002B  
                              ___wmul 120E                        __CFG_STVREN$ON 000000  
                         menuGoto@pos 002A                             ??___lwdiv 002D  
                           ??___lwmod 002D                                _buffer 0081  
                    __end_of_menuDraw 13B4                      __end_of_menuInit 1382  
                    __end_of_menuGoto 138C                                _memset 11E0  
                              clear_0 1000                                clear_1 100C  
                           ??_lcdInit 002F                    menuSetPosition@pos 002B  
                  _I2C_Repeated_Start 130A                        ?_WriteDataXLCD 0001  
                     _menuSetPosition 12D2                             ?_I2C_Nack 0001  
                           ??_isdigit 0029                             ?_I2C_Read 0001  
                           ?_I2C_Stop 0001                __end_of_magnetoGetCord 0CB4  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                 ?_I2C_Repeated_Start 0001                             ??_sprintf 00B8  
                __end_of_OnEnterMenu1 13BC                           _OnExitMenu1 000000  
                          __accesstop 0060               __end_of__initialization 1012  
                     __CFG_PBADEN$OFF 000000                         ___rparam_used 000001  
                     ??_OnRenderMenu1 002F                  ??_I2C_Repeated_Start 002A  
                      __pcstackCOMRAM 0001                          __pidataBANK0 13A8  
                 __size_ofi1_menuDraw 0006                            ??_I2C_Nack 0029  
                          ??_I2C_Read 0029                            ??_I2C_Stop 0029  
                     ?_magnetoGetCord 002B                __size_of_DelayFor18TCY 0020  
                        sprintf@width 00C2               __size_of_I2C_Start_Wait 001E  
                __size_of_menuRuntime 0044                            __pbssBANK0 0060  
                           ?_BusyXLCD 0001                               ?_ISR_LP 0001  
                     WriteCmdXLCD@cmd 002B                  __end_of_SetDDRamAddr 0F8E  
                           ?_OpenXLCD 0001                          I2C_Read@flag 0029  
                   WriteDataXLCD@data 002B                        I2C_Read@buffer 002A  
                             ?___wmul 0029               __end_of_menuSetPosition 12EE  
                             _I2C_Ack 1396                       ??_WriteDataXLCD 002B  
                             _ACKSTAT 007E2E                               ?_memset 0029  
                          _lcdRuntime 0A5E                             ?_delay_ms 0029  
                           ?_lcdClean 0001                               i1u80_28 0088  
                             i1u79_20 0086                               _SSPCON1 000FC6  
                             _SSPCON2 000FC5                             ?_lcdWrite 0029  
                             _SSPSTAT 000FC7                            ??_BusyXLCD 002B  
                     __CFG_VREGEN$OFF 000000                             ?_menuDraw 0001  
                           ?_menuInit 0029                             ?_menuGoto 0001  
                     __size_of_ISR_LP 00D6                             _I2C_Ready 13A0  
                      lcdMemClean@lcd 0029                            ??_OpenXLCD 002F  
                           _I2C_Write 1320                               __Hparam 0000  
                             __Lparam 0000                         _DelayFor18TCY 1258  
                     __size_of___wmul 0026                               ___lwdiv 0EE8  
                             ___lwmod 1064                          __psmallconst 0800  
                             __pcinit 0FDA                       __size_of_memset 002E  
                             __ramtop 0800                               _lcdInit 10A8  
                             __ptext0 0D5C                               __ptext1 12D2  
                             __ptext2 1020                               __ptext3 0A5E  
                             __ptext4 112A                               __ptext5 0F8E  
                             __ptext6 081A                               __ptext7 1278  
                             __ptext8 120E                               __ptext9 1064  
   I2C_Start_Wait@slave_write_address 002A                          __size_of_ISR 0E8A  
                           _T1CONbits 000FCD                               _dpowers 0801  
                             _isdigit 1278                 __size_of_OnEnterMenu1 0002  
                          ??_delay_ms 002B                            ??_lcdClean 002E  
                 menuSetPosition@item 0029           __size_of__menuEnterPosition 0040  
                          ??_lcdWrite 002F                               _sprintf 081A  
                      __pintcode_body 0DFC                          ??i1_menuDraw 0013  
                end_of_initialization 1012                            ??_menuDraw 0029  
                             memset@c 002B                               memset@n 002D  
                             memset@p 00A7                            ??_menuInit 002B  
                          ??_menuGoto 002A                         __Lmediumconst 0000  
                             int_func 0DFC                            ?_I2C_Ready 0001  
                          ?_I2C_Write 0001                         ??_lcdCleanAll 002E  
                          lcdInit@lcd 00A9                             _RCSTAbits 000FAB  
                      ?_DelayFor18TCY 0001                               postdec1 000FE5  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                         ??_lcdMemClean 002B  
                    ?_menuSetPosition 0029                          _OnEnterMenu1 13BA  
                  __end_ofi1_menuDraw 13BA                             _PORTCbits 000F82  
                         ?_lcdRuntime 00A7                             _TRISAbits 000F92  
                           _TRISDbits 000F95                     __size_of_I2C_Nack 000A  
                   __size_of_I2C_Read 0024                 __size_of_SetDDRamAddr 0052  
                   __size_of_I2C_Stop 000C                        _I2C_Start_Wait 1296  
                      __end_of_ISR_LP 00EE                        __end_of___wmul 1234  
                       delay_ms@milis 0029                   __end_of_lcdCleanAll 135E  
                    ??_magnetoGetCord 00A7                        __end_of_memset 120E  
                        _SetDDRamAddr 0F3C                    SetDDRamAddr@DDaddr 002E  
                 __end_of_lcdMemClean 0EE8                   start_initialization 0FDA  
                         __end_of_ISR 0E92                __end_of_I2C_Start_Wait 12B4  
I2C_Repeated_Start@slave_read_address 002A                              ??_ISR_LP 0013  
                         ??_I2C_Ready 0029                     __size_of_BusyXLCD 003A  
                         ??_I2C_Write 0029                       ??_DelayFor18TCY 0029  
                 __size_of_lcdRuntime 00E6                     __size_of_OpenXLCD 00A8  
         __size_of_I2C_Repeated_Start 0016                 __end_of_OnRenderMenu1 0FDA  
                            ??___wmul 002D                         ?_WriteCmdXLCD 0001  
                         __pdataBANK0 00C6                      __CFG_LPT1OSC$OFF 000000  
                            ?_I2C_Ack 0001                              ??_memset 002F  
                         __pbssCOMRAM 002F                         __pcstackBANK0 00A7  
                       ??_menuRuntime 002F                       ?_I2C_Start_Wait 0001  
                        _isdigit$1150 002A                     __size_of_delay_ms 001C  
                   __size_of_lcdClean 001E                     __size_of_lcdWrite 00BA  
                         sprintf@flag 00BF                           sprintf@prec 00BE  
                   __size_of_menuDraw 0006                     __size_of_menuInit 000A  
                   __size_of_menuGoto 000A                      ___lwdiv@dividend 0029  
                         _lcdCleanAll 134C                             __pintcode 0008  
                      ??_WriteCmdXLCD 002B                         ?_Delay10KTCYx 0001  
                            ?___lwdiv 0029                              ?___lwmod 00AA  
                         _lcdMemClean 0E92                           __pintcodelo 0018  
                            ?_lcdInit 00A9                 __end_of_WriteDataXLCD 1168  
                         __smallconst 0800                              _I2C_Nack 138C  
                            ?_isdigit 0001                              _I2C_Read 1234  
                            _I2C_Stop 136C                      ___lwdiv@quotient 00A8  
                            ?_sprintf 00AE                   __end_of_menuRuntime 1064  
                      ___wmul@product 002D                              _LATDbits 000F8C  
                           delay_ms@t 002D                         ?_DelayPORXLCD 0001  
                     OpenXLCD@lcdtype 00A7                      __CFG_WDTPS$32768 000000  
                      ??_Delay10KTCYx 0029                      __size_of_I2C_Ack 000A  
                   ___wmul@multiplier 0029                          ??_lcdRuntime 00A9  
          __end_of__menuEnterPosition 112A                             main@opcao 00C5  
                    Delay10KTCYx@unit 002A                             copy_data0 0FEE  
                            _BusyXLCD 11A6                        ??_DelayPORXLCD 002E  
                            _OpenXLCD 0CB4                              __Hrparam 0000  
                            __Lrparam 0000                    __end_of_lcdRuntime 0B44  
                       I2C_Write@data 0029                      __size_of___lwdiv 0054  
                    __size_of___lwmod 0044                 __CFG_FOSC$INTOSCIO_EC 000000  
                    __size_of_lcdInit 0042                            sprintf@val 00C0  
            __size_of_menuSetPosition 001C                      __size_of_isdigit 001E  
                            _delay_ms 12EE                              _lcdClean 12B4  
                     ___lwdiv@divisor 002B                       ___lwdiv@counter 00A7  
                         _menuRuntime 1020                              __ptext10 0EE8  
                            __ptext11 0B44                              __ptext20 136C  
                            __ptext12 1378                              __ptext21 130A  
                            __ptext13 1382                              __ptext30 12B4  
                            __ptext22 1320                              __ptext14 10EA  
                            __ptext31 0CB4                              __ptext23 1234  
                            __ptext15 13AE                              __ptext40 13B4  
                            __ptext32 1168                              __ptext24 13A0  
                            __ptext16 13BA                              __ptext33 0F3C  
                            __ptext25 138C                              __ptext17 11E0  
                            __ptext34 135E                              __ptext26 1396  
                            __ptext18 0BFE                              __ptext35 12EE  
                            __ptext27 10A8                              __ptext19 1296  
                            __ptext36 1336                              __ptext28 134C  
                            __ptext37 11A6                              __ptext29 0E92  
                            __ptext38 1258                              _lcdWrite 0B44  
                __end_of_WriteCmdXLCD 11A6                      __size_of_sprintf 0244  
                        lcdMemClean@i 002B                __menuEnterPosition@pos 0029  
                            _menuDraw 13AE                              _menuInit 1378  
                            _menuGoto 1382                         __size_of_main 00A0  
                            int$flags 0037                      ??_I2C_Start_Wait 002A  
               __CFG_CPUDIV$OSC1_PLL2 000000                              isdigit@c 002B  
                            memset@p1 0029                  __end_of_Delay10KTCYx 134C  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 00BC                             sprintf@sp 00AE  
                    ___lwmod@dividend 00AA            __end_of_I2C_Repeated_Start 1320  
                        ?_lcdCleanAll 00A7                 __end_of_DelayFor18TCY 1278  
                        ?_lcdMemClean 0029                              sprintf@c 00C4  
                            sprintf@f 00B0                  __end_of_DelayPORXLCD 136C  
                     ___lwmod@divisor 00AC                       ___lwmod@counter 002D  
                         _SSPCON2bits 000FC5               __size_of_magnetoGetCord 00B6  
              __size_of_OnRenderMenu1 004C                     ??_menuSetPosition 002B  
